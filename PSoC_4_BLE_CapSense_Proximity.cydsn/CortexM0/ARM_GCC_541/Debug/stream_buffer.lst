ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stream_buffer.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	x,2,2
  20              		.section	.text.xStreamBufferGenericCreate,"ax",%progbits
  21              		.align	2
  22              		.global	xStreamBufferGenericCreate
  23              		.code	16
  24              		.thumb_func
  25              		.type	xStreamBufferGenericCreate, %function
  26              	xStreamBufferGenericCreate:
  27              	.LFB0:
  28              		.file 1 "..\\FreeRTOS\\Source\\stream_buffer.c"
   1:..\FreeRTOS\Source/stream_buffer.c **** /*
   2:..\FreeRTOS\Source/stream_buffer.c ****  * FreeRTOS Kernel V10.4.3
   3:..\FreeRTOS\Source/stream_buffer.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\Source/stream_buffer.c ****  *
   5:..\FreeRTOS\Source/stream_buffer.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS\Source/stream_buffer.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\Source/stream_buffer.c ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\Source/stream_buffer.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS\Source/stream_buffer.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\Source/stream_buffer.c ****  * subject to the following conditions:
  11:..\FreeRTOS\Source/stream_buffer.c ****  *
  12:..\FreeRTOS\Source/stream_buffer.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\Source/stream_buffer.c ****  * copies or substantial portions of the Software.
  14:..\FreeRTOS\Source/stream_buffer.c ****  *
  15:..\FreeRTOS\Source/stream_buffer.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\FreeRTOS\Source/stream_buffer.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\FreeRTOS\Source/stream_buffer.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\FreeRTOS\Source/stream_buffer.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\FreeRTOS\Source/stream_buffer.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\FreeRTOS\Source/stream_buffer.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\FreeRTOS\Source/stream_buffer.c ****  *
  22:..\FreeRTOS\Source/stream_buffer.c ****  * https://www.FreeRTOS.org
  23:..\FreeRTOS\Source/stream_buffer.c ****  * https://github.com/FreeRTOS
  24:..\FreeRTOS\Source/stream_buffer.c ****  *
  25:..\FreeRTOS\Source/stream_buffer.c ****  */
  26:..\FreeRTOS\Source/stream_buffer.c **** 
  27:..\FreeRTOS\Source/stream_buffer.c **** /* Standard includes. */
  28:..\FreeRTOS\Source/stream_buffer.c **** #include <stdint.h>
  29:..\FreeRTOS\Source/stream_buffer.c **** #include <string.h>
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 2


  30:..\FreeRTOS\Source/stream_buffer.c **** 
  31:..\FreeRTOS\Source/stream_buffer.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:..\FreeRTOS\Source/stream_buffer.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  33:..\FreeRTOS\Source/stream_buffer.c ****  * task.h is included from an application file. */
  34:..\FreeRTOS\Source/stream_buffer.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:..\FreeRTOS\Source/stream_buffer.c **** 
  36:..\FreeRTOS\Source/stream_buffer.c **** /* FreeRTOS includes. */
  37:..\FreeRTOS\Source/stream_buffer.c **** #include "FreeRTOS.h"
  38:..\FreeRTOS\Source/stream_buffer.c **** #include "task.h"
  39:..\FreeRTOS\Source/stream_buffer.c **** #include "stream_buffer.h"
  40:..\FreeRTOS\Source/stream_buffer.c **** 
  41:..\FreeRTOS\Source/stream_buffer.c **** #if ( configUSE_TASK_NOTIFICATIONS != 1 )
  42:..\FreeRTOS\Source/stream_buffer.c ****     #error configUSE_TASK_NOTIFICATIONS must be set to 1 to build stream_buffer.c
  43:..\FreeRTOS\Source/stream_buffer.c **** #endif
  44:..\FreeRTOS\Source/stream_buffer.c **** 
  45:..\FreeRTOS\Source/stream_buffer.c **** /* Lint e961, e9021 and e750 are suppressed as a MISRA exception justified
  46:..\FreeRTOS\Source/stream_buffer.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:..\FreeRTOS\Source/stream_buffer.c ****  * for the header files above, but not in this file, in order to generate the
  48:..\FreeRTOS\Source/stream_buffer.c ****  * correct privileged Vs unprivileged linkage and placement. */
  49:..\FreeRTOS\Source/stream_buffer.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  50:..\FreeRTOS\Source/stream_buffer.c **** 
  51:..\FreeRTOS\Source/stream_buffer.c **** /* If the user has not provided application specific Rx notification macros,
  52:..\FreeRTOS\Source/stream_buffer.c ****  * or #defined the notification macros away, them provide default implementations
  53:..\FreeRTOS\Source/stream_buffer.c ****  * that uses task notifications. */
  54:..\FreeRTOS\Source/stream_buffer.c **** /*lint -save -e9026 Function like macros allowed and needed here so they can be overridden. */
  55:..\FreeRTOS\Source/stream_buffer.c **** #ifndef sbRECEIVE_COMPLETED
  56:..\FreeRTOS\Source/stream_buffer.c ****     #define sbRECEIVE_COMPLETED( pxStreamBuffer )                         \
  57:..\FreeRTOS\Source/stream_buffer.c ****     vTaskSuspendAll();                                                    \
  58:..\FreeRTOS\Source/stream_buffer.c ****     {                                                                     \
  59:..\FreeRTOS\Source/stream_buffer.c ****         if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )              \
  60:..\FreeRTOS\Source/stream_buffer.c ****         {                                                                 \
  61:..\FreeRTOS\Source/stream_buffer.c ****             ( void ) xTaskNotify( ( pxStreamBuffer )->xTaskWaitingToSend, \
  62:..\FreeRTOS\Source/stream_buffer.c ****                                   ( uint32_t ) 0,                         \
  63:..\FreeRTOS\Source/stream_buffer.c ****                                   eNoAction );                            \
  64:..\FreeRTOS\Source/stream_buffer.c ****             ( pxStreamBuffer )->xTaskWaitingToSend = NULL;                \
  65:..\FreeRTOS\Source/stream_buffer.c ****         }                                                                 \
  66:..\FreeRTOS\Source/stream_buffer.c ****     }                                                                     \
  67:..\FreeRTOS\Source/stream_buffer.c ****     ( void ) xTaskResumeAll();
  68:..\FreeRTOS\Source/stream_buffer.c **** #endif /* sbRECEIVE_COMPLETED */
  69:..\FreeRTOS\Source/stream_buffer.c **** 
  70:..\FreeRTOS\Source/stream_buffer.c **** #ifndef sbRECEIVE_COMPLETED_FROM_ISR
  71:..\FreeRTOS\Source/stream_buffer.c ****     #define sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer,                            \
  72:..\FreeRTOS\Source/stream_buffer.c ****                                           pxHigherPriorityTaskWoken )                \
  73:..\FreeRTOS\Source/stream_buffer.c ****     {                                                                                \
  74:..\FreeRTOS\Source/stream_buffer.c ****         UBaseType_t uxSavedInterruptStatus;                                          \
  75:..\FreeRTOS\Source/stream_buffer.c ****                                                                                      \
  76:..\FreeRTOS\Source/stream_buffer.c ****         uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();  \
  77:..\FreeRTOS\Source/stream_buffer.c ****         {                                                                            \
  78:..\FreeRTOS\Source/stream_buffer.c ****             if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )                     \
  79:..\FreeRTOS\Source/stream_buffer.c ****             {                                                                        \
  80:..\FreeRTOS\Source/stream_buffer.c ****                 ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend, \
  81:..\FreeRTOS\Source/stream_buffer.c ****                                              ( uint32_t ) 0,                         \
  82:..\FreeRTOS\Source/stream_buffer.c ****                                              eNoAction,                              \
  83:..\FreeRTOS\Source/stream_buffer.c ****                                              pxHigherPriorityTaskWoken );            \
  84:..\FreeRTOS\Source/stream_buffer.c ****                 ( pxStreamBuffer )->xTaskWaitingToSend = NULL;                       \
  85:..\FreeRTOS\Source/stream_buffer.c ****             }                                                                        \
  86:..\FreeRTOS\Source/stream_buffer.c ****         }                                                                            \
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 3


  87:..\FreeRTOS\Source/stream_buffer.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );                 \
  88:..\FreeRTOS\Source/stream_buffer.c ****     }
  89:..\FreeRTOS\Source/stream_buffer.c **** #endif /* sbRECEIVE_COMPLETED_FROM_ISR */
  90:..\FreeRTOS\Source/stream_buffer.c **** 
  91:..\FreeRTOS\Source/stream_buffer.c **** /* If the user has not provided an application specific Tx notification macro,
  92:..\FreeRTOS\Source/stream_buffer.c ****  * or #defined the notification macro away, them provide a default implementation
  93:..\FreeRTOS\Source/stream_buffer.c ****  * that uses task notifications. */
  94:..\FreeRTOS\Source/stream_buffer.c **** #ifndef sbSEND_COMPLETED
  95:..\FreeRTOS\Source/stream_buffer.c ****     #define sbSEND_COMPLETED( pxStreamBuffer )                               \
  96:..\FreeRTOS\Source/stream_buffer.c ****     vTaskSuspendAll();                                                       \
  97:..\FreeRTOS\Source/stream_buffer.c ****     {                                                                        \
  98:..\FreeRTOS\Source/stream_buffer.c ****         if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )              \
  99:..\FreeRTOS\Source/stream_buffer.c ****         {                                                                    \
 100:..\FreeRTOS\Source/stream_buffer.c ****             ( void ) xTaskNotify( ( pxStreamBuffer )->xTaskWaitingToReceive, \
 101:..\FreeRTOS\Source/stream_buffer.c ****                                   ( uint32_t ) 0,                            \
 102:..\FreeRTOS\Source/stream_buffer.c ****                                   eNoAction );                               \
 103:..\FreeRTOS\Source/stream_buffer.c ****             ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;                \
 104:..\FreeRTOS\Source/stream_buffer.c ****         }                                                                    \
 105:..\FreeRTOS\Source/stream_buffer.c ****     }                                                                        \
 106:..\FreeRTOS\Source/stream_buffer.c ****     ( void ) xTaskResumeAll();
 107:..\FreeRTOS\Source/stream_buffer.c **** #endif /* sbSEND_COMPLETED */
 108:..\FreeRTOS\Source/stream_buffer.c **** 
 109:..\FreeRTOS\Source/stream_buffer.c **** #ifndef sbSEND_COMPLETE_FROM_ISR
 110:..\FreeRTOS\Source/stream_buffer.c ****     #define sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken )       \
 111:..\FreeRTOS\Source/stream_buffer.c ****     {                                                                                   \
 112:..\FreeRTOS\Source/stream_buffer.c ****         UBaseType_t uxSavedInterruptStatus;                                             \
 113:..\FreeRTOS\Source/stream_buffer.c ****                                                                                         \
 114:..\FreeRTOS\Source/stream_buffer.c ****         uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();     \
 115:..\FreeRTOS\Source/stream_buffer.c ****         {                                                                               \
 116:..\FreeRTOS\Source/stream_buffer.c ****             if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )                     \
 117:..\FreeRTOS\Source/stream_buffer.c ****             {                                                                           \
 118:..\FreeRTOS\Source/stream_buffer.c ****                 ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive, \
 119:..\FreeRTOS\Source/stream_buffer.c ****                                              ( uint32_t ) 0,                            \
 120:..\FreeRTOS\Source/stream_buffer.c ****                                              eNoAction,                                 \
 121:..\FreeRTOS\Source/stream_buffer.c ****                                              pxHigherPriorityTaskWoken );               \
 122:..\FreeRTOS\Source/stream_buffer.c ****                 ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;                       \
 123:..\FreeRTOS\Source/stream_buffer.c ****             }                                                                           \
 124:..\FreeRTOS\Source/stream_buffer.c ****         }                                                                               \
 125:..\FreeRTOS\Source/stream_buffer.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );                    \
 126:..\FreeRTOS\Source/stream_buffer.c ****     }
 127:..\FreeRTOS\Source/stream_buffer.c **** #endif /* sbSEND_COMPLETE_FROM_ISR */
 128:..\FreeRTOS\Source/stream_buffer.c **** /*lint -restore (9026) */
 129:..\FreeRTOS\Source/stream_buffer.c **** 
 130:..\FreeRTOS\Source/stream_buffer.c **** /* The number of bytes used to hold the length of a message in the buffer. */
 131:..\FreeRTOS\Source/stream_buffer.c **** #define sbBYTES_TO_STORE_MESSAGE_LENGTH    ( sizeof( configMESSAGE_BUFFER_LENGTH_TYPE ) )
 132:..\FreeRTOS\Source/stream_buffer.c **** 
 133:..\FreeRTOS\Source/stream_buffer.c **** /* Bits stored in the ucFlags field of the stream buffer. */
 134:..\FreeRTOS\Source/stream_buffer.c **** #define sbFLAGS_IS_MESSAGE_BUFFER          ( ( uint8_t ) 1 ) /* Set if the stream buffer was create
 135:..\FreeRTOS\Source/stream_buffer.c **** #define sbFLAGS_IS_STATICALLY_ALLOCATED    ( ( uint8_t ) 2 ) /* Set if the stream buffer was create
 136:..\FreeRTOS\Source/stream_buffer.c **** 
 137:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 138:..\FreeRTOS\Source/stream_buffer.c **** 
 139:..\FreeRTOS\Source/stream_buffer.c **** /* Structure that hold state information on the buffer. */
 140:..\FreeRTOS\Source/stream_buffer.c **** typedef struct StreamBufferDef_t                 /*lint !e9058 Style convention uses tag. */
 141:..\FreeRTOS\Source/stream_buffer.c **** {
 142:..\FreeRTOS\Source/stream_buffer.c ****     volatile size_t xTail;                       /* Index to the next item to read within the buffe
 143:..\FreeRTOS\Source/stream_buffer.c ****     volatile size_t xHead;                       /* Index to the next item to write within the buff
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 4


 144:..\FreeRTOS\Source/stream_buffer.c ****     size_t xLength;                              /* The length of the buffer pointed to by pucBuffe
 145:..\FreeRTOS\Source/stream_buffer.c ****     size_t xTriggerLevelBytes;                   /* The number of bytes that must be in the stream 
 146:..\FreeRTOS\Source/stream_buffer.c ****     volatile TaskHandle_t xTaskWaitingToReceive; /* Holds the handle of a task waiting for data, or
 147:..\FreeRTOS\Source/stream_buffer.c ****     volatile TaskHandle_t xTaskWaitingToSend;    /* Holds the handle of a task waiting to send data
 148:..\FreeRTOS\Source/stream_buffer.c ****     uint8_t * pucBuffer;                         /* Points to the buffer itself - that is - the RAM
 149:..\FreeRTOS\Source/stream_buffer.c ****     uint8_t ucFlags;
 150:..\FreeRTOS\Source/stream_buffer.c **** 
 151:..\FreeRTOS\Source/stream_buffer.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 152:..\FreeRTOS\Source/stream_buffer.c ****         UBaseType_t uxStreamBufferNumber; /* Used for tracing purposes. */
 153:..\FreeRTOS\Source/stream_buffer.c ****     #endif
 154:..\FreeRTOS\Source/stream_buffer.c **** } StreamBuffer_t;
 155:..\FreeRTOS\Source/stream_buffer.c **** 
 156:..\FreeRTOS\Source/stream_buffer.c **** /*
 157:..\FreeRTOS\Source/stream_buffer.c ****  * The number of bytes available to be read from the buffer.
 158:..\FreeRTOS\Source/stream_buffer.c ****  */
 159:..\FreeRTOS\Source/stream_buffer.c **** static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer ) PRIVILEGED_FUNCTION;
 160:..\FreeRTOS\Source/stream_buffer.c **** 
 161:..\FreeRTOS\Source/stream_buffer.c **** /*
 162:..\FreeRTOS\Source/stream_buffer.c ****  * Add xCount bytes from pucData into the pxStreamBuffer message buffer.
 163:..\FreeRTOS\Source/stream_buffer.c ****  * Returns the number of bytes written, which will either equal xCount in the
 164:..\FreeRTOS\Source/stream_buffer.c ****  * success case, or 0 if there was not enough space in the buffer (in which case
 165:..\FreeRTOS\Source/stream_buffer.c ****  * no data is written into the buffer).
 166:..\FreeRTOS\Source/stream_buffer.c ****  */
 167:..\FreeRTOS\Source/stream_buffer.c **** static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
 168:..\FreeRTOS\Source/stream_buffer.c ****                                      const uint8_t * pucData,
 169:..\FreeRTOS\Source/stream_buffer.c ****                                      size_t xCount ) PRIVILEGED_FUNCTION;
 170:..\FreeRTOS\Source/stream_buffer.c **** 
 171:..\FreeRTOS\Source/stream_buffer.c **** /*
 172:..\FreeRTOS\Source/stream_buffer.c ****  * If the stream buffer is being used as a message buffer, then reads an entire
 173:..\FreeRTOS\Source/stream_buffer.c ****  * message out of the buffer.  If the stream buffer is being used as a stream
 174:..\FreeRTOS\Source/stream_buffer.c ****  * buffer then read as many bytes as possible from the buffer.
 175:..\FreeRTOS\Source/stream_buffer.c ****  * prvReadBytesFromBuffer() is called to actually extract the bytes from the
 176:..\FreeRTOS\Source/stream_buffer.c ****  * buffer's data storage area.
 177:..\FreeRTOS\Source/stream_buffer.c ****  */
 178:..\FreeRTOS\Source/stream_buffer.c **** static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
 179:..\FreeRTOS\Source/stream_buffer.c ****                                         void * pvRxData,
 180:..\FreeRTOS\Source/stream_buffer.c ****                                         size_t xBufferLengthBytes,
 181:..\FreeRTOS\Source/stream_buffer.c ****                                         size_t xBytesAvailable,
 182:..\FreeRTOS\Source/stream_buffer.c ****                                         size_t xBytesToStoreMessageLength ) PRIVILEGED_FUNCTION;
 183:..\FreeRTOS\Source/stream_buffer.c **** 
 184:..\FreeRTOS\Source/stream_buffer.c **** /*
 185:..\FreeRTOS\Source/stream_buffer.c ****  * If the stream buffer is being used as a message buffer, then writes an entire
 186:..\FreeRTOS\Source/stream_buffer.c ****  * message to the buffer.  If the stream buffer is being used as a stream
 187:..\FreeRTOS\Source/stream_buffer.c ****  * buffer then write as many bytes as possible to the buffer.
 188:..\FreeRTOS\Source/stream_buffer.c ****  * prvWriteBytestoBuffer() is called to actually send the bytes to the buffer's
 189:..\FreeRTOS\Source/stream_buffer.c ****  * data storage area.
 190:..\FreeRTOS\Source/stream_buffer.c ****  */
 191:..\FreeRTOS\Source/stream_buffer.c **** static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
 192:..\FreeRTOS\Source/stream_buffer.c ****                                        const void * pvTxData,
 193:..\FreeRTOS\Source/stream_buffer.c ****                                        size_t xDataLengthBytes,
 194:..\FreeRTOS\Source/stream_buffer.c ****                                        size_t xSpace,
 195:..\FreeRTOS\Source/stream_buffer.c ****                                        size_t xRequiredSpace ) PRIVILEGED_FUNCTION;
 196:..\FreeRTOS\Source/stream_buffer.c **** 
 197:..\FreeRTOS\Source/stream_buffer.c **** /*
 198:..\FreeRTOS\Source/stream_buffer.c ****  * Read xMaxCount bytes from the pxStreamBuffer message buffer and write them
 199:..\FreeRTOS\Source/stream_buffer.c ****  * to pucData.
 200:..\FreeRTOS\Source/stream_buffer.c ****  */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 5


 201:..\FreeRTOS\Source/stream_buffer.c **** static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
 202:..\FreeRTOS\Source/stream_buffer.c ****                                       uint8_t * pucData,
 203:..\FreeRTOS\Source/stream_buffer.c ****                                       size_t xMaxCount,
 204:..\FreeRTOS\Source/stream_buffer.c ****                                       size_t xBytesAvailable ) PRIVILEGED_FUNCTION;
 205:..\FreeRTOS\Source/stream_buffer.c **** 
 206:..\FreeRTOS\Source/stream_buffer.c **** /*
 207:..\FreeRTOS\Source/stream_buffer.c ****  * Called by both pxStreamBufferCreate() and pxStreamBufferCreateStatic() to
 208:..\FreeRTOS\Source/stream_buffer.c ****  * initialise the members of the newly created stream buffer structure.
 209:..\FreeRTOS\Source/stream_buffer.c ****  */
 210:..\FreeRTOS\Source/stream_buffer.c **** static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
 211:..\FreeRTOS\Source/stream_buffer.c ****                                           uint8_t * const pucBuffer,
 212:..\FreeRTOS\Source/stream_buffer.c ****                                           size_t xBufferSizeBytes,
 213:..\FreeRTOS\Source/stream_buffer.c ****                                           size_t xTriggerLevelBytes,
 214:..\FreeRTOS\Source/stream_buffer.c ****                                           uint8_t ucFlags ) PRIVILEGED_FUNCTION;
 215:..\FreeRTOS\Source/stream_buffer.c **** 
 216:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 217:..\FreeRTOS\Source/stream_buffer.c **** 
 218:..\FreeRTOS\Source/stream_buffer.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 219:..\FreeRTOS\Source/stream_buffer.c **** 
 220:..\FreeRTOS\Source/stream_buffer.c ****     StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
 221:..\FreeRTOS\Source/stream_buffer.c ****                                                      size_t xTriggerLevelBytes,
 222:..\FreeRTOS\Source/stream_buffer.c ****                                                      BaseType_t xIsMessageBuffer )
 223:..\FreeRTOS\Source/stream_buffer.c ****     {
  29              		.loc 1 223 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 24
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 90B5     		push	{r4, r7, lr}
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              		.cfi_def_cfa_offset 48
  40 0004 02AF     		add	r7, sp, #8
  41              		.cfi_def_cfa 7, 40
  42 0006 F860     		str	r0, [r7, #12]
  43 0008 B960     		str	r1, [r7, #8]
  44 000a 7A60     		str	r2, [r7, #4]
 224:..\FreeRTOS\Source/stream_buffer.c ****         uint8_t * pucAllocatedMemory;
 225:..\FreeRTOS\Source/stream_buffer.c ****         uint8_t ucFlags;
 226:..\FreeRTOS\Source/stream_buffer.c **** 
 227:..\FreeRTOS\Source/stream_buffer.c ****         /* In case the stream buffer is going to be used as a message buffer
 228:..\FreeRTOS\Source/stream_buffer.c ****          * (that is, it will hold discrete messages with a little meta data that
 229:..\FreeRTOS\Source/stream_buffer.c ****          * says how big the next message is) check the buffer will be large enough
 230:..\FreeRTOS\Source/stream_buffer.c ****          * to hold at least one message. */
 231:..\FreeRTOS\Source/stream_buffer.c ****         if( xIsMessageBuffer == pdTRUE )
  45              		.loc 1 231 0
  46 000c 7B68     		ldr	r3, [r7, #4]
  47 000e 012B     		cmp	r3, #1
  48 0010 09D1     		bne	.L2
 232:..\FreeRTOS\Source/stream_buffer.c ****         {
 233:..\FreeRTOS\Source/stream_buffer.c ****             /* Is a message buffer but not statically allocated. */
 234:..\FreeRTOS\Source/stream_buffer.c ****             ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
  49              		.loc 1 234 0
  50 0012 1323     		movs	r3, #19
  51 0014 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 6


  52 0016 0122     		movs	r2, #1
  53 0018 1A70     		strb	r2, [r3]
 235:..\FreeRTOS\Source/stream_buffer.c ****             configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
  54              		.loc 1 235 0
  55 001a 214B     		ldr	r3, .L13
  56 001c 1B88     		ldrh	r3, [r3]
  57 001e 002B     		cmp	r3, #0
  58 0020 0BD1     		bne	.L3
  59              		.loc 1 235 0 is_stmt 0 discriminator 1
  60              		.syntax divided
  61              	@ 235 "..\FreeRTOS\Source\stream_buffer.c" 1
  62 0022 72B6     		 cpsid i 
  63              	@ 0 "" 2
  64              		.thumb
  65              		.syntax unified
  66              	.L4:
  67 0024 FEE7     		b	.L4
  68              	.L2:
 236:..\FreeRTOS\Source/stream_buffer.c ****         }
 237:..\FreeRTOS\Source/stream_buffer.c ****         else
 238:..\FreeRTOS\Source/stream_buffer.c ****         {
 239:..\FreeRTOS\Source/stream_buffer.c ****             /* Not a message buffer and not statically allocated. */
 240:..\FreeRTOS\Source/stream_buffer.c ****             ucFlags = 0;
  69              		.loc 1 240 0 is_stmt 1
  70 0026 1323     		movs	r3, #19
  71 0028 FB18     		adds	r3, r7, r3
  72 002a 0022     		movs	r2, #0
  73 002c 1A70     		strb	r2, [r3]
 241:..\FreeRTOS\Source/stream_buffer.c ****             configASSERT( xBufferSizeBytes > 0 );
  74              		.loc 1 241 0
  75 002e 1C4B     		ldr	r3, .L13
  76 0030 1B88     		ldrh	r3, [r3]
  77 0032 002B     		cmp	r3, #0
  78 0034 01D1     		bne	.L3
  79              		.loc 1 241 0 is_stmt 0 discriminator 1
  80              		.syntax divided
  81              	@ 241 "..\FreeRTOS\Source\stream_buffer.c" 1
  82 0036 72B6     		 cpsid i 
  83              	@ 0 "" 2
  84              		.thumb
  85              		.syntax unified
  86              	.L5:
  87              		.loc 1 241 0 discriminator 2
  88 0038 FEE7     		b	.L5
  89              	.L3:
 242:..\FreeRTOS\Source/stream_buffer.c ****         }
 243:..\FreeRTOS\Source/stream_buffer.c **** 
 244:..\FreeRTOS\Source/stream_buffer.c ****         configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
  90              		.loc 1 244 0 is_stmt 1
  91 003a 194B     		ldr	r3, .L13
  92 003c 1B88     		ldrh	r3, [r3]
  93 003e 002B     		cmp	r3, #0
  94 0040 01D1     		bne	.L6
  95              		.loc 1 244 0 is_stmt 0 discriminator 1
  96              		.syntax divided
  97              	@ 244 "..\FreeRTOS\Source\stream_buffer.c" 1
  98 0042 72B6     		 cpsid i 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 7


  99              	@ 0 "" 2
 100              		.thumb
 101              		.syntax unified
 102              	.L7:
 103              		.loc 1 244 0 discriminator 3
 104 0044 FEE7     		b	.L7
 105              	.L6:
 245:..\FreeRTOS\Source/stream_buffer.c **** 
 246:..\FreeRTOS\Source/stream_buffer.c ****         /* A trigger level of 0 would cause a waiting task to unblock even when
 247:..\FreeRTOS\Source/stream_buffer.c ****          * the buffer was empty. */
 248:..\FreeRTOS\Source/stream_buffer.c ****         if( xTriggerLevelBytes == ( size_t ) 0 )
 106              		.loc 1 248 0 is_stmt 1
 107 0046 BB68     		ldr	r3, [r7, #8]
 108 0048 002B     		cmp	r3, #0
 109 004a 01D1     		bne	.L8
 249:..\FreeRTOS\Source/stream_buffer.c ****         {
 250:..\FreeRTOS\Source/stream_buffer.c ****             xTriggerLevelBytes = ( size_t ) 1;
 110              		.loc 1 250 0
 111 004c 0123     		movs	r3, #1
 112 004e BB60     		str	r3, [r7, #8]
 113              	.L8:
 251:..\FreeRTOS\Source/stream_buffer.c ****         }
 252:..\FreeRTOS\Source/stream_buffer.c **** 
 253:..\FreeRTOS\Source/stream_buffer.c ****         /* A stream buffer requires a StreamBuffer_t structure and a buffer.
 254:..\FreeRTOS\Source/stream_buffer.c ****          * Both are allocated in a single call to pvPortMalloc().  The
 255:..\FreeRTOS\Source/stream_buffer.c ****          * StreamBuffer_t structure is placed at the start of the allocated memory
 256:..\FreeRTOS\Source/stream_buffer.c ****          * and the buffer follows immediately after.  The requested size is
 257:..\FreeRTOS\Source/stream_buffer.c ****          * incremented so the free space is returned as the user would expect -
 258:..\FreeRTOS\Source/stream_buffer.c ****          * this is a quirk of the implementation that means otherwise the free
 259:..\FreeRTOS\Source/stream_buffer.c ****          * space would be reported as one byte smaller than would be logically
 260:..\FreeRTOS\Source/stream_buffer.c ****          * expected. */
 261:..\FreeRTOS\Source/stream_buffer.c ****         if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 114              		.loc 1 261 0
 115 0050 FB68     		ldr	r3, [r7, #12]
 116 0052 2133     		adds	r3, r3, #33
 117 0054 1A00     		movs	r2, r3
 118 0056 FB68     		ldr	r3, [r7, #12]
 119 0058 9A42     		cmp	r2, r3
 120 005a 0AD9     		bls	.L9
 262:..\FreeRTOS\Source/stream_buffer.c ****         {
 263:..\FreeRTOS\Source/stream_buffer.c ****             xBufferSizeBytes++;
 121              		.loc 1 263 0
 122 005c FB68     		ldr	r3, [r7, #12]
 123 005e 0133     		adds	r3, r3, #1
 124 0060 FB60     		str	r3, [r7, #12]
 264:..\FreeRTOS\Source/stream_buffer.c ****             pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffe
 125              		.loc 1 264 0
 126 0062 FB68     		ldr	r3, [r7, #12]
 127 0064 2033     		adds	r3, r3, #32
 128 0066 1800     		movs	r0, r3
 129 0068 FFF7FEFF 		bl	pvPortMalloc
 130 006c 0300     		movs	r3, r0
 131 006e 7B61     		str	r3, [r7, #20]
 132 0070 01E0     		b	.L10
 133              	.L9:
 265:..\FreeRTOS\Source/stream_buffer.c ****         }
 266:..\FreeRTOS\Source/stream_buffer.c ****         else
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 8


 267:..\FreeRTOS\Source/stream_buffer.c ****         {
 268:..\FreeRTOS\Source/stream_buffer.c ****             pucAllocatedMemory = NULL;
 134              		.loc 1 268 0
 135 0072 0023     		movs	r3, #0
 136 0074 7B61     		str	r3, [r7, #20]
 137              	.L10:
 269:..\FreeRTOS\Source/stream_buffer.c ****         }
 270:..\FreeRTOS\Source/stream_buffer.c ****         
 271:..\FreeRTOS\Source/stream_buffer.c **** 
 272:..\FreeRTOS\Source/stream_buffer.c ****         if( pucAllocatedMemory != NULL )
 138              		.loc 1 272 0
 139 0076 7B69     		ldr	r3, [r7, #20]
 140 0078 002B     		cmp	r3, #0
 141 007a 0CD0     		beq	.L11
 273:..\FreeRTOS\Source/stream_buffer.c ****         {
 274:..\FreeRTOS\Source/stream_buffer.c ****             prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structu
 142              		.loc 1 274 0
 143 007c 7B69     		ldr	r3, [r7, #20]
 144 007e 2033     		adds	r3, r3, #32
 145 0080 1900     		movs	r1, r3
 146 0082 BC68     		ldr	r4, [r7, #8]
 147 0084 FA68     		ldr	r2, [r7, #12]
 148 0086 7869     		ldr	r0, [r7, #20]
 149 0088 1323     		movs	r3, #19
 150 008a FB18     		adds	r3, r7, r3
 151 008c 1B78     		ldrb	r3, [r3]
 152 008e 0093     		str	r3, [sp]
 153 0090 2300     		movs	r3, r4
 154 0092 FFF7FEFF 		bl	prvInitialiseNewStreamBuffer
 155              	.L11:
 275:..\FreeRTOS\Source/stream_buffer.c ****                                           pucAllocatedMemory + sizeof( StreamBuffer_t ), /* Storage
 276:..\FreeRTOS\Source/stream_buffer.c ****                                           xBufferSizeBytes,
 277:..\FreeRTOS\Source/stream_buffer.c ****                                           xTriggerLevelBytes,
 278:..\FreeRTOS\Source/stream_buffer.c ****                                           ucFlags );
 279:..\FreeRTOS\Source/stream_buffer.c **** 
 280:..\FreeRTOS\Source/stream_buffer.c ****             traceSTREAM_BUFFER_CREATE( ( ( StreamBuffer_t * ) pucAllocatedMemory ), xIsMessageBuffe
 281:..\FreeRTOS\Source/stream_buffer.c ****         }
 282:..\FreeRTOS\Source/stream_buffer.c ****         else
 283:..\FreeRTOS\Source/stream_buffer.c ****         {
 284:..\FreeRTOS\Source/stream_buffer.c ****             traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
 285:..\FreeRTOS\Source/stream_buffer.c ****         }
 286:..\FreeRTOS\Source/stream_buffer.c **** 
 287:..\FreeRTOS\Source/stream_buffer.c ****         return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as alloca
 156              		.loc 1 287 0
 157 0096 7B69     		ldr	r3, [r7, #20]
 288:..\FreeRTOS\Source/stream_buffer.c ****     }
 158              		.loc 1 288 0
 159 0098 1800     		movs	r0, r3
 160 009a BD46     		mov	sp, r7
 161 009c 07B0     		add	sp, sp, #28
 162              		@ sp needed
 163 009e 90BD     		pop	{r4, r7, pc}
 164              	.L14:
 165              		.align	2
 166              	.L13:
 167 00a0 00000000 		.word	x
 168              		.cfi_endproc
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 9


 169              	.LFE0:
 170              		.size	xStreamBufferGenericCreate, .-xStreamBufferGenericCreate
 171              		.section	.text.xStreamBufferGenericCreateStatic,"ax",%progbits
 172              		.align	2
 173              		.global	xStreamBufferGenericCreateStatic
 174              		.code	16
 175              		.thumb_func
 176              		.type	xStreamBufferGenericCreateStatic, %function
 177              	xStreamBufferGenericCreateStatic:
 178              	.LFB1:
 289:..\FreeRTOS\Source/stream_buffer.c **** 
 290:..\FreeRTOS\Source/stream_buffer.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 291:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 292:..\FreeRTOS\Source/stream_buffer.c **** 
 293:..\FreeRTOS\Source/stream_buffer.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 294:..\FreeRTOS\Source/stream_buffer.c **** 
 295:..\FreeRTOS\Source/stream_buffer.c ****     StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
 296:..\FreeRTOS\Source/stream_buffer.c ****                                                            size_t xTriggerLevelBytes,
 297:..\FreeRTOS\Source/stream_buffer.c ****                                                            BaseType_t xIsMessageBuffer,
 298:..\FreeRTOS\Source/stream_buffer.c ****                                                            uint8_t * const pucStreamBufferStorageAr
 299:..\FreeRTOS\Source/stream_buffer.c ****                                                            StaticStreamBuffer_t * const pxStaticStr
 300:..\FreeRTOS\Source/stream_buffer.c ****     {
 179              		.loc 1 300 0
 180              		.cfi_startproc
 181              		@ args = 4, pretend = 0, frame = 32
 182              		@ frame_needed = 1, uses_anonymous_args = 0
 183 0000 90B5     		push	{r4, r7, lr}
 184              		.cfi_def_cfa_offset 12
 185              		.cfi_offset 4, -12
 186              		.cfi_offset 7, -8
 187              		.cfi_offset 14, -4
 188 0002 8BB0     		sub	sp, sp, #44
 189              		.cfi_def_cfa_offset 56
 190 0004 02AF     		add	r7, sp, #8
 191              		.cfi_def_cfa 7, 48
 192 0006 F860     		str	r0, [r7, #12]
 193 0008 B960     		str	r1, [r7, #8]
 194 000a 7A60     		str	r2, [r7, #4]
 195 000c 3B60     		str	r3, [r7]
 301:..\FreeRTOS\Source/stream_buffer.c ****         StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !
 196              		.loc 1 301 0
 197 000e 3B6B     		ldr	r3, [r7, #48]
 198 0010 7B61     		str	r3, [r7, #20]
 302:..\FreeRTOS\Source/stream_buffer.c ****         StreamBufferHandle_t xReturn;
 303:..\FreeRTOS\Source/stream_buffer.c ****         uint8_t ucFlags;
 304:..\FreeRTOS\Source/stream_buffer.c **** 
 305:..\FreeRTOS\Source/stream_buffer.c ****         configASSERT( pucStreamBufferStorageArea );
 199              		.loc 1 305 0
 200 0012 2A4B     		ldr	r3, .L32
 201 0014 1B88     		ldrh	r3, [r3]
 202 0016 002B     		cmp	r3, #0
 203 0018 01D1     		bne	.L16
 204              		.loc 1 305 0 is_stmt 0 discriminator 1
 205              		.syntax divided
 206              	@ 305 "..\FreeRTOS\Source\stream_buffer.c" 1
 207 001a 72B6     		 cpsid i 
 208              	@ 0 "" 2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 10


 209              		.thumb
 210              		.syntax unified
 211              	.L17:
 212 001c FEE7     		b	.L17
 213              	.L16:
 306:..\FreeRTOS\Source/stream_buffer.c ****         configASSERT( pxStaticStreamBuffer );
 214              		.loc 1 306 0 is_stmt 1
 215 001e 274B     		ldr	r3, .L32
 216 0020 1B88     		ldrh	r3, [r3]
 217 0022 002B     		cmp	r3, #0
 218 0024 01D1     		bne	.L18
 219              		.loc 1 306 0 is_stmt 0 discriminator 1
 220              		.syntax divided
 221              	@ 306 "..\FreeRTOS\Source\stream_buffer.c" 1
 222 0026 72B6     		 cpsid i 
 223              	@ 0 "" 2
 224              		.thumb
 225              		.syntax unified
 226              	.L19:
 227              		.loc 1 306 0 discriminator 2
 228 0028 FEE7     		b	.L19
 229              	.L18:
 307:..\FreeRTOS\Source/stream_buffer.c ****         configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 230              		.loc 1 307 0 is_stmt 1
 231 002a 244B     		ldr	r3, .L32
 232 002c 1B88     		ldrh	r3, [r3]
 233 002e 002B     		cmp	r3, #0
 234 0030 01D1     		bne	.L20
 235              		.loc 1 307 0 is_stmt 0 discriminator 1
 236              		.syntax divided
 237              	@ 307 "..\FreeRTOS\Source\stream_buffer.c" 1
 238 0032 72B6     		 cpsid i 
 239              	@ 0 "" 2
 240              		.thumb
 241              		.syntax unified
 242              	.L21:
 243              		.loc 1 307 0 discriminator 3
 244 0034 FEE7     		b	.L21
 245              	.L20:
 308:..\FreeRTOS\Source/stream_buffer.c **** 
 309:..\FreeRTOS\Source/stream_buffer.c ****         /* A trigger level of 0 would cause a waiting task to unblock even when
 310:..\FreeRTOS\Source/stream_buffer.c ****          * the buffer was empty. */
 311:..\FreeRTOS\Source/stream_buffer.c ****         if( xTriggerLevelBytes == ( size_t ) 0 )
 246              		.loc 1 311 0 is_stmt 1
 247 0036 BB68     		ldr	r3, [r7, #8]
 248 0038 002B     		cmp	r3, #0
 249 003a 01D1     		bne	.L22
 312:..\FreeRTOS\Source/stream_buffer.c ****         {
 313:..\FreeRTOS\Source/stream_buffer.c ****             xTriggerLevelBytes = ( size_t ) 1;
 250              		.loc 1 313 0
 251 003c 0123     		movs	r3, #1
 252 003e BB60     		str	r3, [r7, #8]
 253              	.L22:
 314:..\FreeRTOS\Source/stream_buffer.c ****         }
 315:..\FreeRTOS\Source/stream_buffer.c **** 
 316:..\FreeRTOS\Source/stream_buffer.c ****         if( xIsMessageBuffer != pdFALSE )
 254              		.loc 1 316 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 11


 255 0040 7B68     		ldr	r3, [r7, #4]
 256 0042 002B     		cmp	r3, #0
 257 0044 04D0     		beq	.L23
 317:..\FreeRTOS\Source/stream_buffer.c ****         {
 318:..\FreeRTOS\Source/stream_buffer.c ****             /* Statically allocated message buffer. */
 319:..\FreeRTOS\Source/stream_buffer.c ****             ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 258              		.loc 1 319 0
 259 0046 1B23     		movs	r3, #27
 260 0048 FB18     		adds	r3, r7, r3
 261 004a 0322     		movs	r2, #3
 262 004c 1A70     		strb	r2, [r3]
 263 004e 03E0     		b	.L24
 264              	.L23:
 320:..\FreeRTOS\Source/stream_buffer.c ****         }
 321:..\FreeRTOS\Source/stream_buffer.c ****         else
 322:..\FreeRTOS\Source/stream_buffer.c ****         {
 323:..\FreeRTOS\Source/stream_buffer.c ****             /* Statically allocated stream buffer. */
 324:..\FreeRTOS\Source/stream_buffer.c ****             ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 265              		.loc 1 324 0
 266 0050 1B23     		movs	r3, #27
 267 0052 FB18     		adds	r3, r7, r3
 268 0054 0222     		movs	r2, #2
 269 0056 1A70     		strb	r2, [r3]
 270              	.L24:
 325:..\FreeRTOS\Source/stream_buffer.c ****         }
 326:..\FreeRTOS\Source/stream_buffer.c **** 
 327:..\FreeRTOS\Source/stream_buffer.c ****         /* In case the stream buffer is going to be used as a message buffer
 328:..\FreeRTOS\Source/stream_buffer.c ****          * (that is, it will hold discrete messages with a little meta data that
 329:..\FreeRTOS\Source/stream_buffer.c ****          * says how big the next message is) check the buffer will be large enough
 330:..\FreeRTOS\Source/stream_buffer.c ****          * to hold at least one message. */
 331:..\FreeRTOS\Source/stream_buffer.c ****         configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 271              		.loc 1 331 0
 272 0058 184B     		ldr	r3, .L32
 273 005a 1B88     		ldrh	r3, [r3]
 274 005c 002B     		cmp	r3, #0
 275 005e 01D1     		bne	.L25
 276              		.loc 1 331 0 is_stmt 0 discriminator 1
 277              		.syntax divided
 278              	@ 331 "..\FreeRTOS\Source\stream_buffer.c" 1
 279 0060 72B6     		 cpsid i 
 280              	@ 0 "" 2
 281              		.thumb
 282              		.syntax unified
 283              	.L26:
 284              		.loc 1 331 0 discriminator 4
 285 0062 FEE7     		b	.L26
 286              	.L25:
 287              	.LBB2:
 332:..\FreeRTOS\Source/stream_buffer.c **** 
 333:..\FreeRTOS\Source/stream_buffer.c ****         #if ( configASSERT_DEFINED == 1 )
 334:..\FreeRTOS\Source/stream_buffer.c ****             {
 335:..\FreeRTOS\Source/stream_buffer.c ****                 /* Sanity check that the size of the structure used to declare a
 336:..\FreeRTOS\Source/stream_buffer.c ****                  * variable of type StaticStreamBuffer_t equals the size of the real
 337:..\FreeRTOS\Source/stream_buffer.c ****                  * message buffer structure. */
 338:..\FreeRTOS\Source/stream_buffer.c ****                 volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 288              		.loc 1 338 0 is_stmt 1
 289 0064 2023     		movs	r3, #32
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 12


 290 0066 3B61     		str	r3, [r7, #16]
 339:..\FreeRTOS\Source/stream_buffer.c ****                 configASSERT( xSize == sizeof( StreamBuffer_t ) );
 291              		.loc 1 339 0
 292 0068 144B     		ldr	r3, .L32
 293 006a 1B88     		ldrh	r3, [r3]
 294 006c 002B     		cmp	r3, #0
 295 006e 01D1     		bne	.L27
 296              		.loc 1 339 0 is_stmt 0 discriminator 1
 297              		.syntax divided
 298              	@ 339 "..\FreeRTOS\Source\stream_buffer.c" 1
 299 0070 72B6     		 cpsid i 
 300              	@ 0 "" 2
 301              		.thumb
 302              		.syntax unified
 303              	.L28:
 304              		.loc 1 339 0 discriminator 5
 305 0072 FEE7     		b	.L28
 306              	.L27:
 307              		.loc 1 339 0 discriminator 2
 308 0074 3B69     		ldr	r3, [r7, #16]
 309              	.LBE2:
 340:..\FreeRTOS\Source/stream_buffer.c ****             } /*lint !e529 xSize is referenced is configASSERT() is defined. */
 341:..\FreeRTOS\Source/stream_buffer.c ****         #endif /* configASSERT_DEFINED */
 342:..\FreeRTOS\Source/stream_buffer.c **** 
 343:..\FreeRTOS\Source/stream_buffer.c ****         if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 310              		.loc 1 343 0 is_stmt 1 discriminator 2
 311 0076 3B68     		ldr	r3, [r7]
 312 0078 002B     		cmp	r3, #0
 313 007a 17D0     		beq	.L29
 314              		.loc 1 343 0 is_stmt 0 discriminator 1
 315 007c 3B6B     		ldr	r3, [r7, #48]
 316 007e 002B     		cmp	r3, #0
 317 0080 14D0     		beq	.L29
 344:..\FreeRTOS\Source/stream_buffer.c ****         {
 345:..\FreeRTOS\Source/stream_buffer.c ****             prvInitialiseNewStreamBuffer( pxStreamBuffer,
 318              		.loc 1 345 0 is_stmt 1
 319 0082 BC68     		ldr	r4, [r7, #8]
 320 0084 FA68     		ldr	r2, [r7, #12]
 321 0086 3968     		ldr	r1, [r7]
 322 0088 7869     		ldr	r0, [r7, #20]
 323 008a 1B23     		movs	r3, #27
 324 008c FB18     		adds	r3, r7, r3
 325 008e 1B78     		ldrb	r3, [r3]
 326 0090 0093     		str	r3, [sp]
 327 0092 2300     		movs	r3, r4
 328 0094 FFF7FEFF 		bl	prvInitialiseNewStreamBuffer
 346:..\FreeRTOS\Source/stream_buffer.c ****                                           pucStreamBufferStorageArea,
 347:..\FreeRTOS\Source/stream_buffer.c ****                                           xBufferSizeBytes,
 348:..\FreeRTOS\Source/stream_buffer.c ****                                           xTriggerLevelBytes,
 349:..\FreeRTOS\Source/stream_buffer.c ****                                           ucFlags );
 350:..\FreeRTOS\Source/stream_buffer.c **** 
 351:..\FreeRTOS\Source/stream_buffer.c ****             /* Remember this was statically allocated in case it is ever deleted
 352:..\FreeRTOS\Source/stream_buffer.c ****              * again. */
 353:..\FreeRTOS\Source/stream_buffer.c ****             pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 329              		.loc 1 353 0
 330 0098 7B69     		ldr	r3, [r7, #20]
 331 009a 1B7F     		ldrb	r3, [r3, #28]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 13


 332 009c 0222     		movs	r2, #2
 333 009e 1343     		orrs	r3, r2
 334 00a0 DAB2     		uxtb	r2, r3
 335 00a2 7B69     		ldr	r3, [r7, #20]
 336 00a4 1A77     		strb	r2, [r3, #28]
 354:..\FreeRTOS\Source/stream_buffer.c **** 
 355:..\FreeRTOS\Source/stream_buffer.c ****             traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );
 356:..\FreeRTOS\Source/stream_buffer.c **** 
 357:..\FreeRTOS\Source/stream_buffer.c ****             xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requ
 337              		.loc 1 357 0
 338 00a6 3B6B     		ldr	r3, [r7, #48]
 339 00a8 FB61     		str	r3, [r7, #28]
 340 00aa 01E0     		b	.L30
 341              	.L29:
 358:..\FreeRTOS\Source/stream_buffer.c ****         }
 359:..\FreeRTOS\Source/stream_buffer.c ****         else
 360:..\FreeRTOS\Source/stream_buffer.c ****         {
 361:..\FreeRTOS\Source/stream_buffer.c ****             xReturn = NULL;
 342              		.loc 1 361 0
 343 00ac 0023     		movs	r3, #0
 344 00ae FB61     		str	r3, [r7, #28]
 345              	.L30:
 362:..\FreeRTOS\Source/stream_buffer.c ****             traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
 363:..\FreeRTOS\Source/stream_buffer.c ****         }
 364:..\FreeRTOS\Source/stream_buffer.c **** 
 365:..\FreeRTOS\Source/stream_buffer.c ****         return xReturn;
 346              		.loc 1 365 0
 347 00b0 FB69     		ldr	r3, [r7, #28]
 366:..\FreeRTOS\Source/stream_buffer.c ****     }
 348              		.loc 1 366 0
 349 00b2 1800     		movs	r0, r3
 350 00b4 BD46     		mov	sp, r7
 351 00b6 09B0     		add	sp, sp, #36
 352              		@ sp needed
 353 00b8 90BD     		pop	{r4, r7, pc}
 354              	.L33:
 355 00ba C046     		.align	2
 356              	.L32:
 357 00bc 00000000 		.word	x
 358              		.cfi_endproc
 359              	.LFE1:
 360              		.size	xStreamBufferGenericCreateStatic, .-xStreamBufferGenericCreateStatic
 361              		.section	.text.vStreamBufferDelete,"ax",%progbits
 362              		.align	2
 363              		.global	vStreamBufferDelete
 364              		.code	16
 365              		.thumb_func
 366              		.type	vStreamBufferDelete, %function
 367              	vStreamBufferDelete:
 368              	.LFB2:
 367:..\FreeRTOS\Source/stream_buffer.c **** 
 368:..\FreeRTOS\Source/stream_buffer.c **** #endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 369:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 370:..\FreeRTOS\Source/stream_buffer.c **** 
 371:..\FreeRTOS\Source/stream_buffer.c **** void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
 372:..\FreeRTOS\Source/stream_buffer.c **** {
 369              		.loc 1 372 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 14


 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 16
 372              		@ frame_needed = 1, uses_anonymous_args = 0
 373 0000 80B5     		push	{r7, lr}
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 7, -8
 376              		.cfi_offset 14, -4
 377 0002 84B0     		sub	sp, sp, #16
 378              		.cfi_def_cfa_offset 24
 379 0004 00AF     		add	r7, sp, #0
 380              		.cfi_def_cfa_register 7
 381 0006 7860     		str	r0, [r7, #4]
 373:..\FreeRTOS\Source/stream_buffer.c ****     StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 382              		.loc 1 373 0
 383 0008 7B68     		ldr	r3, [r7, #4]
 384 000a FB60     		str	r3, [r7, #12]
 374:..\FreeRTOS\Source/stream_buffer.c **** 
 375:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 385              		.loc 1 375 0
 386 000c 0D4B     		ldr	r3, .L40
 387 000e 1B88     		ldrh	r3, [r3]
 388 0010 002B     		cmp	r3, #0
 389 0012 01D1     		bne	.L35
 390              		.loc 1 375 0 is_stmt 0 discriminator 1
 391              		.syntax divided
 392              	@ 375 "..\FreeRTOS\Source\stream_buffer.c" 1
 393 0014 72B6     		 cpsid i 
 394              	@ 0 "" 2
 395              		.thumb
 396              		.syntax unified
 397              	.L36:
 398 0016 FEE7     		b	.L36
 399              	.L35:
 376:..\FreeRTOS\Source/stream_buffer.c **** 
 377:..\FreeRTOS\Source/stream_buffer.c ****     traceSTREAM_BUFFER_DELETE( xStreamBuffer );
 378:..\FreeRTOS\Source/stream_buffer.c **** 
 379:..\FreeRTOS\Source/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 400              		.loc 1 379 0 is_stmt 1
 401 0018 FB68     		ldr	r3, [r7, #12]
 402 001a 1B7F     		ldrb	r3, [r3, #28]
 403 001c 1A00     		movs	r2, r3
 404 001e 0223     		movs	r3, #2
 405 0020 1340     		ands	r3, r2
 406 0022 04D1     		bne	.L37
 380:..\FreeRTOS\Source/stream_buffer.c ****     {
 381:..\FreeRTOS\Source/stream_buffer.c ****         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 382:..\FreeRTOS\Source/stream_buffer.c ****             {
 383:..\FreeRTOS\Source/stream_buffer.c ****                 /* Both the structure and the buffer were allocated using a single call
 384:..\FreeRTOS\Source/stream_buffer.c ****                 * to pvPortMalloc(), hence only one call to vPortFree() is required. */
 385:..\FreeRTOS\Source/stream_buffer.c ****                 vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics req
 407              		.loc 1 385 0
 408 0024 FB68     		ldr	r3, [r7, #12]
 409 0026 1800     		movs	r0, r3
 410 0028 FFF7FEFF 		bl	vPortFree
 386:..\FreeRTOS\Source/stream_buffer.c ****             }
 387:..\FreeRTOS\Source/stream_buffer.c ****         #else
 388:..\FreeRTOS\Source/stream_buffer.c ****             {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 15


 389:..\FreeRTOS\Source/stream_buffer.c ****                 /* Should not be possible to get here, ucFlags must be corrupt.
 390:..\FreeRTOS\Source/stream_buffer.c ****                  * Force an assert. */
 391:..\FreeRTOS\Source/stream_buffer.c ****                 configASSERT( xStreamBuffer == ( StreamBufferHandle_t ) ~0 );
 392:..\FreeRTOS\Source/stream_buffer.c ****             }
 393:..\FreeRTOS\Source/stream_buffer.c ****         #endif
 394:..\FreeRTOS\Source/stream_buffer.c ****     }
 395:..\FreeRTOS\Source/stream_buffer.c ****     else
 396:..\FreeRTOS\Source/stream_buffer.c ****     {
 397:..\FreeRTOS\Source/stream_buffer.c ****         /* The structure and buffer were not allocated dynamically and cannot be
 398:..\FreeRTOS\Source/stream_buffer.c ****          * freed - just scrub the structure so future use will assert. */
 399:..\FreeRTOS\Source/stream_buffer.c ****         ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 400:..\FreeRTOS\Source/stream_buffer.c ****     }
 401:..\FreeRTOS\Source/stream_buffer.c **** }
 411              		.loc 1 401 0
 412 002c 05E0     		b	.L39
 413              	.L37:
 399:..\FreeRTOS\Source/stream_buffer.c ****     }
 414              		.loc 1 399 0
 415 002e FB68     		ldr	r3, [r7, #12]
 416 0030 2022     		movs	r2, #32
 417 0032 0021     		movs	r1, #0
 418 0034 1800     		movs	r0, r3
 419 0036 FFF7FEFF 		bl	memset
 420              	.L39:
 421              		.loc 1 401 0
 422 003a C046     		nop
 423 003c BD46     		mov	sp, r7
 424 003e 04B0     		add	sp, sp, #16
 425              		@ sp needed
 426 0040 80BD     		pop	{r7, pc}
 427              	.L41:
 428 0042 C046     		.align	2
 429              	.L40:
 430 0044 00000000 		.word	x
 431              		.cfi_endproc
 432              	.LFE2:
 433              		.size	vStreamBufferDelete, .-vStreamBufferDelete
 434              		.section	.text.xStreamBufferReset,"ax",%progbits
 435              		.align	2
 436              		.global	xStreamBufferReset
 437              		.code	16
 438              		.thumb_func
 439              		.type	xStreamBufferReset, %function
 440              	xStreamBufferReset:
 441              	.LFB3:
 402:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 403:..\FreeRTOS\Source/stream_buffer.c **** 
 404:..\FreeRTOS\Source/stream_buffer.c **** BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
 405:..\FreeRTOS\Source/stream_buffer.c **** {
 442              		.loc 1 405 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 16
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446 0000 90B5     		push	{r4, r7, lr}
 447              		.cfi_def_cfa_offset 12
 448              		.cfi_offset 4, -12
 449              		.cfi_offset 7, -8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 16


 450              		.cfi_offset 14, -4
 451 0002 87B0     		sub	sp, sp, #28
 452              		.cfi_def_cfa_offset 40
 453 0004 02AF     		add	r7, sp, #8
 454              		.cfi_def_cfa 7, 32
 455 0006 7860     		str	r0, [r7, #4]
 406:..\FreeRTOS\Source/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 456              		.loc 1 406 0
 457 0008 7B68     		ldr	r3, [r7, #4]
 458 000a BB60     		str	r3, [r7, #8]
 407:..\FreeRTOS\Source/stream_buffer.c ****     BaseType_t xReturn = pdFAIL;
 459              		.loc 1 407 0
 460 000c 0023     		movs	r3, #0
 461 000e FB60     		str	r3, [r7, #12]
 408:..\FreeRTOS\Source/stream_buffer.c **** 
 409:..\FreeRTOS\Source/stream_buffer.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 410:..\FreeRTOS\Source/stream_buffer.c ****         UBaseType_t uxStreamBufferNumber;
 411:..\FreeRTOS\Source/stream_buffer.c ****     #endif
 412:..\FreeRTOS\Source/stream_buffer.c **** 
 413:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 462              		.loc 1 413 0
 463 0010 124B     		ldr	r3, .L47
 464 0012 1B88     		ldrh	r3, [r3]
 465 0014 002B     		cmp	r3, #0
 466 0016 01D1     		bne	.L43
 467              		.loc 1 413 0 is_stmt 0 discriminator 1
 468              		.syntax divided
 469              	@ 413 "..\FreeRTOS\Source\stream_buffer.c" 1
 470 0018 72B6     		 cpsid i 
 471              	@ 0 "" 2
 472              		.thumb
 473              		.syntax unified
 474              	.L44:
 475 001a FEE7     		b	.L44
 476              	.L43:
 414:..\FreeRTOS\Source/stream_buffer.c **** 
 415:..\FreeRTOS\Source/stream_buffer.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 416:..\FreeRTOS\Source/stream_buffer.c ****         {
 417:..\FreeRTOS\Source/stream_buffer.c ****             /* Store the stream buffer number so it can be restored after the
 418:..\FreeRTOS\Source/stream_buffer.c ****              * reset. */
 419:..\FreeRTOS\Source/stream_buffer.c ****             uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 420:..\FreeRTOS\Source/stream_buffer.c ****         }
 421:..\FreeRTOS\Source/stream_buffer.c ****     #endif
 422:..\FreeRTOS\Source/stream_buffer.c **** 
 423:..\FreeRTOS\Source/stream_buffer.c ****     /* Can only reset a message buffer if there are no tasks blocked on it. */
 424:..\FreeRTOS\Source/stream_buffer.c ****     taskENTER_CRITICAL();
 477              		.loc 1 424 0 is_stmt 1
 478 001c FFF7FEFF 		bl	vPortEnterCritical
 425:..\FreeRTOS\Source/stream_buffer.c ****     {
 426:..\FreeRTOS\Source/stream_buffer.c ****         if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 479              		.loc 1 426 0
 480 0020 BB68     		ldr	r3, [r7, #8]
 481 0022 1B69     		ldr	r3, [r3, #16]
 482 0024 002B     		cmp	r3, #0
 483 0026 12D1     		bne	.L45
 427:..\FreeRTOS\Source/stream_buffer.c ****         {
 428:..\FreeRTOS\Source/stream_buffer.c ****             if( pxStreamBuffer->xTaskWaitingToSend == NULL )
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 17


 484              		.loc 1 428 0
 485 0028 BB68     		ldr	r3, [r7, #8]
 486 002a 5B69     		ldr	r3, [r3, #20]
 487 002c 002B     		cmp	r3, #0
 488 002e 0ED1     		bne	.L45
 429:..\FreeRTOS\Source/stream_buffer.c ****             {
 430:..\FreeRTOS\Source/stream_buffer.c ****                 prvInitialiseNewStreamBuffer( pxStreamBuffer,
 489              		.loc 1 430 0
 490 0030 BB68     		ldr	r3, [r7, #8]
 491 0032 9969     		ldr	r1, [r3, #24]
 492 0034 BB68     		ldr	r3, [r7, #8]
 493 0036 9A68     		ldr	r2, [r3, #8]
 494 0038 BB68     		ldr	r3, [r7, #8]
 495 003a DC68     		ldr	r4, [r3, #12]
 496 003c BB68     		ldr	r3, [r7, #8]
 497 003e 1B7F     		ldrb	r3, [r3, #28]
 498 0040 B868     		ldr	r0, [r7, #8]
 499 0042 0093     		str	r3, [sp]
 500 0044 2300     		movs	r3, r4
 501 0046 FFF7FEFF 		bl	prvInitialiseNewStreamBuffer
 431:..\FreeRTOS\Source/stream_buffer.c ****                                               pxStreamBuffer->pucBuffer,
 432:..\FreeRTOS\Source/stream_buffer.c ****                                               pxStreamBuffer->xLength,
 433:..\FreeRTOS\Source/stream_buffer.c ****                                               pxStreamBuffer->xTriggerLevelBytes,
 434:..\FreeRTOS\Source/stream_buffer.c ****                                               pxStreamBuffer->ucFlags );
 435:..\FreeRTOS\Source/stream_buffer.c ****                 xReturn = pdPASS;
 502              		.loc 1 435 0
 503 004a 0123     		movs	r3, #1
 504 004c FB60     		str	r3, [r7, #12]
 505              	.L45:
 436:..\FreeRTOS\Source/stream_buffer.c **** 
 437:..\FreeRTOS\Source/stream_buffer.c ****                 #if ( configUSE_TRACE_FACILITY == 1 )
 438:..\FreeRTOS\Source/stream_buffer.c ****                     {
 439:..\FreeRTOS\Source/stream_buffer.c ****                         pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 440:..\FreeRTOS\Source/stream_buffer.c ****                     }
 441:..\FreeRTOS\Source/stream_buffer.c ****                 #endif
 442:..\FreeRTOS\Source/stream_buffer.c **** 
 443:..\FreeRTOS\Source/stream_buffer.c ****                 traceSTREAM_BUFFER_RESET( xStreamBuffer );
 444:..\FreeRTOS\Source/stream_buffer.c ****             }
 445:..\FreeRTOS\Source/stream_buffer.c ****         }
 446:..\FreeRTOS\Source/stream_buffer.c ****     }
 447:..\FreeRTOS\Source/stream_buffer.c ****     taskEXIT_CRITICAL();
 506              		.loc 1 447 0
 507 004e FFF7FEFF 		bl	vPortExitCritical
 448:..\FreeRTOS\Source/stream_buffer.c **** 
 449:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 508              		.loc 1 449 0
 509 0052 FB68     		ldr	r3, [r7, #12]
 450:..\FreeRTOS\Source/stream_buffer.c **** }
 510              		.loc 1 450 0
 511 0054 1800     		movs	r0, r3
 512 0056 BD46     		mov	sp, r7
 513 0058 05B0     		add	sp, sp, #20
 514              		@ sp needed
 515 005a 90BD     		pop	{r4, r7, pc}
 516              	.L48:
 517              		.align	2
 518              	.L47:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 18


 519 005c 00000000 		.word	x
 520              		.cfi_endproc
 521              	.LFE3:
 522              		.size	xStreamBufferReset, .-xStreamBufferReset
 523              		.section	.text.xStreamBufferSetTriggerLevel,"ax",%progbits
 524              		.align	2
 525              		.global	xStreamBufferSetTriggerLevel
 526              		.code	16
 527              		.thumb_func
 528              		.type	xStreamBufferSetTriggerLevel, %function
 529              	xStreamBufferSetTriggerLevel:
 530              	.LFB4:
 451:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 452:..\FreeRTOS\Source/stream_buffer.c **** 
 453:..\FreeRTOS\Source/stream_buffer.c **** BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
 454:..\FreeRTOS\Source/stream_buffer.c ****                                          size_t xTriggerLevel )
 455:..\FreeRTOS\Source/stream_buffer.c **** {
 531              		.loc 1 455 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 16
 534              		@ frame_needed = 1, uses_anonymous_args = 0
 535 0000 80B5     		push	{r7, lr}
 536              		.cfi_def_cfa_offset 8
 537              		.cfi_offset 7, -8
 538              		.cfi_offset 14, -4
 539 0002 84B0     		sub	sp, sp, #16
 540              		.cfi_def_cfa_offset 24
 541 0004 00AF     		add	r7, sp, #0
 542              		.cfi_def_cfa_register 7
 543 0006 7860     		str	r0, [r7, #4]
 544 0008 3960     		str	r1, [r7]
 456:..\FreeRTOS\Source/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 545              		.loc 1 456 0
 546 000a 7B68     		ldr	r3, [r7, #4]
 547 000c BB60     		str	r3, [r7, #8]
 457:..\FreeRTOS\Source/stream_buffer.c ****     BaseType_t xReturn;
 458:..\FreeRTOS\Source/stream_buffer.c **** 
 459:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 548              		.loc 1 459 0
 549 000e 0E4B     		ldr	r3, .L56
 550 0010 1B88     		ldrh	r3, [r3]
 551 0012 002B     		cmp	r3, #0
 552 0014 01D1     		bne	.L50
 553              		.loc 1 459 0 is_stmt 0 discriminator 1
 554              		.syntax divided
 555              	@ 459 "..\FreeRTOS\Source\stream_buffer.c" 1
 556 0016 72B6     		 cpsid i 
 557              	@ 0 "" 2
 558              		.thumb
 559              		.syntax unified
 560              	.L51:
 561 0018 FEE7     		b	.L51
 562              	.L50:
 460:..\FreeRTOS\Source/stream_buffer.c **** 
 461:..\FreeRTOS\Source/stream_buffer.c ****     /* It is not valid for the trigger level to be 0. */
 462:..\FreeRTOS\Source/stream_buffer.c ****     if( xTriggerLevel == ( size_t ) 0 )
 563              		.loc 1 462 0 is_stmt 1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 19


 564 001a 3B68     		ldr	r3, [r7]
 565 001c 002B     		cmp	r3, #0
 566 001e 01D1     		bne	.L52
 463:..\FreeRTOS\Source/stream_buffer.c ****     {
 464:..\FreeRTOS\Source/stream_buffer.c ****         xTriggerLevel = ( size_t ) 1;
 567              		.loc 1 464 0
 568 0020 0123     		movs	r3, #1
 569 0022 3B60     		str	r3, [r7]
 570              	.L52:
 465:..\FreeRTOS\Source/stream_buffer.c ****     }
 466:..\FreeRTOS\Source/stream_buffer.c **** 
 467:..\FreeRTOS\Source/stream_buffer.c ****     /* The trigger level is the number of bytes that must be in the stream
 468:..\FreeRTOS\Source/stream_buffer.c ****      * buffer before a task that is waiting for data is unblocked. */
 469:..\FreeRTOS\Source/stream_buffer.c ****     if( xTriggerLevel <= pxStreamBuffer->xLength )
 571              		.loc 1 469 0
 572 0024 BB68     		ldr	r3, [r7, #8]
 573 0026 9A68     		ldr	r2, [r3, #8]
 574 0028 3B68     		ldr	r3, [r7]
 575 002a 9A42     		cmp	r2, r3
 576 002c 05D3     		bcc	.L53
 470:..\FreeRTOS\Source/stream_buffer.c ****     {
 471:..\FreeRTOS\Source/stream_buffer.c ****         pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 577              		.loc 1 471 0
 578 002e BB68     		ldr	r3, [r7, #8]
 579 0030 3A68     		ldr	r2, [r7]
 580 0032 DA60     		str	r2, [r3, #12]
 472:..\FreeRTOS\Source/stream_buffer.c ****         xReturn = pdPASS;
 581              		.loc 1 472 0
 582 0034 0123     		movs	r3, #1
 583 0036 FB60     		str	r3, [r7, #12]
 584 0038 01E0     		b	.L54
 585              	.L53:
 473:..\FreeRTOS\Source/stream_buffer.c ****     }
 474:..\FreeRTOS\Source/stream_buffer.c ****     else
 475:..\FreeRTOS\Source/stream_buffer.c ****     {
 476:..\FreeRTOS\Source/stream_buffer.c ****         xReturn = pdFALSE;
 586              		.loc 1 476 0
 587 003a 0023     		movs	r3, #0
 588 003c FB60     		str	r3, [r7, #12]
 589              	.L54:
 477:..\FreeRTOS\Source/stream_buffer.c ****     }
 478:..\FreeRTOS\Source/stream_buffer.c **** 
 479:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 590              		.loc 1 479 0
 591 003e FB68     		ldr	r3, [r7, #12]
 480:..\FreeRTOS\Source/stream_buffer.c **** }
 592              		.loc 1 480 0
 593 0040 1800     		movs	r0, r3
 594 0042 BD46     		mov	sp, r7
 595 0044 04B0     		add	sp, sp, #16
 596              		@ sp needed
 597 0046 80BD     		pop	{r7, pc}
 598              	.L57:
 599              		.align	2
 600              	.L56:
 601 0048 00000000 		.word	x
 602              		.cfi_endproc
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 20


 603              	.LFE4:
 604              		.size	xStreamBufferSetTriggerLevel, .-xStreamBufferSetTriggerLevel
 605              		.section	.text.xStreamBufferSpacesAvailable,"ax",%progbits
 606              		.align	2
 607              		.global	xStreamBufferSpacesAvailable
 608              		.code	16
 609              		.thumb_func
 610              		.type	xStreamBufferSpacesAvailable, %function
 611              	xStreamBufferSpacesAvailable:
 612              	.LFB5:
 481:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 482:..\FreeRTOS\Source/stream_buffer.c **** 
 483:..\FreeRTOS\Source/stream_buffer.c **** size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
 484:..\FreeRTOS\Source/stream_buffer.c **** {
 613              		.loc 1 484 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 16
 616              		@ frame_needed = 1, uses_anonymous_args = 0
 617 0000 80B5     		push	{r7, lr}
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 7, -8
 620              		.cfi_offset 14, -4
 621 0002 84B0     		sub	sp, sp, #16
 622              		.cfi_def_cfa_offset 24
 623 0004 00AF     		add	r7, sp, #0
 624              		.cfi_def_cfa_register 7
 625 0006 7860     		str	r0, [r7, #4]
 485:..\FreeRTOS\Source/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 626              		.loc 1 485 0
 627 0008 7B68     		ldr	r3, [r7, #4]
 628 000a BB60     		str	r3, [r7, #8]
 486:..\FreeRTOS\Source/stream_buffer.c ****     size_t xSpace;
 487:..\FreeRTOS\Source/stream_buffer.c **** 
 488:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 629              		.loc 1 488 0
 630 000c 114B     		ldr	r3, .L63
 631 000e 1B88     		ldrh	r3, [r3]
 632 0010 002B     		cmp	r3, #0
 633 0012 01D1     		bne	.L59
 634              		.loc 1 488 0 is_stmt 0 discriminator 1
 635              		.syntax divided
 636              	@ 488 "..\FreeRTOS\Source\stream_buffer.c" 1
 637 0014 72B6     		 cpsid i 
 638              	@ 0 "" 2
 639              		.thumb
 640              		.syntax unified
 641              	.L60:
 642 0016 FEE7     		b	.L60
 643              	.L59:
 489:..\FreeRTOS\Source/stream_buffer.c **** 
 490:..\FreeRTOS\Source/stream_buffer.c ****     xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 644              		.loc 1 490 0 is_stmt 1
 645 0018 BB68     		ldr	r3, [r7, #8]
 646 001a 9A68     		ldr	r2, [r3, #8]
 647 001c BB68     		ldr	r3, [r7, #8]
 648 001e 1B68     		ldr	r3, [r3]
 649 0020 D318     		adds	r3, r2, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 21


 650 0022 FB60     		str	r3, [r7, #12]
 491:..\FreeRTOS\Source/stream_buffer.c ****     xSpace -= pxStreamBuffer->xHead;
 651              		.loc 1 491 0
 652 0024 BB68     		ldr	r3, [r7, #8]
 653 0026 5B68     		ldr	r3, [r3, #4]
 654 0028 FA68     		ldr	r2, [r7, #12]
 655 002a D31A     		subs	r3, r2, r3
 656 002c FB60     		str	r3, [r7, #12]
 492:..\FreeRTOS\Source/stream_buffer.c ****     xSpace -= ( size_t ) 1;
 657              		.loc 1 492 0
 658 002e FB68     		ldr	r3, [r7, #12]
 659 0030 013B     		subs	r3, r3, #1
 660 0032 FB60     		str	r3, [r7, #12]
 493:..\FreeRTOS\Source/stream_buffer.c **** 
 494:..\FreeRTOS\Source/stream_buffer.c ****     if( xSpace >= pxStreamBuffer->xLength )
 661              		.loc 1 494 0
 662 0034 BB68     		ldr	r3, [r7, #8]
 663 0036 9A68     		ldr	r2, [r3, #8]
 664 0038 FB68     		ldr	r3, [r7, #12]
 665 003a 9A42     		cmp	r2, r3
 666 003c 04D8     		bhi	.L61
 495:..\FreeRTOS\Source/stream_buffer.c ****     {
 496:..\FreeRTOS\Source/stream_buffer.c ****         xSpace -= pxStreamBuffer->xLength;
 667              		.loc 1 496 0
 668 003e BB68     		ldr	r3, [r7, #8]
 669 0040 9B68     		ldr	r3, [r3, #8]
 670 0042 FA68     		ldr	r2, [r7, #12]
 671 0044 D31A     		subs	r3, r2, r3
 672 0046 FB60     		str	r3, [r7, #12]
 673              	.L61:
 497:..\FreeRTOS\Source/stream_buffer.c ****     }
 498:..\FreeRTOS\Source/stream_buffer.c ****     else
 499:..\FreeRTOS\Source/stream_buffer.c ****     {
 500:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 501:..\FreeRTOS\Source/stream_buffer.c ****     }
 502:..\FreeRTOS\Source/stream_buffer.c **** 
 503:..\FreeRTOS\Source/stream_buffer.c ****     return xSpace;
 674              		.loc 1 503 0
 675 0048 FB68     		ldr	r3, [r7, #12]
 504:..\FreeRTOS\Source/stream_buffer.c **** }
 676              		.loc 1 504 0
 677 004a 1800     		movs	r0, r3
 678 004c BD46     		mov	sp, r7
 679 004e 04B0     		add	sp, sp, #16
 680              		@ sp needed
 681 0050 80BD     		pop	{r7, pc}
 682              	.L64:
 683 0052 C046     		.align	2
 684              	.L63:
 685 0054 00000000 		.word	x
 686              		.cfi_endproc
 687              	.LFE5:
 688              		.size	xStreamBufferSpacesAvailable, .-xStreamBufferSpacesAvailable
 689              		.section	.text.xStreamBufferBytesAvailable,"ax",%progbits
 690              		.align	2
 691              		.global	xStreamBufferBytesAvailable
 692              		.code	16
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 22


 693              		.thumb_func
 694              		.type	xStreamBufferBytesAvailable, %function
 695              	xStreamBufferBytesAvailable:
 696              	.LFB6:
 505:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 506:..\FreeRTOS\Source/stream_buffer.c **** 
 507:..\FreeRTOS\Source/stream_buffer.c **** size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
 508:..\FreeRTOS\Source/stream_buffer.c **** {
 697              		.loc 1 508 0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 16
 700              		@ frame_needed = 1, uses_anonymous_args = 0
 701 0000 80B5     		push	{r7, lr}
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 7, -8
 704              		.cfi_offset 14, -4
 705 0002 84B0     		sub	sp, sp, #16
 706              		.cfi_def_cfa_offset 24
 707 0004 00AF     		add	r7, sp, #0
 708              		.cfi_def_cfa_register 7
 709 0006 7860     		str	r0, [r7, #4]
 509:..\FreeRTOS\Source/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 710              		.loc 1 509 0
 711 0008 7B68     		ldr	r3, [r7, #4]
 712 000a FB60     		str	r3, [r7, #12]
 510:..\FreeRTOS\Source/stream_buffer.c ****     size_t xReturn;
 511:..\FreeRTOS\Source/stream_buffer.c **** 
 512:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 713              		.loc 1 512 0
 714 000c 084B     		ldr	r3, .L69
 715 000e 1B88     		ldrh	r3, [r3]
 716 0010 002B     		cmp	r3, #0
 717 0012 01D1     		bne	.L66
 718              		.loc 1 512 0 is_stmt 0 discriminator 1
 719              		.syntax divided
 720              	@ 512 "..\FreeRTOS\Source\stream_buffer.c" 1
 721 0014 72B6     		 cpsid i 
 722              	@ 0 "" 2
 723              		.thumb
 724              		.syntax unified
 725              	.L67:
 726 0016 FEE7     		b	.L67
 727              	.L66:
 513:..\FreeRTOS\Source/stream_buffer.c **** 
 514:..\FreeRTOS\Source/stream_buffer.c ****     xReturn = prvBytesInBuffer( pxStreamBuffer );
 728              		.loc 1 514 0 is_stmt 1
 729 0018 FB68     		ldr	r3, [r7, #12]
 730 001a 1800     		movs	r0, r3
 731 001c FFF7FEFF 		bl	prvBytesInBuffer
 732 0020 0300     		movs	r3, r0
 733 0022 BB60     		str	r3, [r7, #8]
 515:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 734              		.loc 1 515 0
 735 0024 BB68     		ldr	r3, [r7, #8]
 516:..\FreeRTOS\Source/stream_buffer.c **** }
 736              		.loc 1 516 0
 737 0026 1800     		movs	r0, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 23


 738 0028 BD46     		mov	sp, r7
 739 002a 04B0     		add	sp, sp, #16
 740              		@ sp needed
 741 002c 80BD     		pop	{r7, pc}
 742              	.L70:
 743 002e C046     		.align	2
 744              	.L69:
 745 0030 00000000 		.word	x
 746              		.cfi_endproc
 747              	.LFE6:
 748              		.size	xStreamBufferBytesAvailable, .-xStreamBufferBytesAvailable
 749              		.section	.text.xStreamBufferSend,"ax",%progbits
 750              		.align	2
 751              		.global	xStreamBufferSend
 752              		.code	16
 753              		.thumb_func
 754              		.type	xStreamBufferSend, %function
 755              	xStreamBufferSend:
 756              	.LFB7:
 517:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 518:..\FreeRTOS\Source/stream_buffer.c **** 
 519:..\FreeRTOS\Source/stream_buffer.c **** size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
 520:..\FreeRTOS\Source/stream_buffer.c ****                           const void * pvTxData,
 521:..\FreeRTOS\Source/stream_buffer.c ****                           size_t xDataLengthBytes,
 522:..\FreeRTOS\Source/stream_buffer.c ****                           TickType_t xTicksToWait )
 523:..\FreeRTOS\Source/stream_buffer.c **** {
 757              		.loc 1 523 0
 758              		.cfi_startproc
 759              		@ args = 0, pretend = 0, frame = 48
 760              		@ frame_needed = 1, uses_anonymous_args = 0
 761 0000 90B5     		push	{r4, r7, lr}
 762              		.cfi_def_cfa_offset 12
 763              		.cfi_offset 4, -12
 764              		.cfi_offset 7, -8
 765              		.cfi_offset 14, -4
 766 0002 8FB0     		sub	sp, sp, #60
 767              		.cfi_def_cfa_offset 72
 768 0004 02AF     		add	r7, sp, #8
 769              		.cfi_def_cfa 7, 64
 770 0006 F860     		str	r0, [r7, #12]
 771 0008 B960     		str	r1, [r7, #8]
 772 000a 7A60     		str	r2, [r7, #4]
 773 000c 3B60     		str	r3, [r7]
 524:..\FreeRTOS\Source/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 774              		.loc 1 524 0
 775 000e FB68     		ldr	r3, [r7, #12]
 776 0010 7B62     		str	r3, [r7, #36]
 525:..\FreeRTOS\Source/stream_buffer.c ****     size_t xReturn, xSpace = 0;
 777              		.loc 1 525 0
 778 0012 0023     		movs	r3, #0
 779 0014 FB62     		str	r3, [r7, #44]
 526:..\FreeRTOS\Source/stream_buffer.c ****     size_t xRequiredSpace = xDataLengthBytes;
 780              		.loc 1 526 0
 781 0016 7B68     		ldr	r3, [r7, #4]
 782 0018 BB62     		str	r3, [r7, #40]
 527:..\FreeRTOS\Source/stream_buffer.c ****     TimeOut_t xTimeOut;
 528:..\FreeRTOS\Source/stream_buffer.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 24


 529:..\FreeRTOS\Source/stream_buffer.c ****     /* The maximum amount of space a stream buffer will ever report is its length
 530:..\FreeRTOS\Source/stream_buffer.c ****      * minus 1. */
 531:..\FreeRTOS\Source/stream_buffer.c ****     const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 783              		.loc 1 531 0
 784 001a 7B6A     		ldr	r3, [r7, #36]
 785 001c 9B68     		ldr	r3, [r3, #8]
 786 001e 013B     		subs	r3, r3, #1
 787 0020 3B62     		str	r3, [r7, #32]
 532:..\FreeRTOS\Source/stream_buffer.c **** 
 533:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pvTxData );
 788              		.loc 1 533 0
 789 0022 504B     		ldr	r3, .L92
 790 0024 1B88     		ldrh	r3, [r3]
 791 0026 002B     		cmp	r3, #0
 792 0028 01D1     		bne	.L72
 793              		.loc 1 533 0 is_stmt 0 discriminator 1
 794              		.syntax divided
 795              	@ 533 "..\FreeRTOS\Source\stream_buffer.c" 1
 796 002a 72B6     		 cpsid i 
 797              	@ 0 "" 2
 798              		.thumb
 799              		.syntax unified
 800              	.L73:
 801 002c FEE7     		b	.L73
 802              	.L72:
 534:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 803              		.loc 1 534 0 is_stmt 1
 804 002e 4D4B     		ldr	r3, .L92
 805 0030 1B88     		ldrh	r3, [r3]
 806 0032 002B     		cmp	r3, #0
 807 0034 01D1     		bne	.L74
 808              		.loc 1 534 0 is_stmt 0 discriminator 1
 809              		.syntax divided
 810              	@ 534 "..\FreeRTOS\Source\stream_buffer.c" 1
 811 0036 72B6     		 cpsid i 
 812              	@ 0 "" 2
 813              		.thumb
 814              		.syntax unified
 815              	.L75:
 816              		.loc 1 534 0 discriminator 2
 817 0038 FEE7     		b	.L75
 818              	.L74:
 535:..\FreeRTOS\Source/stream_buffer.c **** 
 536:..\FreeRTOS\Source/stream_buffer.c ****     /* This send function is used to write to both message buffers and stream
 537:..\FreeRTOS\Source/stream_buffer.c ****      * buffers.  If this is a message buffer then the space needed must be
 538:..\FreeRTOS\Source/stream_buffer.c ****      * increased by the amount of bytes needed to store the length of the
 539:..\FreeRTOS\Source/stream_buffer.c ****      * message. */
 540:..\FreeRTOS\Source/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 819              		.loc 1 540 0 is_stmt 1
 820 003a 7B6A     		ldr	r3, [r7, #36]
 821 003c 1B7F     		ldrb	r3, [r3, #28]
 822 003e 1A00     		movs	r2, r3
 823 0040 0123     		movs	r3, #1
 824 0042 1340     		ands	r3, r2
 825 0044 0FD0     		beq	.L76
 541:..\FreeRTOS\Source/stream_buffer.c ****     {
 542:..\FreeRTOS\Source/stream_buffer.c ****         xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 25


 826              		.loc 1 542 0
 827 0046 BB6A     		ldr	r3, [r7, #40]
 828 0048 0433     		adds	r3, r3, #4
 829 004a BB62     		str	r3, [r7, #40]
 543:..\FreeRTOS\Source/stream_buffer.c **** 
 544:..\FreeRTOS\Source/stream_buffer.c ****         /* Overflow? */
 545:..\FreeRTOS\Source/stream_buffer.c ****         configASSERT( xRequiredSpace > xDataLengthBytes );
 830              		.loc 1 545 0
 831 004c 454B     		ldr	r3, .L92
 832 004e 1B88     		ldrh	r3, [r3]
 833 0050 002B     		cmp	r3, #0
 834 0052 01D1     		bne	.L77
 835              		.loc 1 545 0 is_stmt 0 discriminator 1
 836              		.syntax divided
 837              	@ 545 "..\FreeRTOS\Source\stream_buffer.c" 1
 838 0054 72B6     		 cpsid i 
 839              	@ 0 "" 2
 840              		.thumb
 841              		.syntax unified
 842              	.L78:
 843              		.loc 1 545 0 discriminator 3
 844 0056 FEE7     		b	.L78
 845              	.L77:
 546:..\FreeRTOS\Source/stream_buffer.c **** 
 547:..\FreeRTOS\Source/stream_buffer.c ****         /* If this is a message buffer then it must be possible to write the
 548:..\FreeRTOS\Source/stream_buffer.c ****          * whole message. */
 549:..\FreeRTOS\Source/stream_buffer.c ****         if( xRequiredSpace > xMaxReportedSpace )
 846              		.loc 1 549 0 is_stmt 1
 847 0058 BA6A     		ldr	r2, [r7, #40]
 848 005a 3B6A     		ldr	r3, [r7, #32]
 849 005c 9A42     		cmp	r2, r3
 850 005e 08D9     		bls	.L79
 550:..\FreeRTOS\Source/stream_buffer.c ****         {
 551:..\FreeRTOS\Source/stream_buffer.c ****             /* The message would not fit even if the entire buffer was empty,
 552:..\FreeRTOS\Source/stream_buffer.c ****              * so don't wait for space. */
 553:..\FreeRTOS\Source/stream_buffer.c ****             xTicksToWait = ( TickType_t ) 0;
 851              		.loc 1 553 0
 852 0060 0023     		movs	r3, #0
 853 0062 3B60     		str	r3, [r7]
 854 0064 05E0     		b	.L79
 855              	.L76:
 554:..\FreeRTOS\Source/stream_buffer.c ****         }
 555:..\FreeRTOS\Source/stream_buffer.c ****         else
 556:..\FreeRTOS\Source/stream_buffer.c ****         {
 557:..\FreeRTOS\Source/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 558:..\FreeRTOS\Source/stream_buffer.c ****         }
 559:..\FreeRTOS\Source/stream_buffer.c ****     }
 560:..\FreeRTOS\Source/stream_buffer.c ****     else
 561:..\FreeRTOS\Source/stream_buffer.c ****     {
 562:..\FreeRTOS\Source/stream_buffer.c ****         /* If this is a stream buffer then it is acceptable to write only part
 563:..\FreeRTOS\Source/stream_buffer.c ****          * of the message to the buffer.  Cap the length to the total length of
 564:..\FreeRTOS\Source/stream_buffer.c ****          * the buffer. */
 565:..\FreeRTOS\Source/stream_buffer.c ****         if( xRequiredSpace > xMaxReportedSpace )
 856              		.loc 1 565 0
 857 0066 BA6A     		ldr	r2, [r7, #40]
 858 0068 3B6A     		ldr	r3, [r7, #32]
 859 006a 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 26


 860 006c 01D9     		bls	.L79
 566:..\FreeRTOS\Source/stream_buffer.c ****         {
 567:..\FreeRTOS\Source/stream_buffer.c ****             xRequiredSpace = xMaxReportedSpace;
 861              		.loc 1 567 0
 862 006e 3B6A     		ldr	r3, [r7, #32]
 863 0070 BB62     		str	r3, [r7, #40]
 864              	.L79:
 568:..\FreeRTOS\Source/stream_buffer.c ****         }
 569:..\FreeRTOS\Source/stream_buffer.c ****         else
 570:..\FreeRTOS\Source/stream_buffer.c ****         {
 571:..\FreeRTOS\Source/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 572:..\FreeRTOS\Source/stream_buffer.c ****         }
 573:..\FreeRTOS\Source/stream_buffer.c ****     }
 574:..\FreeRTOS\Source/stream_buffer.c **** 
 575:..\FreeRTOS\Source/stream_buffer.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 865              		.loc 1 575 0
 866 0072 3B68     		ldr	r3, [r7]
 867 0074 002B     		cmp	r3, #0
 868 0076 3BD0     		beq	.L80
 576:..\FreeRTOS\Source/stream_buffer.c ****     {
 577:..\FreeRTOS\Source/stream_buffer.c ****         vTaskSetTimeOutState( &xTimeOut );
 869              		.loc 1 577 0
 870 0078 1423     		movs	r3, #20
 871 007a FB18     		adds	r3, r7, r3
 872 007c 1800     		movs	r0, r3
 873 007e FFF7FEFF 		bl	vTaskSetTimeOutState
 874              	.L86:
 578:..\FreeRTOS\Source/stream_buffer.c **** 
 579:..\FreeRTOS\Source/stream_buffer.c ****         do
 580:..\FreeRTOS\Source/stream_buffer.c ****         {
 581:..\FreeRTOS\Source/stream_buffer.c ****             /* Wait until the required number of bytes are free in the message
 582:..\FreeRTOS\Source/stream_buffer.c ****              * buffer. */
 583:..\FreeRTOS\Source/stream_buffer.c ****             taskENTER_CRITICAL();
 875              		.loc 1 583 0
 876 0082 FFF7FEFF 		bl	vPortEnterCritical
 584:..\FreeRTOS\Source/stream_buffer.c ****             {
 585:..\FreeRTOS\Source/stream_buffer.c ****                 xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 877              		.loc 1 585 0
 878 0086 7B6A     		ldr	r3, [r7, #36]
 879 0088 1800     		movs	r0, r3
 880 008a FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 881 008e 0300     		movs	r3, r0
 882 0090 FB62     		str	r3, [r7, #44]
 586:..\FreeRTOS\Source/stream_buffer.c **** 
 587:..\FreeRTOS\Source/stream_buffer.c ****                 if( xSpace < xRequiredSpace )
 883              		.loc 1 587 0
 884 0092 FA6A     		ldr	r2, [r7, #44]
 885 0094 BB6A     		ldr	r3, [r7, #40]
 886 0096 9A42     		cmp	r2, r3
 887 0098 11D2     		bcs	.L81
 588:..\FreeRTOS\Source/stream_buffer.c ****                 {
 589:..\FreeRTOS\Source/stream_buffer.c ****                     /* Clear notification state as going to wait for space. */
 590:..\FreeRTOS\Source/stream_buffer.c ****                     ( void ) xTaskNotifyStateClear( NULL );
 888              		.loc 1 590 0
 889 009a 0021     		movs	r1, #0
 890 009c 0020     		movs	r0, #0
 891 009e FFF7FEFF 		bl	xTaskGenericNotifyStateClear
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 27


 591:..\FreeRTOS\Source/stream_buffer.c **** 
 592:..\FreeRTOS\Source/stream_buffer.c ****                     /* Should only be one writer. */
 593:..\FreeRTOS\Source/stream_buffer.c ****                     configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 892              		.loc 1 593 0
 893 00a2 304B     		ldr	r3, .L92
 894 00a4 1B88     		ldrh	r3, [r3]
 895 00a6 002B     		cmp	r3, #0
 896 00a8 01D1     		bne	.L82
 897              		.loc 1 593 0 is_stmt 0 discriminator 1
 898              		.syntax divided
 899              	@ 593 "..\FreeRTOS\Source\stream_buffer.c" 1
 900 00aa 72B6     		 cpsid i 
 901              	@ 0 "" 2
 902              		.thumb
 903              		.syntax unified
 904              	.L83:
 905              		.loc 1 593 0 discriminator 4
 906 00ac FEE7     		b	.L83
 907              	.L82:
 908              		.loc 1 593 0 discriminator 2
 909 00ae 7B6A     		ldr	r3, [r7, #36]
 910 00b0 5B69     		ldr	r3, [r3, #20]
 594:..\FreeRTOS\Source/stream_buffer.c ****                     pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 911              		.loc 1 594 0 is_stmt 1 discriminator 2
 912 00b2 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 913 00b6 0200     		movs	r2, r0
 914 00b8 7B6A     		ldr	r3, [r7, #36]
 915 00ba 5A61     		str	r2, [r3, #20]
 916 00bc 02E0     		b	.L91
 917              	.L81:
 595:..\FreeRTOS\Source/stream_buffer.c ****                 }
 596:..\FreeRTOS\Source/stream_buffer.c ****                 else
 597:..\FreeRTOS\Source/stream_buffer.c ****                 {
 598:..\FreeRTOS\Source/stream_buffer.c ****                     taskEXIT_CRITICAL();
 918              		.loc 1 598 0
 919 00be FFF7FEFF 		bl	vPortExitCritical
 599:..\FreeRTOS\Source/stream_buffer.c ****                     break;
 920              		.loc 1 599 0
 921 00c2 15E0     		b	.L80
 922              	.L91:
 600:..\FreeRTOS\Source/stream_buffer.c ****                 }
 601:..\FreeRTOS\Source/stream_buffer.c ****             }
 602:..\FreeRTOS\Source/stream_buffer.c ****             taskEXIT_CRITICAL();
 923              		.loc 1 602 0
 924 00c4 FFF7FEFF 		bl	vPortExitCritical
 603:..\FreeRTOS\Source/stream_buffer.c **** 
 604:..\FreeRTOS\Source/stream_buffer.c ****             traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
 605:..\FreeRTOS\Source/stream_buffer.c ****             ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 925              		.loc 1 605 0
 926 00c8 3B68     		ldr	r3, [r7]
 927 00ca 0093     		str	r3, [sp]
 928 00cc 0023     		movs	r3, #0
 929 00ce 0022     		movs	r2, #0
 930 00d0 0021     		movs	r1, #0
 931 00d2 0020     		movs	r0, #0
 932 00d4 FFF7FEFF 		bl	xTaskGenericNotifyWait
 606:..\FreeRTOS\Source/stream_buffer.c ****             pxStreamBuffer->xTaskWaitingToSend = NULL;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 28


 933              		.loc 1 606 0
 934 00d8 7B6A     		ldr	r3, [r7, #36]
 935 00da 0022     		movs	r2, #0
 936 00dc 5A61     		str	r2, [r3, #20]
 607:..\FreeRTOS\Source/stream_buffer.c ****         } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 937              		.loc 1 607 0
 938 00de 3A00     		movs	r2, r7
 939 00e0 1423     		movs	r3, #20
 940 00e2 FB18     		adds	r3, r7, r3
 941 00e4 1100     		movs	r1, r2
 942 00e6 1800     		movs	r0, r3
 943 00e8 FFF7FEFF 		bl	xTaskCheckForTimeOut
 944 00ec 031E     		subs	r3, r0, #0
 945 00ee C8D0     		beq	.L86
 946              	.L80:
 608:..\FreeRTOS\Source/stream_buffer.c ****     }
 609:..\FreeRTOS\Source/stream_buffer.c ****     else
 610:..\FreeRTOS\Source/stream_buffer.c ****     {
 611:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 612:..\FreeRTOS\Source/stream_buffer.c ****     }
 613:..\FreeRTOS\Source/stream_buffer.c **** 
 614:..\FreeRTOS\Source/stream_buffer.c ****     if( xSpace == ( size_t ) 0 )
 947              		.loc 1 614 0
 948 00f0 FB6A     		ldr	r3, [r7, #44]
 949 00f2 002B     		cmp	r3, #0
 950 00f4 05D1     		bne	.L87
 615:..\FreeRTOS\Source/stream_buffer.c ****     {
 616:..\FreeRTOS\Source/stream_buffer.c ****         xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 951              		.loc 1 616 0
 952 00f6 7B6A     		ldr	r3, [r7, #36]
 953 00f8 1800     		movs	r0, r3
 954 00fa FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 955 00fe 0300     		movs	r3, r0
 956 0100 FB62     		str	r3, [r7, #44]
 957              	.L87:
 617:..\FreeRTOS\Source/stream_buffer.c ****     }
 618:..\FreeRTOS\Source/stream_buffer.c ****     else
 619:..\FreeRTOS\Source/stream_buffer.c ****     {
 620:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 621:..\FreeRTOS\Source/stream_buffer.c ****     }
 622:..\FreeRTOS\Source/stream_buffer.c **** 
 623:..\FreeRTOS\Source/stream_buffer.c ****     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequire
 958              		.loc 1 623 0
 959 0102 FC6A     		ldr	r4, [r7, #44]
 960 0104 7A68     		ldr	r2, [r7, #4]
 961 0106 B968     		ldr	r1, [r7, #8]
 962 0108 786A     		ldr	r0, [r7, #36]
 963 010a BB6A     		ldr	r3, [r7, #40]
 964 010c 0093     		str	r3, [sp]
 965 010e 2300     		movs	r3, r4
 966 0110 FFF7FEFF 		bl	prvWriteMessageToBuffer
 967 0114 0300     		movs	r3, r0
 968 0116 FB61     		str	r3, [r7, #28]
 624:..\FreeRTOS\Source/stream_buffer.c **** 
 625:..\FreeRTOS\Source/stream_buffer.c ****     if( xReturn > ( size_t ) 0 )
 969              		.loc 1 625 0
 970 0118 FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 29


 971 011a 002B     		cmp	r3, #0
 972 011c 1CD0     		beq	.L88
 626:..\FreeRTOS\Source/stream_buffer.c ****     {
 627:..\FreeRTOS\Source/stream_buffer.c ****         traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );
 628:..\FreeRTOS\Source/stream_buffer.c **** 
 629:..\FreeRTOS\Source/stream_buffer.c ****         /* Was a task waiting for the data? */
 630:..\FreeRTOS\Source/stream_buffer.c ****         if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 973              		.loc 1 630 0
 974 011e 7B6A     		ldr	r3, [r7, #36]
 975 0120 1800     		movs	r0, r3
 976 0122 FFF7FEFF 		bl	prvBytesInBuffer
 977 0126 0200     		movs	r2, r0
 978 0128 7B6A     		ldr	r3, [r7, #36]
 979 012a DB68     		ldr	r3, [r3, #12]
 980 012c 9A42     		cmp	r2, r3
 981 012e 13D3     		bcc	.L88
 631:..\FreeRTOS\Source/stream_buffer.c ****         {
 632:..\FreeRTOS\Source/stream_buffer.c ****             sbSEND_COMPLETED( pxStreamBuffer );
 982              		.loc 1 632 0
 983 0130 FFF7FEFF 		bl	vTaskSuspendAll
 984 0134 7B6A     		ldr	r3, [r7, #36]
 985 0136 1B69     		ldr	r3, [r3, #16]
 986 0138 002B     		cmp	r3, #0
 987 013a 0BD0     		beq	.L89
 988              		.loc 1 632 0 is_stmt 0 discriminator 1
 989 013c 7B6A     		ldr	r3, [r7, #36]
 990 013e 1869     		ldr	r0, [r3, #16]
 991 0140 0023     		movs	r3, #0
 992 0142 0093     		str	r3, [sp]
 993 0144 0023     		movs	r3, #0
 994 0146 0022     		movs	r2, #0
 995 0148 0021     		movs	r1, #0
 996 014a FFF7FEFF 		bl	xTaskGenericNotify
 997 014e 7B6A     		ldr	r3, [r7, #36]
 998 0150 0022     		movs	r2, #0
 999 0152 1A61     		str	r2, [r3, #16]
 1000              	.L89:
 1001              		.loc 1 632 0 discriminator 3
 1002 0154 FFF7FEFF 		bl	xTaskResumeAll
 1003              	.L88:
 633:..\FreeRTOS\Source/stream_buffer.c ****         }
 634:..\FreeRTOS\Source/stream_buffer.c ****         else
 635:..\FreeRTOS\Source/stream_buffer.c ****         {
 636:..\FreeRTOS\Source/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 637:..\FreeRTOS\Source/stream_buffer.c ****         }
 638:..\FreeRTOS\Source/stream_buffer.c ****     }
 639:..\FreeRTOS\Source/stream_buffer.c ****     else
 640:..\FreeRTOS\Source/stream_buffer.c ****     {
 641:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 642:..\FreeRTOS\Source/stream_buffer.c ****         traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
 643:..\FreeRTOS\Source/stream_buffer.c ****     }
 644:..\FreeRTOS\Source/stream_buffer.c **** 
 645:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 1004              		.loc 1 645 0 is_stmt 1
 1005 0158 FB69     		ldr	r3, [r7, #28]
 646:..\FreeRTOS\Source/stream_buffer.c **** }
 1006              		.loc 1 646 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 30


 1007 015a 1800     		movs	r0, r3
 1008 015c BD46     		mov	sp, r7
 1009 015e 0DB0     		add	sp, sp, #52
 1010              		@ sp needed
 1011 0160 90BD     		pop	{r4, r7, pc}
 1012              	.L93:
 1013 0162 C046     		.align	2
 1014              	.L92:
 1015 0164 00000000 		.word	x
 1016              		.cfi_endproc
 1017              	.LFE7:
 1018              		.size	xStreamBufferSend, .-xStreamBufferSend
 1019              		.section	.text.xStreamBufferSendFromISR,"ax",%progbits
 1020              		.align	2
 1021              		.global	xStreamBufferSendFromISR
 1022              		.code	16
 1023              		.thumb_func
 1024              		.type	xStreamBufferSendFromISR, %function
 1025              	xStreamBufferSendFromISR:
 1026              	.LFB8:
 647:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 648:..\FreeRTOS\Source/stream_buffer.c **** 
 649:..\FreeRTOS\Source/stream_buffer.c **** size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
 650:..\FreeRTOS\Source/stream_buffer.c ****                                  const void * pvTxData,
 651:..\FreeRTOS\Source/stream_buffer.c ****                                  size_t xDataLengthBytes,
 652:..\FreeRTOS\Source/stream_buffer.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
 653:..\FreeRTOS\Source/stream_buffer.c **** {
 1027              		.loc 1 653 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 40
 1030              		@ frame_needed = 1, uses_anonymous_args = 0
 1031 0000 90B5     		push	{r4, r7, lr}
 1032              		.cfi_def_cfa_offset 12
 1033              		.cfi_offset 4, -12
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 0002 8DB0     		sub	sp, sp, #52
 1037              		.cfi_def_cfa_offset 64
 1038 0004 02AF     		add	r7, sp, #8
 1039              		.cfi_def_cfa 7, 56
 1040 0006 F860     		str	r0, [r7, #12]
 1041 0008 B960     		str	r1, [r7, #8]
 1042 000a 7A60     		str	r2, [r7, #4]
 1043 000c 3B60     		str	r3, [r7]
 654:..\FreeRTOS\Source/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1044              		.loc 1 654 0
 1045 000e FB68     		ldr	r3, [r7, #12]
 1046 0010 3B62     		str	r3, [r7, #32]
 655:..\FreeRTOS\Source/stream_buffer.c ****     size_t xReturn, xSpace;
 656:..\FreeRTOS\Source/stream_buffer.c ****     size_t xRequiredSpace = xDataLengthBytes;
 1047              		.loc 1 656 0
 1048 0012 7B68     		ldr	r3, [r7, #4]
 1049 0014 7B62     		str	r3, [r7, #36]
 657:..\FreeRTOS\Source/stream_buffer.c **** 
 658:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pvTxData );
 1050              		.loc 1 658 0
 1051 0016 284B     		ldr	r3, .L103
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 31


 1052 0018 1B88     		ldrh	r3, [r3]
 1053 001a 002B     		cmp	r3, #0
 1054 001c 01D1     		bne	.L95
 1055              		.loc 1 658 0 is_stmt 0 discriminator 1
 1056              		.syntax divided
 1057              	@ 658 "..\FreeRTOS\Source\stream_buffer.c" 1
 1058 001e 72B6     		 cpsid i 
 1059              	@ 0 "" 2
 1060              		.thumb
 1061              		.syntax unified
 1062              	.L96:
 1063 0020 FEE7     		b	.L96
 1064              	.L95:
 659:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 1065              		.loc 1 659 0 is_stmt 1
 1066 0022 254B     		ldr	r3, .L103
 1067 0024 1B88     		ldrh	r3, [r3]
 1068 0026 002B     		cmp	r3, #0
 1069 0028 01D1     		bne	.L97
 1070              		.loc 1 659 0 is_stmt 0 discriminator 1
 1071              		.syntax divided
 1072              	@ 659 "..\FreeRTOS\Source\stream_buffer.c" 1
 1073 002a 72B6     		 cpsid i 
 1074              	@ 0 "" 2
 1075              		.thumb
 1076              		.syntax unified
 1077              	.L98:
 1078              		.loc 1 659 0 discriminator 2
 1079 002c FEE7     		b	.L98
 1080              	.L97:
 660:..\FreeRTOS\Source/stream_buffer.c **** 
 661:..\FreeRTOS\Source/stream_buffer.c ****     /* This send function is used to write to both message buffers and stream
 662:..\FreeRTOS\Source/stream_buffer.c ****      * buffers.  If this is a message buffer then the space needed must be
 663:..\FreeRTOS\Source/stream_buffer.c ****      * increased by the amount of bytes needed to store the length of the
 664:..\FreeRTOS\Source/stream_buffer.c ****      * message. */
 665:..\FreeRTOS\Source/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1081              		.loc 1 665 0 is_stmt 1
 1082 002e 3B6A     		ldr	r3, [r7, #32]
 1083 0030 1B7F     		ldrb	r3, [r3, #28]
 1084 0032 1A00     		movs	r2, r3
 1085 0034 0123     		movs	r3, #1
 1086 0036 1340     		ands	r3, r2
 1087 0038 02D0     		beq	.L99
 666:..\FreeRTOS\Source/stream_buffer.c ****     {
 667:..\FreeRTOS\Source/stream_buffer.c ****         xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1088              		.loc 1 667 0
 1089 003a 7B6A     		ldr	r3, [r7, #36]
 1090 003c 0433     		adds	r3, r3, #4
 1091 003e 7B62     		str	r3, [r7, #36]
 1092              	.L99:
 668:..\FreeRTOS\Source/stream_buffer.c ****     }
 669:..\FreeRTOS\Source/stream_buffer.c ****     else
 670:..\FreeRTOS\Source/stream_buffer.c ****     {
 671:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 672:..\FreeRTOS\Source/stream_buffer.c ****     }
 673:..\FreeRTOS\Source/stream_buffer.c **** 
 674:..\FreeRTOS\Source/stream_buffer.c ****     xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 32


 1093              		.loc 1 674 0
 1094 0040 3B6A     		ldr	r3, [r7, #32]
 1095 0042 1800     		movs	r0, r3
 1096 0044 FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 1097 0048 0300     		movs	r3, r0
 1098 004a FB61     		str	r3, [r7, #28]
 675:..\FreeRTOS\Source/stream_buffer.c ****     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequire
 1099              		.loc 1 675 0
 1100 004c FC69     		ldr	r4, [r7, #28]
 1101 004e 7A68     		ldr	r2, [r7, #4]
 1102 0050 B968     		ldr	r1, [r7, #8]
 1103 0052 386A     		ldr	r0, [r7, #32]
 1104 0054 7B6A     		ldr	r3, [r7, #36]
 1105 0056 0093     		str	r3, [sp]
 1106 0058 2300     		movs	r3, r4
 1107 005a FFF7FEFF 		bl	prvWriteMessageToBuffer
 1108 005e 0300     		movs	r3, r0
 1109 0060 BB61     		str	r3, [r7, #24]
 676:..\FreeRTOS\Source/stream_buffer.c **** 
 677:..\FreeRTOS\Source/stream_buffer.c ****     if( xReturn > ( size_t ) 0 )
 1110              		.loc 1 677 0
 1111 0062 BB69     		ldr	r3, [r7, #24]
 1112 0064 002B     		cmp	r3, #0
 1113 0066 22D0     		beq	.L100
 678:..\FreeRTOS\Source/stream_buffer.c ****     {
 679:..\FreeRTOS\Source/stream_buffer.c ****         /* Was a task waiting for the data? */
 680:..\FreeRTOS\Source/stream_buffer.c ****         if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 1114              		.loc 1 680 0
 1115 0068 3B6A     		ldr	r3, [r7, #32]
 1116 006a 1800     		movs	r0, r3
 1117 006c FFF7FEFF 		bl	prvBytesInBuffer
 1118 0070 0200     		movs	r2, r0
 1119 0072 3B6A     		ldr	r3, [r7, #32]
 1120 0074 DB68     		ldr	r3, [r3, #12]
 1121 0076 9A42     		cmp	r2, r3
 1122 0078 19D3     		bcc	.L100
 1123              	.LBB3:
 681:..\FreeRTOS\Source/stream_buffer.c ****         {
 682:..\FreeRTOS\Source/stream_buffer.c ****             sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1124              		.loc 1 682 0
 1125 007a FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1126 007e 0300     		movs	r3, r0
 1127 0080 7B61     		str	r3, [r7, #20]
 1128 0082 3B6A     		ldr	r3, [r7, #32]
 1129 0084 1B69     		ldr	r3, [r3, #16]
 1130 0086 002B     		cmp	r3, #0
 1131 0088 0DD0     		beq	.L101
 1132              		.loc 1 682 0 is_stmt 0 discriminator 1
 1133 008a 3B6A     		ldr	r3, [r7, #32]
 1134 008c 1869     		ldr	r0, [r3, #16]
 1135 008e 3B68     		ldr	r3, [r7]
 1136 0090 0193     		str	r3, [sp, #4]
 1137 0092 0023     		movs	r3, #0
 1138 0094 0093     		str	r3, [sp]
 1139 0096 0023     		movs	r3, #0
 1140 0098 0022     		movs	r2, #0
 1141 009a 0021     		movs	r1, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 33


 1142 009c FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 1143 00a0 3B6A     		ldr	r3, [r7, #32]
 1144 00a2 0022     		movs	r2, #0
 1145 00a4 1A61     		str	r2, [r3, #16]
 1146              	.L101:
 1147              		.loc 1 682 0 discriminator 3
 1148 00a6 7B69     		ldr	r3, [r7, #20]
 1149 00a8 1800     		movs	r0, r3
 1150 00aa FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1151              	.L100:
 1152              	.LBE3:
 683:..\FreeRTOS\Source/stream_buffer.c ****         }
 684:..\FreeRTOS\Source/stream_buffer.c ****         else
 685:..\FreeRTOS\Source/stream_buffer.c ****         {
 686:..\FreeRTOS\Source/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 687:..\FreeRTOS\Source/stream_buffer.c ****         }
 688:..\FreeRTOS\Source/stream_buffer.c ****     }
 689:..\FreeRTOS\Source/stream_buffer.c ****     else
 690:..\FreeRTOS\Source/stream_buffer.c ****     {
 691:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 692:..\FreeRTOS\Source/stream_buffer.c ****     }
 693:..\FreeRTOS\Source/stream_buffer.c **** 
 694:..\FreeRTOS\Source/stream_buffer.c ****     traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
 695:..\FreeRTOS\Source/stream_buffer.c **** 
 696:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 1153              		.loc 1 696 0 is_stmt 1
 1154 00ae BB69     		ldr	r3, [r7, #24]
 697:..\FreeRTOS\Source/stream_buffer.c **** }
 1155              		.loc 1 697 0
 1156 00b0 1800     		movs	r0, r3
 1157 00b2 BD46     		mov	sp, r7
 1158 00b4 0BB0     		add	sp, sp, #44
 1159              		@ sp needed
 1160 00b6 90BD     		pop	{r4, r7, pc}
 1161              	.L104:
 1162              		.align	2
 1163              	.L103:
 1164 00b8 00000000 		.word	x
 1165              		.cfi_endproc
 1166              	.LFE8:
 1167              		.size	xStreamBufferSendFromISR, .-xStreamBufferSendFromISR
 1168              		.section	.text.prvWriteMessageToBuffer,"ax",%progbits
 1169              		.align	2
 1170              		.code	16
 1171              		.thumb_func
 1172              		.type	prvWriteMessageToBuffer, %function
 1173              	prvWriteMessageToBuffer:
 1174              	.LFB9:
 698:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 699:..\FreeRTOS\Source/stream_buffer.c **** 
 700:..\FreeRTOS\Source/stream_buffer.c **** static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
 701:..\FreeRTOS\Source/stream_buffer.c ****                                        const void * pvTxData,
 702:..\FreeRTOS\Source/stream_buffer.c ****                                        size_t xDataLengthBytes,
 703:..\FreeRTOS\Source/stream_buffer.c ****                                        size_t xSpace,
 704:..\FreeRTOS\Source/stream_buffer.c ****                                        size_t xRequiredSpace )
 705:..\FreeRTOS\Source/stream_buffer.c **** {
 1175              		.loc 1 705 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 34


 1176              		.cfi_startproc
 1177              		@ args = 4, pretend = 0, frame = 24
 1178              		@ frame_needed = 1, uses_anonymous_args = 0
 1179 0000 80B5     		push	{r7, lr}
 1180              		.cfi_def_cfa_offset 8
 1181              		.cfi_offset 7, -8
 1182              		.cfi_offset 14, -4
 1183 0002 86B0     		sub	sp, sp, #24
 1184              		.cfi_def_cfa_offset 32
 1185 0004 00AF     		add	r7, sp, #0
 1186              		.cfi_def_cfa_register 7
 1187 0006 F860     		str	r0, [r7, #12]
 1188 0008 B960     		str	r1, [r7, #8]
 1189 000a 7A60     		str	r2, [r7, #4]
 1190 000c 3B60     		str	r3, [r7]
 706:..\FreeRTOS\Source/stream_buffer.c ****     BaseType_t xShouldWrite;
 707:..\FreeRTOS\Source/stream_buffer.c ****     size_t xReturn;
 708:..\FreeRTOS\Source/stream_buffer.c **** 
 709:..\FreeRTOS\Source/stream_buffer.c ****     if( xSpace == ( size_t ) 0 )
 1191              		.loc 1 709 0
 1192 000e 3B68     		ldr	r3, [r7]
 1193 0010 002B     		cmp	r3, #0
 1194 0012 02D1     		bne	.L106
 710:..\FreeRTOS\Source/stream_buffer.c ****     {
 711:..\FreeRTOS\Source/stream_buffer.c ****         /* Doesn't matter if this is a stream buffer or a message buffer, there
 712:..\FreeRTOS\Source/stream_buffer.c ****          * is no space to write. */
 713:..\FreeRTOS\Source/stream_buffer.c ****         xShouldWrite = pdFALSE;
 1195              		.loc 1 713 0
 1196 0014 0023     		movs	r3, #0
 1197 0016 7B61     		str	r3, [r7, #20]
 1198 0018 1DE0     		b	.L107
 1199              	.L106:
 714:..\FreeRTOS\Source/stream_buffer.c ****     }
 715:..\FreeRTOS\Source/stream_buffer.c ****     else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 1200              		.loc 1 715 0
 1201 001a FB68     		ldr	r3, [r7, #12]
 1202 001c 1B7F     		ldrb	r3, [r3, #28]
 1203 001e 1A00     		movs	r2, r3
 1204 0020 0123     		movs	r3, #1
 1205 0022 1340     		ands	r3, r2
 1206 0024 08D1     		bne	.L108
 716:..\FreeRTOS\Source/stream_buffer.c ****     {
 717:..\FreeRTOS\Source/stream_buffer.c ****         /* This is a stream buffer, as opposed to a message buffer, so writing a
 718:..\FreeRTOS\Source/stream_buffer.c ****          * stream of bytes rather than discrete messages.  Write as many bytes as
 719:..\FreeRTOS\Source/stream_buffer.c ****          * possible. */
 720:..\FreeRTOS\Source/stream_buffer.c ****         xShouldWrite = pdTRUE;
 1207              		.loc 1 720 0
 1208 0026 0123     		movs	r3, #1
 1209 0028 7B61     		str	r3, [r7, #20]
 721:..\FreeRTOS\Source/stream_buffer.c ****         xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 1210              		.loc 1 721 0
 1211 002a 7A68     		ldr	r2, [r7, #4]
 1212 002c 3B68     		ldr	r3, [r7]
 1213 002e 9342     		cmp	r3, r2
 1214 0030 00D9     		bls	.L109
 1215 0032 1300     		movs	r3, r2
 1216              	.L109:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 35


 1217 0034 7B60     		str	r3, [r7, #4]
 1218 0036 0EE0     		b	.L107
 1219              	.L108:
 722:..\FreeRTOS\Source/stream_buffer.c ****     }
 723:..\FreeRTOS\Source/stream_buffer.c ****     else if( xSpace >= xRequiredSpace )
 1220              		.loc 1 723 0
 1221 0038 3A68     		ldr	r2, [r7]
 1222 003a 3B6A     		ldr	r3, [r7, #32]
 1223 003c 9A42     		cmp	r2, r3
 1224 003e 08D3     		bcc	.L110
 724:..\FreeRTOS\Source/stream_buffer.c ****     {
 725:..\FreeRTOS\Source/stream_buffer.c ****         /* This is a message buffer, as opposed to a stream buffer, and there
 726:..\FreeRTOS\Source/stream_buffer.c ****          * is enough space to write both the message length and the message itself
 727:..\FreeRTOS\Source/stream_buffer.c ****          * into the buffer.  Start by writing the length of the data, the data
 728:..\FreeRTOS\Source/stream_buffer.c ****          * itself will be written later in this function. */
 729:..\FreeRTOS\Source/stream_buffer.c ****         xShouldWrite = pdTRUE;
 1225              		.loc 1 729 0
 1226 0040 0123     		movs	r3, #1
 1227 0042 7B61     		str	r3, [r7, #20]
 730:..\FreeRTOS\Source/stream_buffer.c ****         ( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), 
 1228              		.loc 1 730 0
 1229 0044 391D     		adds	r1, r7, #4
 1230 0046 FB68     		ldr	r3, [r7, #12]
 1231 0048 0422     		movs	r2, #4
 1232 004a 1800     		movs	r0, r3
 1233 004c FFF7FEFF 		bl	prvWriteBytesToBuffer
 1234 0050 01E0     		b	.L107
 1235              	.L110:
 731:..\FreeRTOS\Source/stream_buffer.c ****     }
 732:..\FreeRTOS\Source/stream_buffer.c ****     else
 733:..\FreeRTOS\Source/stream_buffer.c ****     {
 734:..\FreeRTOS\Source/stream_buffer.c ****         /* There is space available, but not enough space. */
 735:..\FreeRTOS\Source/stream_buffer.c ****         xShouldWrite = pdFALSE;
 1236              		.loc 1 735 0
 1237 0052 0023     		movs	r3, #0
 1238 0054 7B61     		str	r3, [r7, #20]
 1239              	.L107:
 736:..\FreeRTOS\Source/stream_buffer.c ****     }
 737:..\FreeRTOS\Source/stream_buffer.c **** 
 738:..\FreeRTOS\Source/stream_buffer.c ****     if( xShouldWrite != pdFALSE )
 1240              		.loc 1 738 0
 1241 0056 7B69     		ldr	r3, [r7, #20]
 1242 0058 002B     		cmp	r3, #0
 1243 005a 08D0     		beq	.L111
 739:..\FreeRTOS\Source/stream_buffer.c ****     {
 740:..\FreeRTOS\Source/stream_buffer.c ****         /* Writes the data itself. */
 741:..\FreeRTOS\Source/stream_buffer.c ****         xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthB
 1244              		.loc 1 741 0
 1245 005c 7A68     		ldr	r2, [r7, #4]
 1246 005e B968     		ldr	r1, [r7, #8]
 1247 0060 FB68     		ldr	r3, [r7, #12]
 1248 0062 1800     		movs	r0, r3
 1249 0064 FFF7FEFF 		bl	prvWriteBytesToBuffer
 1250 0068 0300     		movs	r3, r0
 1251 006a 3B61     		str	r3, [r7, #16]
 1252 006c 01E0     		b	.L112
 1253              	.L111:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 36


 742:..\FreeRTOS\Source/stream_buffer.c ****     }
 743:..\FreeRTOS\Source/stream_buffer.c ****     else
 744:..\FreeRTOS\Source/stream_buffer.c ****     {
 745:..\FreeRTOS\Source/stream_buffer.c ****         xReturn = 0;
 1254              		.loc 1 745 0
 1255 006e 0023     		movs	r3, #0
 1256 0070 3B61     		str	r3, [r7, #16]
 1257              	.L112:
 746:..\FreeRTOS\Source/stream_buffer.c ****     }
 747:..\FreeRTOS\Source/stream_buffer.c **** 
 748:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 1258              		.loc 1 748 0
 1259 0072 3B69     		ldr	r3, [r7, #16]
 749:..\FreeRTOS\Source/stream_buffer.c **** }
 1260              		.loc 1 749 0
 1261 0074 1800     		movs	r0, r3
 1262 0076 BD46     		mov	sp, r7
 1263 0078 06B0     		add	sp, sp, #24
 1264              		@ sp needed
 1265 007a 80BD     		pop	{r7, pc}
 1266              		.cfi_endproc
 1267              	.LFE9:
 1268              		.size	prvWriteMessageToBuffer, .-prvWriteMessageToBuffer
 1269              		.section	.text.xStreamBufferReceive,"ax",%progbits
 1270              		.align	2
 1271              		.global	xStreamBufferReceive
 1272              		.code	16
 1273              		.thumb_func
 1274              		.type	xStreamBufferReceive, %function
 1275              	xStreamBufferReceive:
 1276              	.LFB10:
 750:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 751:..\FreeRTOS\Source/stream_buffer.c **** 
 752:..\FreeRTOS\Source/stream_buffer.c **** size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
 753:..\FreeRTOS\Source/stream_buffer.c ****                              void * pvRxData,
 754:..\FreeRTOS\Source/stream_buffer.c ****                              size_t xBufferLengthBytes,
 755:..\FreeRTOS\Source/stream_buffer.c ****                              TickType_t xTicksToWait )
 756:..\FreeRTOS\Source/stream_buffer.c **** {
 1277              		.loc 1 756 0
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 32
 1280              		@ frame_needed = 1, uses_anonymous_args = 0
 1281 0000 90B5     		push	{r4, r7, lr}
 1282              		.cfi_def_cfa_offset 12
 1283              		.cfi_offset 4, -12
 1284              		.cfi_offset 7, -8
 1285              		.cfi_offset 14, -4
 1286 0002 8BB0     		sub	sp, sp, #44
 1287              		.cfi_def_cfa_offset 56
 1288 0004 02AF     		add	r7, sp, #8
 1289              		.cfi_def_cfa 7, 48
 1290 0006 F860     		str	r0, [r7, #12]
 1291 0008 B960     		str	r1, [r7, #8]
 1292 000a 7A60     		str	r2, [r7, #4]
 1293 000c 3B60     		str	r3, [r7]
 757:..\FreeRTOS\Source/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1294              		.loc 1 757 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 37


 1295 000e FB68     		ldr	r3, [r7, #12]
 1296 0010 3B61     		str	r3, [r7, #16]
 758:..\FreeRTOS\Source/stream_buffer.c ****     size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1297              		.loc 1 758 0
 1298 0012 0023     		movs	r3, #0
 1299 0014 FB61     		str	r3, [r7, #28]
 759:..\FreeRTOS\Source/stream_buffer.c **** 
 760:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pvRxData );
 1300              		.loc 1 760 0
 1301 0016 404B     		ldr	r3, .L129
 1302 0018 1B88     		ldrh	r3, [r3]
 1303 001a 002B     		cmp	r3, #0
 1304 001c 01D1     		bne	.L115
 1305              		.loc 1 760 0 is_stmt 0 discriminator 1
 1306              		.syntax divided
 1307              	@ 760 "..\FreeRTOS\Source\stream_buffer.c" 1
 1308 001e 72B6     		 cpsid i 
 1309              	@ 0 "" 2
 1310              		.thumb
 1311              		.syntax unified
 1312              	.L116:
 1313 0020 FEE7     		b	.L116
 1314              	.L115:
 761:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 1315              		.loc 1 761 0 is_stmt 1
 1316 0022 3D4B     		ldr	r3, .L129
 1317 0024 1B88     		ldrh	r3, [r3]
 1318 0026 002B     		cmp	r3, #0
 1319 0028 01D1     		bne	.L117
 1320              		.loc 1 761 0 is_stmt 0 discriminator 1
 1321              		.syntax divided
 1322              	@ 761 "..\FreeRTOS\Source\stream_buffer.c" 1
 1323 002a 72B6     		 cpsid i 
 1324              	@ 0 "" 2
 1325              		.thumb
 1326              		.syntax unified
 1327              	.L118:
 1328              		.loc 1 761 0 discriminator 2
 1329 002c FEE7     		b	.L118
 1330              	.L117:
 762:..\FreeRTOS\Source/stream_buffer.c **** 
 763:..\FreeRTOS\Source/stream_buffer.c ****     /* This receive function is used by both message buffers, which store
 764:..\FreeRTOS\Source/stream_buffer.c ****      * discrete messages, and stream buffers, which store a continuous stream of
 765:..\FreeRTOS\Source/stream_buffer.c ****      * bytes.  Discrete messages include an additional
 766:..\FreeRTOS\Source/stream_buffer.c ****      * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
 767:..\FreeRTOS\Source/stream_buffer.c ****      * message. */
 768:..\FreeRTOS\Source/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1331              		.loc 1 768 0 is_stmt 1
 1332 002e 3B69     		ldr	r3, [r7, #16]
 1333 0030 1B7F     		ldrb	r3, [r3, #28]
 1334 0032 1A00     		movs	r2, r3
 1335 0034 0123     		movs	r3, #1
 1336 0036 1340     		ands	r3, r2
 1337 0038 02D0     		beq	.L119
 769:..\FreeRTOS\Source/stream_buffer.c ****     {
 770:..\FreeRTOS\Source/stream_buffer.c ****         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1338              		.loc 1 770 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 38


 1339 003a 0423     		movs	r3, #4
 1340 003c 7B61     		str	r3, [r7, #20]
 1341 003e 01E0     		b	.L120
 1342              	.L119:
 771:..\FreeRTOS\Source/stream_buffer.c ****     }
 772:..\FreeRTOS\Source/stream_buffer.c ****     else
 773:..\FreeRTOS\Source/stream_buffer.c ****     {
 774:..\FreeRTOS\Source/stream_buffer.c ****         xBytesToStoreMessageLength = 0;
 1343              		.loc 1 774 0
 1344 0040 0023     		movs	r3, #0
 1345 0042 7B61     		str	r3, [r7, #20]
 1346              	.L120:
 775:..\FreeRTOS\Source/stream_buffer.c ****     }
 776:..\FreeRTOS\Source/stream_buffer.c **** 
 777:..\FreeRTOS\Source/stream_buffer.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 1347              		.loc 1 777 0
 1348 0044 3B68     		ldr	r3, [r7]
 1349 0046 002B     		cmp	r3, #0
 1350 0048 34D0     		beq	.L121
 778:..\FreeRTOS\Source/stream_buffer.c ****     {
 779:..\FreeRTOS\Source/stream_buffer.c ****         /* Checking if there is data and clearing the notification state must be
 780:..\FreeRTOS\Source/stream_buffer.c ****          * performed atomically. */
 781:..\FreeRTOS\Source/stream_buffer.c ****         taskENTER_CRITICAL();
 1351              		.loc 1 781 0
 1352 004a FFF7FEFF 		bl	vPortEnterCritical
 782:..\FreeRTOS\Source/stream_buffer.c ****         {
 783:..\FreeRTOS\Source/stream_buffer.c ****             xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1353              		.loc 1 783 0
 1354 004e 3B69     		ldr	r3, [r7, #16]
 1355 0050 1800     		movs	r0, r3
 1356 0052 FFF7FEFF 		bl	prvBytesInBuffer
 1357 0056 0300     		movs	r3, r0
 1358 0058 BB61     		str	r3, [r7, #24]
 784:..\FreeRTOS\Source/stream_buffer.c **** 
 785:..\FreeRTOS\Source/stream_buffer.c ****             /* If this function was invoked by a message buffer read then
 786:..\FreeRTOS\Source/stream_buffer.c ****              * xBytesToStoreMessageLength holds the number of bytes used to hold
 787:..\FreeRTOS\Source/stream_buffer.c ****              * the length of the next discrete message.  If this function was
 788:..\FreeRTOS\Source/stream_buffer.c ****              * invoked by a stream buffer read then xBytesToStoreMessageLength will
 789:..\FreeRTOS\Source/stream_buffer.c ****              * be 0. */
 790:..\FreeRTOS\Source/stream_buffer.c ****             if( xBytesAvailable <= xBytesToStoreMessageLength )
 1359              		.loc 1 790 0
 1360 005a BA69     		ldr	r2, [r7, #24]
 1361 005c 7B69     		ldr	r3, [r7, #20]
 1362 005e 9A42     		cmp	r2, r3
 1363 0060 10D8     		bhi	.L122
 791:..\FreeRTOS\Source/stream_buffer.c ****             {
 792:..\FreeRTOS\Source/stream_buffer.c ****                 /* Clear notification state as going to wait for data. */
 793:..\FreeRTOS\Source/stream_buffer.c ****                 ( void ) xTaskNotifyStateClear( NULL );
 1364              		.loc 1 793 0
 1365 0062 0021     		movs	r1, #0
 1366 0064 0020     		movs	r0, #0
 1367 0066 FFF7FEFF 		bl	xTaskGenericNotifyStateClear
 794:..\FreeRTOS\Source/stream_buffer.c **** 
 795:..\FreeRTOS\Source/stream_buffer.c ****                 /* Should only be one reader. */
 796:..\FreeRTOS\Source/stream_buffer.c ****                 configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 1368              		.loc 1 796 0
 1369 006a 2B4B     		ldr	r3, .L129
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 39


 1370 006c 1B88     		ldrh	r3, [r3]
 1371 006e 002B     		cmp	r3, #0
 1372 0070 01D1     		bne	.L123
 1373              		.loc 1 796 0 is_stmt 0 discriminator 1
 1374              		.syntax divided
 1375              	@ 796 "..\FreeRTOS\Source\stream_buffer.c" 1
 1376 0072 72B6     		 cpsid i 
 1377              	@ 0 "" 2
 1378              		.thumb
 1379              		.syntax unified
 1380              	.L124:
 1381              		.loc 1 796 0 discriminator 3
 1382 0074 FEE7     		b	.L124
 1383              	.L123:
 1384              		.loc 1 796 0 discriminator 2
 1385 0076 3B69     		ldr	r3, [r7, #16]
 1386 0078 1B69     		ldr	r3, [r3, #16]
 797:..\FreeRTOS\Source/stream_buffer.c ****                 pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 1387              		.loc 1 797 0 is_stmt 1 discriminator 2
 1388 007a FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1389 007e 0200     		movs	r2, r0
 1390 0080 3B69     		ldr	r3, [r7, #16]
 1391 0082 1A61     		str	r2, [r3, #16]
 1392              	.L122:
 798:..\FreeRTOS\Source/stream_buffer.c ****             }
 799:..\FreeRTOS\Source/stream_buffer.c ****             else
 800:..\FreeRTOS\Source/stream_buffer.c ****             {
 801:..\FreeRTOS\Source/stream_buffer.c ****                 mtCOVERAGE_TEST_MARKER();
 802:..\FreeRTOS\Source/stream_buffer.c ****             }
 803:..\FreeRTOS\Source/stream_buffer.c ****         }
 804:..\FreeRTOS\Source/stream_buffer.c ****         taskEXIT_CRITICAL();
 1393              		.loc 1 804 0
 1394 0084 FFF7FEFF 		bl	vPortExitCritical
 805:..\FreeRTOS\Source/stream_buffer.c **** 
 806:..\FreeRTOS\Source/stream_buffer.c ****         if( xBytesAvailable <= xBytesToStoreMessageLength )
 1395              		.loc 1 806 0
 1396 0088 BA69     		ldr	r2, [r7, #24]
 1397 008a 7B69     		ldr	r3, [r7, #20]
 1398 008c 9A42     		cmp	r2, r3
 1399 008e 17D8     		bhi	.L125
 807:..\FreeRTOS\Source/stream_buffer.c ****         {
 808:..\FreeRTOS\Source/stream_buffer.c ****             /* Wait for data to be available. */
 809:..\FreeRTOS\Source/stream_buffer.c ****             traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
 810:..\FreeRTOS\Source/stream_buffer.c ****             ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 1400              		.loc 1 810 0
 1401 0090 3B68     		ldr	r3, [r7]
 1402 0092 0093     		str	r3, [sp]
 1403 0094 0023     		movs	r3, #0
 1404 0096 0022     		movs	r2, #0
 1405 0098 0021     		movs	r1, #0
 1406 009a 0020     		movs	r0, #0
 1407 009c FFF7FEFF 		bl	xTaskGenericNotifyWait
 811:..\FreeRTOS\Source/stream_buffer.c ****             pxStreamBuffer->xTaskWaitingToReceive = NULL;
 1408              		.loc 1 811 0
 1409 00a0 3B69     		ldr	r3, [r7, #16]
 1410 00a2 0022     		movs	r2, #0
 1411 00a4 1A61     		str	r2, [r3, #16]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 40


 812:..\FreeRTOS\Source/stream_buffer.c **** 
 813:..\FreeRTOS\Source/stream_buffer.c ****             /* Recheck the data available after blocking. */
 814:..\FreeRTOS\Source/stream_buffer.c ****             xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1412              		.loc 1 814 0
 1413 00a6 3B69     		ldr	r3, [r7, #16]
 1414 00a8 1800     		movs	r0, r3
 1415 00aa FFF7FEFF 		bl	prvBytesInBuffer
 1416 00ae 0300     		movs	r3, r0
 1417 00b0 BB61     		str	r3, [r7, #24]
 1418 00b2 05E0     		b	.L125
 1419              	.L121:
 815:..\FreeRTOS\Source/stream_buffer.c ****         }
 816:..\FreeRTOS\Source/stream_buffer.c ****         else
 817:..\FreeRTOS\Source/stream_buffer.c ****         {
 818:..\FreeRTOS\Source/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 819:..\FreeRTOS\Source/stream_buffer.c ****         }
 820:..\FreeRTOS\Source/stream_buffer.c ****     }
 821:..\FreeRTOS\Source/stream_buffer.c ****     else
 822:..\FreeRTOS\Source/stream_buffer.c ****     {
 823:..\FreeRTOS\Source/stream_buffer.c ****         xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1420              		.loc 1 823 0
 1421 00b4 3B69     		ldr	r3, [r7, #16]
 1422 00b6 1800     		movs	r0, r3
 1423 00b8 FFF7FEFF 		bl	prvBytesInBuffer
 1424 00bc 0300     		movs	r3, r0
 1425 00be BB61     		str	r3, [r7, #24]
 1426              	.L125:
 824:..\FreeRTOS\Source/stream_buffer.c ****     }
 825:..\FreeRTOS\Source/stream_buffer.c **** 
 826:..\FreeRTOS\Source/stream_buffer.c ****     /* Whether receiving a discrete message (where xBytesToStoreMessageLength
 827:..\FreeRTOS\Source/stream_buffer.c ****      * holds the number of bytes used to store the message length) or a stream of
 828:..\FreeRTOS\Source/stream_buffer.c ****      * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
 829:..\FreeRTOS\Source/stream_buffer.c ****      * available must be greater than xBytesToStoreMessageLength to be able to
 830:..\FreeRTOS\Source/stream_buffer.c ****      * read bytes from the buffer. */
 831:..\FreeRTOS\Source/stream_buffer.c ****     if( xBytesAvailable > xBytesToStoreMessageLength )
 1427              		.loc 1 831 0
 1428 00c0 BA69     		ldr	r2, [r7, #24]
 1429 00c2 7B69     		ldr	r3, [r7, #20]
 1430 00c4 9A42     		cmp	r2, r3
 1431 00c6 21D9     		bls	.L126
 832:..\FreeRTOS\Source/stream_buffer.c ****     {
 833:..\FreeRTOS\Source/stream_buffer.c ****         xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, x
 1432              		.loc 1 833 0
 1433 00c8 BC69     		ldr	r4, [r7, #24]
 1434 00ca 7A68     		ldr	r2, [r7, #4]
 1435 00cc B968     		ldr	r1, [r7, #8]
 1436 00ce 3869     		ldr	r0, [r7, #16]
 1437 00d0 7B69     		ldr	r3, [r7, #20]
 1438 00d2 0093     		str	r3, [sp]
 1439 00d4 2300     		movs	r3, r4
 1440 00d6 FFF7FEFF 		bl	prvReadMessageFromBuffer
 1441 00da 0300     		movs	r3, r0
 1442 00dc FB61     		str	r3, [r7, #28]
 834:..\FreeRTOS\Source/stream_buffer.c **** 
 835:..\FreeRTOS\Source/stream_buffer.c ****         /* Was a task waiting for space in the buffer? */
 836:..\FreeRTOS\Source/stream_buffer.c ****         if( xReceivedLength != ( size_t ) 0 )
 1443              		.loc 1 836 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 41


 1444 00de FB69     		ldr	r3, [r7, #28]
 1445 00e0 002B     		cmp	r3, #0
 1446 00e2 13D0     		beq	.L126
 837:..\FreeRTOS\Source/stream_buffer.c ****         {
 838:..\FreeRTOS\Source/stream_buffer.c ****             traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
 839:..\FreeRTOS\Source/stream_buffer.c ****             sbRECEIVE_COMPLETED( pxStreamBuffer );
 1447              		.loc 1 839 0
 1448 00e4 FFF7FEFF 		bl	vTaskSuspendAll
 1449 00e8 3B69     		ldr	r3, [r7, #16]
 1450 00ea 5B69     		ldr	r3, [r3, #20]
 1451 00ec 002B     		cmp	r3, #0
 1452 00ee 0BD0     		beq	.L127
 1453              		.loc 1 839 0 is_stmt 0 discriminator 1
 1454 00f0 3B69     		ldr	r3, [r7, #16]
 1455 00f2 5869     		ldr	r0, [r3, #20]
 1456 00f4 0023     		movs	r3, #0
 1457 00f6 0093     		str	r3, [sp]
 1458 00f8 0023     		movs	r3, #0
 1459 00fa 0022     		movs	r2, #0
 1460 00fc 0021     		movs	r1, #0
 1461 00fe FFF7FEFF 		bl	xTaskGenericNotify
 1462 0102 3B69     		ldr	r3, [r7, #16]
 1463 0104 0022     		movs	r2, #0
 1464 0106 5A61     		str	r2, [r3, #20]
 1465              	.L127:
 1466              		.loc 1 839 0 discriminator 3
 1467 0108 FFF7FEFF 		bl	xTaskResumeAll
 1468              	.L126:
 840:..\FreeRTOS\Source/stream_buffer.c ****         }
 841:..\FreeRTOS\Source/stream_buffer.c ****         else
 842:..\FreeRTOS\Source/stream_buffer.c ****         {
 843:..\FreeRTOS\Source/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 844:..\FreeRTOS\Source/stream_buffer.c ****         }
 845:..\FreeRTOS\Source/stream_buffer.c ****     }
 846:..\FreeRTOS\Source/stream_buffer.c ****     else
 847:..\FreeRTOS\Source/stream_buffer.c ****     {
 848:..\FreeRTOS\Source/stream_buffer.c ****         traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
 849:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 850:..\FreeRTOS\Source/stream_buffer.c ****     }
 851:..\FreeRTOS\Source/stream_buffer.c **** 
 852:..\FreeRTOS\Source/stream_buffer.c ****     return xReceivedLength;
 1469              		.loc 1 852 0 is_stmt 1
 1470 010c FB69     		ldr	r3, [r7, #28]
 853:..\FreeRTOS\Source/stream_buffer.c **** }
 1471              		.loc 1 853 0
 1472 010e 1800     		movs	r0, r3
 1473 0110 BD46     		mov	sp, r7
 1474 0112 09B0     		add	sp, sp, #36
 1475              		@ sp needed
 1476 0114 90BD     		pop	{r4, r7, pc}
 1477              	.L130:
 1478 0116 C046     		.align	2
 1479              	.L129:
 1480 0118 00000000 		.word	x
 1481              		.cfi_endproc
 1482              	.LFE10:
 1483              		.size	xStreamBufferReceive, .-xStreamBufferReceive
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 42


 1484              		.section	.text.xStreamBufferNextMessageLengthBytes,"ax",%progbits
 1485              		.align	2
 1486              		.global	xStreamBufferNextMessageLengthBytes
 1487              		.code	16
 1488              		.thumb_func
 1489              		.type	xStreamBufferNextMessageLengthBytes, %function
 1490              	xStreamBufferNextMessageLengthBytes:
 1491              	.LFB11:
 854:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 855:..\FreeRTOS\Source/stream_buffer.c **** 
 856:..\FreeRTOS\Source/stream_buffer.c **** size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
 857:..\FreeRTOS\Source/stream_buffer.c **** {
 1492              		.loc 1 857 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 32
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496 0000 80B5     		push	{r7, lr}
 1497              		.cfi_def_cfa_offset 8
 1498              		.cfi_offset 7, -8
 1499              		.cfi_offset 14, -4
 1500 0002 88B0     		sub	sp, sp, #32
 1501              		.cfi_def_cfa_offset 40
 1502 0004 00AF     		add	r7, sp, #0
 1503              		.cfi_def_cfa_register 7
 1504 0006 7860     		str	r0, [r7, #4]
 858:..\FreeRTOS\Source/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1505              		.loc 1 858 0
 1506 0008 7B68     		ldr	r3, [r7, #4]
 1507 000a BB61     		str	r3, [r7, #24]
 859:..\FreeRTOS\Source/stream_buffer.c ****     size_t xReturn, xBytesAvailable, xOriginalTail;
 860:..\FreeRTOS\Source/stream_buffer.c ****     configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;
 861:..\FreeRTOS\Source/stream_buffer.c **** 
 862:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 1508              		.loc 1 862 0
 1509 000c 1A4B     		ldr	r3, .L141
 1510 000e 1B88     		ldrh	r3, [r3]
 1511 0010 002B     		cmp	r3, #0
 1512 0012 01D1     		bne	.L132
 1513              		.loc 1 862 0 is_stmt 0 discriminator 1
 1514              		.syntax divided
 1515              	@ 862 "..\FreeRTOS\Source\stream_buffer.c" 1
 1516 0014 72B6     		 cpsid i 
 1517              	@ 0 "" 2
 1518              		.thumb
 1519              		.syntax unified
 1520              	.L133:
 1521 0016 FEE7     		b	.L133
 1522              	.L132:
 863:..\FreeRTOS\Source/stream_buffer.c **** 
 864:..\FreeRTOS\Source/stream_buffer.c ****     /* Ensure the stream buffer is being used as a message buffer. */
 865:..\FreeRTOS\Source/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1523              		.loc 1 865 0 is_stmt 1
 1524 0018 BB69     		ldr	r3, [r7, #24]
 1525 001a 1B7F     		ldrb	r3, [r3, #28]
 1526 001c 1A00     		movs	r2, r3
 1527 001e 0123     		movs	r3, #1
 1528 0020 1340     		ands	r3, r2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 43


 1529 0022 21D0     		beq	.L134
 866:..\FreeRTOS\Source/stream_buffer.c ****     {
 867:..\FreeRTOS\Source/stream_buffer.c ****         xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1530              		.loc 1 867 0
 1531 0024 BB69     		ldr	r3, [r7, #24]
 1532 0026 1800     		movs	r0, r3
 1533 0028 FFF7FEFF 		bl	prvBytesInBuffer
 1534 002c 0300     		movs	r3, r0
 1535 002e 7B61     		str	r3, [r7, #20]
 868:..\FreeRTOS\Source/stream_buffer.c **** 
 869:..\FreeRTOS\Source/stream_buffer.c ****         if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 1536              		.loc 1 869 0
 1537 0030 7B69     		ldr	r3, [r7, #20]
 1538 0032 042B     		cmp	r3, #4
 1539 0034 0FD9     		bls	.L135
 870:..\FreeRTOS\Source/stream_buffer.c ****         {
 871:..\FreeRTOS\Source/stream_buffer.c ****             /* The number of bytes available is greater than the number of bytes
 872:..\FreeRTOS\Source/stream_buffer.c ****              * required to hold the length of the next message, so another message
 873:..\FreeRTOS\Source/stream_buffer.c ****              * is available.  Return its length without removing the length bytes
 874:..\FreeRTOS\Source/stream_buffer.c ****              * from the buffer.  A copy of the tail is stored so the buffer can be
 875:..\FreeRTOS\Source/stream_buffer.c ****              * returned to its prior state as the message is not actually being
 876:..\FreeRTOS\Source/stream_buffer.c ****              * removed from the buffer. */
 877:..\FreeRTOS\Source/stream_buffer.c ****             xOriginalTail = pxStreamBuffer->xTail;
 1540              		.loc 1 877 0
 1541 0036 BB69     		ldr	r3, [r7, #24]
 1542 0038 1B68     		ldr	r3, [r3]
 1543 003a 3B61     		str	r3, [r7, #16]
 878:..\FreeRTOS\Source/stream_buffer.c ****             ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO
 1544              		.loc 1 878 0
 1545 003c 7B69     		ldr	r3, [r7, #20]
 1546 003e 0C22     		movs	r2, #12
 1547 0040 B918     		adds	r1, r7, r2
 1548 0042 B869     		ldr	r0, [r7, #24]
 1549 0044 0422     		movs	r2, #4
 1550 0046 FFF7FEFF 		bl	prvReadBytesFromBuffer
 879:..\FreeRTOS\Source/stream_buffer.c ****             xReturn = ( size_t ) xTempReturn;
 1551              		.loc 1 879 0
 1552 004a FB68     		ldr	r3, [r7, #12]
 1553 004c FB61     		str	r3, [r7, #28]
 880:..\FreeRTOS\Source/stream_buffer.c ****             pxStreamBuffer->xTail = xOriginalTail;
 1554              		.loc 1 880 0
 1555 004e BB69     		ldr	r3, [r7, #24]
 1556 0050 3A69     		ldr	r2, [r7, #16]
 1557 0052 1A60     		str	r2, [r3]
 1558 0054 0AE0     		b	.L139
 1559              	.L135:
 881:..\FreeRTOS\Source/stream_buffer.c ****         }
 882:..\FreeRTOS\Source/stream_buffer.c ****         else
 883:..\FreeRTOS\Source/stream_buffer.c ****         {
 884:..\FreeRTOS\Source/stream_buffer.c ****             /* The minimum amount of bytes in a message buffer is
 885:..\FreeRTOS\Source/stream_buffer.c ****              * ( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
 886:..\FreeRTOS\Source/stream_buffer.c ****              * less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
 887:..\FreeRTOS\Source/stream_buffer.c ****              * value is 0. */
 888:..\FreeRTOS\Source/stream_buffer.c ****             configASSERT( xBytesAvailable == 0 );
 1560              		.loc 1 888 0
 1561 0056 084B     		ldr	r3, .L141
 1562 0058 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 44


 1563 005a 002B     		cmp	r3, #0
 1564 005c 01D1     		bne	.L137
 1565              		.loc 1 888 0 is_stmt 0 discriminator 1
 1566              		.syntax divided
 1567              	@ 888 "..\FreeRTOS\Source\stream_buffer.c" 1
 1568 005e 72B6     		 cpsid i 
 1569              	@ 0 "" 2
 1570              		.thumb
 1571              		.syntax unified
 1572              	.L138:
 1573              		.loc 1 888 0 discriminator 2
 1574 0060 FEE7     		b	.L138
 1575              	.L137:
 889:..\FreeRTOS\Source/stream_buffer.c ****             xReturn = 0;
 1576              		.loc 1 889 0 is_stmt 1
 1577 0062 0023     		movs	r3, #0
 1578 0064 FB61     		str	r3, [r7, #28]
 1579 0066 01E0     		b	.L139
 1580              	.L134:
 890:..\FreeRTOS\Source/stream_buffer.c ****         }
 891:..\FreeRTOS\Source/stream_buffer.c ****     }
 892:..\FreeRTOS\Source/stream_buffer.c ****     else
 893:..\FreeRTOS\Source/stream_buffer.c ****     {
 894:..\FreeRTOS\Source/stream_buffer.c ****         xReturn = 0;
 1581              		.loc 1 894 0
 1582 0068 0023     		movs	r3, #0
 1583 006a FB61     		str	r3, [r7, #28]
 1584              	.L139:
 895:..\FreeRTOS\Source/stream_buffer.c ****     }
 896:..\FreeRTOS\Source/stream_buffer.c **** 
 897:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 1585              		.loc 1 897 0
 1586 006c FB69     		ldr	r3, [r7, #28]
 898:..\FreeRTOS\Source/stream_buffer.c **** }
 1587              		.loc 1 898 0
 1588 006e 1800     		movs	r0, r3
 1589 0070 BD46     		mov	sp, r7
 1590 0072 08B0     		add	sp, sp, #32
 1591              		@ sp needed
 1592 0074 80BD     		pop	{r7, pc}
 1593              	.L142:
 1594 0076 C046     		.align	2
 1595              	.L141:
 1596 0078 00000000 		.word	x
 1597              		.cfi_endproc
 1598              	.LFE11:
 1599              		.size	xStreamBufferNextMessageLengthBytes, .-xStreamBufferNextMessageLengthBytes
 1600              		.section	.text.xStreamBufferReceiveFromISR,"ax",%progbits
 1601              		.align	2
 1602              		.global	xStreamBufferReceiveFromISR
 1603              		.code	16
 1604              		.thumb_func
 1605              		.type	xStreamBufferReceiveFromISR, %function
 1606              	xStreamBufferReceiveFromISR:
 1607              	.LFB12:
 899:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 900:..\FreeRTOS\Source/stream_buffer.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 45


 901:..\FreeRTOS\Source/stream_buffer.c **** size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
 902:..\FreeRTOS\Source/stream_buffer.c ****                                     void * pvRxData,
 903:..\FreeRTOS\Source/stream_buffer.c ****                                     size_t xBufferLengthBytes,
 904:..\FreeRTOS\Source/stream_buffer.c ****                                     BaseType_t * const pxHigherPriorityTaskWoken )
 905:..\FreeRTOS\Source/stream_buffer.c **** {
 1608              		.loc 1 905 0
 1609              		.cfi_startproc
 1610              		@ args = 0, pretend = 0, frame = 40
 1611              		@ frame_needed = 1, uses_anonymous_args = 0
 1612 0000 90B5     		push	{r4, r7, lr}
 1613              		.cfi_def_cfa_offset 12
 1614              		.cfi_offset 4, -12
 1615              		.cfi_offset 7, -8
 1616              		.cfi_offset 14, -4
 1617 0002 8DB0     		sub	sp, sp, #52
 1618              		.cfi_def_cfa_offset 64
 1619 0004 02AF     		add	r7, sp, #8
 1620              		.cfi_def_cfa 7, 56
 1621 0006 F860     		str	r0, [r7, #12]
 1622 0008 B960     		str	r1, [r7, #8]
 1623 000a 7A60     		str	r2, [r7, #4]
 1624 000c 3B60     		str	r3, [r7]
 906:..\FreeRTOS\Source/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1625              		.loc 1 906 0
 1626 000e FB68     		ldr	r3, [r7, #12]
 1627 0010 FB61     		str	r3, [r7, #28]
 907:..\FreeRTOS\Source/stream_buffer.c ****     size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1628              		.loc 1 907 0
 1629 0012 0023     		movs	r3, #0
 1630 0014 7B62     		str	r3, [r7, #36]
 908:..\FreeRTOS\Source/stream_buffer.c **** 
 909:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pvRxData );
 1631              		.loc 1 909 0
 1632 0016 274B     		ldr	r3, .L153
 1633 0018 1B88     		ldrh	r3, [r3]
 1634 001a 002B     		cmp	r3, #0
 1635 001c 01D1     		bne	.L144
 1636              		.loc 1 909 0 is_stmt 0 discriminator 1
 1637              		.syntax divided
 1638              	@ 909 "..\FreeRTOS\Source\stream_buffer.c" 1
 1639 001e 72B6     		 cpsid i 
 1640              	@ 0 "" 2
 1641              		.thumb
 1642              		.syntax unified
 1643              	.L145:
 1644 0020 FEE7     		b	.L145
 1645              	.L144:
 910:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 1646              		.loc 1 910 0 is_stmt 1
 1647 0022 244B     		ldr	r3, .L153
 1648 0024 1B88     		ldrh	r3, [r3]
 1649 0026 002B     		cmp	r3, #0
 1650 0028 01D1     		bne	.L146
 1651              		.loc 1 910 0 is_stmt 0 discriminator 1
 1652              		.syntax divided
 1653              	@ 910 "..\FreeRTOS\Source\stream_buffer.c" 1
 1654 002a 72B6     		 cpsid i 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 46


 1655              	@ 0 "" 2
 1656              		.thumb
 1657              		.syntax unified
 1658              	.L147:
 1659              		.loc 1 910 0 discriminator 2
 1660 002c FEE7     		b	.L147
 1661              	.L146:
 911:..\FreeRTOS\Source/stream_buffer.c **** 
 912:..\FreeRTOS\Source/stream_buffer.c ****     /* This receive function is used by both message buffers, which store
 913:..\FreeRTOS\Source/stream_buffer.c ****      * discrete messages, and stream buffers, which store a continuous stream of
 914:..\FreeRTOS\Source/stream_buffer.c ****      * bytes.  Discrete messages include an additional
 915:..\FreeRTOS\Source/stream_buffer.c ****      * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
 916:..\FreeRTOS\Source/stream_buffer.c ****      * message. */
 917:..\FreeRTOS\Source/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1662              		.loc 1 917 0 is_stmt 1
 1663 002e FB69     		ldr	r3, [r7, #28]
 1664 0030 1B7F     		ldrb	r3, [r3, #28]
 1665 0032 1A00     		movs	r2, r3
 1666 0034 0123     		movs	r3, #1
 1667 0036 1340     		ands	r3, r2
 1668 0038 02D0     		beq	.L148
 918:..\FreeRTOS\Source/stream_buffer.c ****     {
 919:..\FreeRTOS\Source/stream_buffer.c ****         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1669              		.loc 1 919 0
 1670 003a 0423     		movs	r3, #4
 1671 003c 3B62     		str	r3, [r7, #32]
 1672 003e 01E0     		b	.L149
 1673              	.L148:
 920:..\FreeRTOS\Source/stream_buffer.c ****     }
 921:..\FreeRTOS\Source/stream_buffer.c ****     else
 922:..\FreeRTOS\Source/stream_buffer.c ****     {
 923:..\FreeRTOS\Source/stream_buffer.c ****         xBytesToStoreMessageLength = 0;
 1674              		.loc 1 923 0
 1675 0040 0023     		movs	r3, #0
 1676 0042 3B62     		str	r3, [r7, #32]
 1677              	.L149:
 924:..\FreeRTOS\Source/stream_buffer.c ****     }
 925:..\FreeRTOS\Source/stream_buffer.c **** 
 926:..\FreeRTOS\Source/stream_buffer.c ****     xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1678              		.loc 1 926 0
 1679 0044 FB69     		ldr	r3, [r7, #28]
 1680 0046 1800     		movs	r0, r3
 1681 0048 FFF7FEFF 		bl	prvBytesInBuffer
 1682 004c 0300     		movs	r3, r0
 1683 004e BB61     		str	r3, [r7, #24]
 927:..\FreeRTOS\Source/stream_buffer.c **** 
 928:..\FreeRTOS\Source/stream_buffer.c ****     /* Whether receiving a discrete message (where xBytesToStoreMessageLength
 929:..\FreeRTOS\Source/stream_buffer.c ****      * holds the number of bytes used to store the message length) or a stream of
 930:..\FreeRTOS\Source/stream_buffer.c ****      * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
 931:..\FreeRTOS\Source/stream_buffer.c ****      * available must be greater than xBytesToStoreMessageLength to be able to
 932:..\FreeRTOS\Source/stream_buffer.c ****      * read bytes from the buffer. */
 933:..\FreeRTOS\Source/stream_buffer.c ****     if( xBytesAvailable > xBytesToStoreMessageLength )
 1684              		.loc 1 933 0
 1685 0050 BA69     		ldr	r2, [r7, #24]
 1686 0052 3B6A     		ldr	r3, [r7, #32]
 1687 0054 9A42     		cmp	r2, r3
 1688 0056 27D9     		bls	.L150
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 47


 934:..\FreeRTOS\Source/stream_buffer.c ****     {
 935:..\FreeRTOS\Source/stream_buffer.c ****         xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, x
 1689              		.loc 1 935 0
 1690 0058 BC69     		ldr	r4, [r7, #24]
 1691 005a 7A68     		ldr	r2, [r7, #4]
 1692 005c B968     		ldr	r1, [r7, #8]
 1693 005e F869     		ldr	r0, [r7, #28]
 1694 0060 3B6A     		ldr	r3, [r7, #32]
 1695 0062 0093     		str	r3, [sp]
 1696 0064 2300     		movs	r3, r4
 1697 0066 FFF7FEFF 		bl	prvReadMessageFromBuffer
 1698 006a 0300     		movs	r3, r0
 1699 006c 7B62     		str	r3, [r7, #36]
 936:..\FreeRTOS\Source/stream_buffer.c **** 
 937:..\FreeRTOS\Source/stream_buffer.c ****         /* Was a task waiting for space in the buffer? */
 938:..\FreeRTOS\Source/stream_buffer.c ****         if( xReceivedLength != ( size_t ) 0 )
 1700              		.loc 1 938 0
 1701 006e 7B6A     		ldr	r3, [r7, #36]
 1702 0070 002B     		cmp	r3, #0
 1703 0072 19D0     		beq	.L150
 1704              	.LBB4:
 939:..\FreeRTOS\Source/stream_buffer.c ****         {
 940:..\FreeRTOS\Source/stream_buffer.c ****             sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1705              		.loc 1 940 0
 1706 0074 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1707 0078 0300     		movs	r3, r0
 1708 007a 7B61     		str	r3, [r7, #20]
 1709 007c FB69     		ldr	r3, [r7, #28]
 1710 007e 5B69     		ldr	r3, [r3, #20]
 1711 0080 002B     		cmp	r3, #0
 1712 0082 0DD0     		beq	.L151
 1713              		.loc 1 940 0 is_stmt 0 discriminator 1
 1714 0084 FB69     		ldr	r3, [r7, #28]
 1715 0086 5869     		ldr	r0, [r3, #20]
 1716 0088 3B68     		ldr	r3, [r7]
 1717 008a 0193     		str	r3, [sp, #4]
 1718 008c 0023     		movs	r3, #0
 1719 008e 0093     		str	r3, [sp]
 1720 0090 0023     		movs	r3, #0
 1721 0092 0022     		movs	r2, #0
 1722 0094 0021     		movs	r1, #0
 1723 0096 FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 1724 009a FB69     		ldr	r3, [r7, #28]
 1725 009c 0022     		movs	r2, #0
 1726 009e 5A61     		str	r2, [r3, #20]
 1727              	.L151:
 1728              		.loc 1 940 0 discriminator 3
 1729 00a0 7B69     		ldr	r3, [r7, #20]
 1730 00a2 1800     		movs	r0, r3
 1731 00a4 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1732              	.L150:
 1733              	.LBE4:
 941:..\FreeRTOS\Source/stream_buffer.c ****         }
 942:..\FreeRTOS\Source/stream_buffer.c ****         else
 943:..\FreeRTOS\Source/stream_buffer.c ****         {
 944:..\FreeRTOS\Source/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 945:..\FreeRTOS\Source/stream_buffer.c ****         }
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 48


 946:..\FreeRTOS\Source/stream_buffer.c ****     }
 947:..\FreeRTOS\Source/stream_buffer.c ****     else
 948:..\FreeRTOS\Source/stream_buffer.c ****     {
 949:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 950:..\FreeRTOS\Source/stream_buffer.c ****     }
 951:..\FreeRTOS\Source/stream_buffer.c **** 
 952:..\FreeRTOS\Source/stream_buffer.c ****     traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
 953:..\FreeRTOS\Source/stream_buffer.c **** 
 954:..\FreeRTOS\Source/stream_buffer.c ****     return xReceivedLength;
 1734              		.loc 1 954 0 is_stmt 1
 1735 00a8 7B6A     		ldr	r3, [r7, #36]
 955:..\FreeRTOS\Source/stream_buffer.c **** }
 1736              		.loc 1 955 0
 1737 00aa 1800     		movs	r0, r3
 1738 00ac BD46     		mov	sp, r7
 1739 00ae 0BB0     		add	sp, sp, #44
 1740              		@ sp needed
 1741 00b0 90BD     		pop	{r4, r7, pc}
 1742              	.L154:
 1743 00b2 C046     		.align	2
 1744              	.L153:
 1745 00b4 00000000 		.word	x
 1746              		.cfi_endproc
 1747              	.LFE12:
 1748              		.size	xStreamBufferReceiveFromISR, .-xStreamBufferReceiveFromISR
 1749              		.section	.text.prvReadMessageFromBuffer,"ax",%progbits
 1750              		.align	2
 1751              		.code	16
 1752              		.thumb_func
 1753              		.type	prvReadMessageFromBuffer, %function
 1754              	prvReadMessageFromBuffer:
 1755              	.LFB13:
 956:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 957:..\FreeRTOS\Source/stream_buffer.c **** 
 958:..\FreeRTOS\Source/stream_buffer.c **** static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
 959:..\FreeRTOS\Source/stream_buffer.c ****                                         void * pvRxData,
 960:..\FreeRTOS\Source/stream_buffer.c ****                                         size_t xBufferLengthBytes,
 961:..\FreeRTOS\Source/stream_buffer.c ****                                         size_t xBytesAvailable,
 962:..\FreeRTOS\Source/stream_buffer.c ****                                         size_t xBytesToStoreMessageLength )
 963:..\FreeRTOS\Source/stream_buffer.c **** {
 1756              		.loc 1 963 0
 1757              		.cfi_startproc
 1758              		@ args = 4, pretend = 0, frame = 32
 1759              		@ frame_needed = 1, uses_anonymous_args = 0
 1760 0000 80B5     		push	{r7, lr}
 1761              		.cfi_def_cfa_offset 8
 1762              		.cfi_offset 7, -8
 1763              		.cfi_offset 14, -4
 1764 0002 88B0     		sub	sp, sp, #32
 1765              		.cfi_def_cfa_offset 40
 1766 0004 00AF     		add	r7, sp, #0
 1767              		.cfi_def_cfa_register 7
 1768 0006 F860     		str	r0, [r7, #12]
 1769 0008 B960     		str	r1, [r7, #8]
 1770 000a 7A60     		str	r2, [r7, #4]
 1771 000c 3B60     		str	r3, [r7]
 964:..\FreeRTOS\Source/stream_buffer.c ****     size_t xOriginalTail, xReceivedLength, xNextMessageLength;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 49


 965:..\FreeRTOS\Source/stream_buffer.c ****     configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;
 966:..\FreeRTOS\Source/stream_buffer.c **** 
 967:..\FreeRTOS\Source/stream_buffer.c ****     if( xBytesToStoreMessageLength != ( size_t ) 0 )
 1772              		.loc 1 967 0
 1773 000e BB6A     		ldr	r3, [r7, #40]
 1774 0010 002B     		cmp	r3, #0
 1775 0012 19D0     		beq	.L156
 968:..\FreeRTOS\Source/stream_buffer.c ****     {
 969:..\FreeRTOS\Source/stream_buffer.c ****         /* A discrete message is being received.  First receive the length
 970:..\FreeRTOS\Source/stream_buffer.c ****          * of the message.  A copy of the tail is stored so the buffer can be
 971:..\FreeRTOS\Source/stream_buffer.c ****          * returned to its prior state if the length of the message is too
 972:..\FreeRTOS\Source/stream_buffer.c ****          * large for the provided buffer. */
 973:..\FreeRTOS\Source/stream_buffer.c ****         xOriginalTail = pxStreamBuffer->xTail;
 1776              		.loc 1 973 0
 1777 0014 FB68     		ldr	r3, [r7, #12]
 1778 0016 1B68     		ldr	r3, [r3]
 1779 0018 BB61     		str	r3, [r7, #24]
 974:..\FreeRTOS\Source/stream_buffer.c ****         ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBy
 1780              		.loc 1 974 0
 1781 001a 3B68     		ldr	r3, [r7]
 1782 001c BA6A     		ldr	r2, [r7, #40]
 1783 001e 1021     		movs	r1, #16
 1784 0020 7918     		adds	r1, r7, r1
 1785 0022 F868     		ldr	r0, [r7, #12]
 1786 0024 FFF7FEFF 		bl	prvReadBytesFromBuffer
 975:..\FreeRTOS\Source/stream_buffer.c ****         xNextMessageLength = ( size_t ) xTempNextMessageLength;
 1787              		.loc 1 975 0
 1788 0028 3B69     		ldr	r3, [r7, #16]
 1789 002a FB61     		str	r3, [r7, #28]
 976:..\FreeRTOS\Source/stream_buffer.c **** 
 977:..\FreeRTOS\Source/stream_buffer.c ****         /* Reduce the number of bytes available by the number of bytes just
 978:..\FreeRTOS\Source/stream_buffer.c ****          * read out. */
 979:..\FreeRTOS\Source/stream_buffer.c ****         xBytesAvailable -= xBytesToStoreMessageLength;
 1790              		.loc 1 979 0
 1791 002c 3A68     		ldr	r2, [r7]
 1792 002e BB6A     		ldr	r3, [r7, #40]
 1793 0030 D31A     		subs	r3, r2, r3
 1794 0032 3B60     		str	r3, [r7]
 980:..\FreeRTOS\Source/stream_buffer.c **** 
 981:..\FreeRTOS\Source/stream_buffer.c ****         /* Check there is enough space in the buffer provided by the
 982:..\FreeRTOS\Source/stream_buffer.c ****          * user. */
 983:..\FreeRTOS\Source/stream_buffer.c ****         if( xNextMessageLength > xBufferLengthBytes )
 1795              		.loc 1 983 0
 1796 0034 FA69     		ldr	r2, [r7, #28]
 1797 0036 7B68     		ldr	r3, [r7, #4]
 1798 0038 9A42     		cmp	r2, r3
 1799 003a 07D9     		bls	.L157
 984:..\FreeRTOS\Source/stream_buffer.c ****         {
 985:..\FreeRTOS\Source/stream_buffer.c ****             /* The user has provided insufficient space to read the message
 986:..\FreeRTOS\Source/stream_buffer.c ****              * so return the buffer to its previous state (so the length of
 987:..\FreeRTOS\Source/stream_buffer.c ****              * the message is in the buffer again). */
 988:..\FreeRTOS\Source/stream_buffer.c ****             pxStreamBuffer->xTail = xOriginalTail;
 1800              		.loc 1 988 0
 1801 003c FB68     		ldr	r3, [r7, #12]
 1802 003e BA69     		ldr	r2, [r7, #24]
 1803 0040 1A60     		str	r2, [r3]
 989:..\FreeRTOS\Source/stream_buffer.c ****             xNextMessageLength = 0;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 50


 1804              		.loc 1 989 0
 1805 0042 0023     		movs	r3, #0
 1806 0044 FB61     		str	r3, [r7, #28]
 1807 0046 01E0     		b	.L157
 1808              	.L156:
 990:..\FreeRTOS\Source/stream_buffer.c ****         }
 991:..\FreeRTOS\Source/stream_buffer.c ****         else
 992:..\FreeRTOS\Source/stream_buffer.c ****         {
 993:..\FreeRTOS\Source/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 994:..\FreeRTOS\Source/stream_buffer.c ****         }
 995:..\FreeRTOS\Source/stream_buffer.c ****     }
 996:..\FreeRTOS\Source/stream_buffer.c ****     else
 997:..\FreeRTOS\Source/stream_buffer.c ****     {
 998:..\FreeRTOS\Source/stream_buffer.c ****         /* A stream of bytes is being received (as opposed to a discrete
 999:..\FreeRTOS\Source/stream_buffer.c ****          * message), so read as many bytes as possible. */
1000:..\FreeRTOS\Source/stream_buffer.c ****         xNextMessageLength = xBufferLengthBytes;
 1809              		.loc 1 1000 0
 1810 0048 7B68     		ldr	r3, [r7, #4]
 1811 004a FB61     		str	r3, [r7, #28]
 1812              	.L157:
1001:..\FreeRTOS\Source/stream_buffer.c ****     }
1002:..\FreeRTOS\Source/stream_buffer.c **** 
1003:..\FreeRTOS\Source/stream_buffer.c ****     /* Read the actual data. */
1004:..\FreeRTOS\Source/stream_buffer.c ****     xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageL
 1813              		.loc 1 1004 0
 1814 004c 3B68     		ldr	r3, [r7]
 1815 004e FA69     		ldr	r2, [r7, #28]
 1816 0050 B968     		ldr	r1, [r7, #8]
 1817 0052 F868     		ldr	r0, [r7, #12]
 1818 0054 FFF7FEFF 		bl	prvReadBytesFromBuffer
 1819 0058 0300     		movs	r3, r0
 1820 005a 7B61     		str	r3, [r7, #20]
1005:..\FreeRTOS\Source/stream_buffer.c **** 
1006:..\FreeRTOS\Source/stream_buffer.c ****     return xReceivedLength;
 1821              		.loc 1 1006 0
 1822 005c 7B69     		ldr	r3, [r7, #20]
1007:..\FreeRTOS\Source/stream_buffer.c **** }
 1823              		.loc 1 1007 0
 1824 005e 1800     		movs	r0, r3
 1825 0060 BD46     		mov	sp, r7
 1826 0062 08B0     		add	sp, sp, #32
 1827              		@ sp needed
 1828 0064 80BD     		pop	{r7, pc}
 1829              		.cfi_endproc
 1830              	.LFE13:
 1831              		.size	prvReadMessageFromBuffer, .-prvReadMessageFromBuffer
 1832 0066 C046     		.section	.text.xStreamBufferIsEmpty,"ax",%progbits
 1833              		.align	2
 1834              		.global	xStreamBufferIsEmpty
 1835              		.code	16
 1836              		.thumb_func
 1837              		.type	xStreamBufferIsEmpty, %function
 1838              	xStreamBufferIsEmpty:
 1839              	.LFB14:
1008:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1009:..\FreeRTOS\Source/stream_buffer.c **** 
1010:..\FreeRTOS\Source/stream_buffer.c **** BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 51


1011:..\FreeRTOS\Source/stream_buffer.c **** {
 1840              		.loc 1 1011 0
 1841              		.cfi_startproc
 1842              		@ args = 0, pretend = 0, frame = 24
 1843              		@ frame_needed = 1, uses_anonymous_args = 0
 1844 0000 80B5     		push	{r7, lr}
 1845              		.cfi_def_cfa_offset 8
 1846              		.cfi_offset 7, -8
 1847              		.cfi_offset 14, -4
 1848 0002 86B0     		sub	sp, sp, #24
 1849              		.cfi_def_cfa_offset 32
 1850 0004 00AF     		add	r7, sp, #0
 1851              		.cfi_def_cfa_register 7
 1852 0006 7860     		str	r0, [r7, #4]
1012:..\FreeRTOS\Source/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1853              		.loc 1 1012 0
 1854 0008 7B68     		ldr	r3, [r7, #4]
 1855 000a 3B61     		str	r3, [r7, #16]
1013:..\FreeRTOS\Source/stream_buffer.c ****     BaseType_t xReturn;
1014:..\FreeRTOS\Source/stream_buffer.c ****     size_t xTail;
1015:..\FreeRTOS\Source/stream_buffer.c **** 
1016:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 1856              		.loc 1 1016 0
 1857 000c 0B4B     		ldr	r3, .L165
 1858 000e 1B88     		ldrh	r3, [r3]
 1859 0010 002B     		cmp	r3, #0
 1860 0012 01D1     		bne	.L160
 1861              		.loc 1 1016 0 is_stmt 0 discriminator 1
 1862              		.syntax divided
 1863              	@ 1016 "..\FreeRTOS\Source\stream_buffer.c" 1
 1864 0014 72B6     		 cpsid i 
 1865              	@ 0 "" 2
 1866              		.thumb
 1867              		.syntax unified
 1868              	.L161:
 1869 0016 FEE7     		b	.L161
 1870              	.L160:
1017:..\FreeRTOS\Source/stream_buffer.c **** 
1018:..\FreeRTOS\Source/stream_buffer.c ****     /* True if no bytes are available. */
1019:..\FreeRTOS\Source/stream_buffer.c ****     xTail = pxStreamBuffer->xTail;
 1871              		.loc 1 1019 0 is_stmt 1
 1872 0018 3B69     		ldr	r3, [r7, #16]
 1873 001a 1B68     		ldr	r3, [r3]
 1874 001c FB60     		str	r3, [r7, #12]
1020:..\FreeRTOS\Source/stream_buffer.c **** 
1021:..\FreeRTOS\Source/stream_buffer.c ****     if( pxStreamBuffer->xHead == xTail )
 1875              		.loc 1 1021 0
 1876 001e 3B69     		ldr	r3, [r7, #16]
 1877 0020 5A68     		ldr	r2, [r3, #4]
 1878 0022 FB68     		ldr	r3, [r7, #12]
 1879 0024 9A42     		cmp	r2, r3
 1880 0026 02D1     		bne	.L162
1022:..\FreeRTOS\Source/stream_buffer.c ****     {
1023:..\FreeRTOS\Source/stream_buffer.c ****         xReturn = pdTRUE;
 1881              		.loc 1 1023 0
 1882 0028 0123     		movs	r3, #1
 1883 002a 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 52


 1884 002c 01E0     		b	.L163
 1885              	.L162:
1024:..\FreeRTOS\Source/stream_buffer.c ****     }
1025:..\FreeRTOS\Source/stream_buffer.c ****     else
1026:..\FreeRTOS\Source/stream_buffer.c ****     {
1027:..\FreeRTOS\Source/stream_buffer.c ****         xReturn = pdFALSE;
 1886              		.loc 1 1027 0
 1887 002e 0023     		movs	r3, #0
 1888 0030 7B61     		str	r3, [r7, #20]
 1889              	.L163:
1028:..\FreeRTOS\Source/stream_buffer.c ****     }
1029:..\FreeRTOS\Source/stream_buffer.c **** 
1030:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 1890              		.loc 1 1030 0
 1891 0032 7B69     		ldr	r3, [r7, #20]
1031:..\FreeRTOS\Source/stream_buffer.c **** }
 1892              		.loc 1 1031 0
 1893 0034 1800     		movs	r0, r3
 1894 0036 BD46     		mov	sp, r7
 1895 0038 06B0     		add	sp, sp, #24
 1896              		@ sp needed
 1897 003a 80BD     		pop	{r7, pc}
 1898              	.L166:
 1899              		.align	2
 1900              	.L165:
 1901 003c 00000000 		.word	x
 1902              		.cfi_endproc
 1903              	.LFE14:
 1904              		.size	xStreamBufferIsEmpty, .-xStreamBufferIsEmpty
 1905              		.section	.text.xStreamBufferIsFull,"ax",%progbits
 1906              		.align	2
 1907              		.global	xStreamBufferIsFull
 1908              		.code	16
 1909              		.thumb_func
 1910              		.type	xStreamBufferIsFull, %function
 1911              	xStreamBufferIsFull:
 1912              	.LFB15:
1032:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1033:..\FreeRTOS\Source/stream_buffer.c **** 
1034:..\FreeRTOS\Source/stream_buffer.c **** BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
1035:..\FreeRTOS\Source/stream_buffer.c **** {
 1913              		.loc 1 1035 0
 1914              		.cfi_startproc
 1915              		@ args = 0, pretend = 0, frame = 24
 1916              		@ frame_needed = 1, uses_anonymous_args = 0
 1917 0000 80B5     		push	{r7, lr}
 1918              		.cfi_def_cfa_offset 8
 1919              		.cfi_offset 7, -8
 1920              		.cfi_offset 14, -4
 1921 0002 86B0     		sub	sp, sp, #24
 1922              		.cfi_def_cfa_offset 32
 1923 0004 00AF     		add	r7, sp, #0
 1924              		.cfi_def_cfa_register 7
 1925 0006 7860     		str	r0, [r7, #4]
1036:..\FreeRTOS\Source/stream_buffer.c ****     BaseType_t xReturn;
1037:..\FreeRTOS\Source/stream_buffer.c ****     size_t xBytesToStoreMessageLength;
1038:..\FreeRTOS\Source/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 53


 1926              		.loc 1 1038 0
 1927 0008 7B68     		ldr	r3, [r7, #4]
 1928 000a FB60     		str	r3, [r7, #12]
1039:..\FreeRTOS\Source/stream_buffer.c **** 
1040:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 1929              		.loc 1 1040 0
 1930 000c 114B     		ldr	r3, .L175
 1931 000e 1B88     		ldrh	r3, [r3]
 1932 0010 002B     		cmp	r3, #0
 1933 0012 01D1     		bne	.L168
 1934              		.loc 1 1040 0 is_stmt 0 discriminator 1
 1935              		.syntax divided
 1936              	@ 1040 "..\FreeRTOS\Source\stream_buffer.c" 1
 1937 0014 72B6     		 cpsid i 
 1938              	@ 0 "" 2
 1939              		.thumb
 1940              		.syntax unified
 1941              	.L169:
 1942 0016 FEE7     		b	.L169
 1943              	.L168:
1041:..\FreeRTOS\Source/stream_buffer.c **** 
1042:..\FreeRTOS\Source/stream_buffer.c ****     /* This generic version of the receive function is used by both message
1043:..\FreeRTOS\Source/stream_buffer.c ****      * buffers, which store discrete messages, and stream buffers, which store a
1044:..\FreeRTOS\Source/stream_buffer.c ****      * continuous stream of bytes.  Discrete messages include an additional
1045:..\FreeRTOS\Source/stream_buffer.c ****      * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
1046:..\FreeRTOS\Source/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1944              		.loc 1 1046 0 is_stmt 1
 1945 0018 FB68     		ldr	r3, [r7, #12]
 1946 001a 1B7F     		ldrb	r3, [r3, #28]
 1947 001c 1A00     		movs	r2, r3
 1948 001e 0123     		movs	r3, #1
 1949 0020 1340     		ands	r3, r2
 1950 0022 02D0     		beq	.L170
1047:..\FreeRTOS\Source/stream_buffer.c ****     {
1048:..\FreeRTOS\Source/stream_buffer.c ****         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1951              		.loc 1 1048 0
 1952 0024 0423     		movs	r3, #4
 1953 0026 3B61     		str	r3, [r7, #16]
 1954 0028 01E0     		b	.L171
 1955              	.L170:
1049:..\FreeRTOS\Source/stream_buffer.c ****     }
1050:..\FreeRTOS\Source/stream_buffer.c ****     else
1051:..\FreeRTOS\Source/stream_buffer.c ****     {
1052:..\FreeRTOS\Source/stream_buffer.c ****         xBytesToStoreMessageLength = 0;
 1956              		.loc 1 1052 0
 1957 002a 0023     		movs	r3, #0
 1958 002c 3B61     		str	r3, [r7, #16]
 1959              	.L171:
1053:..\FreeRTOS\Source/stream_buffer.c ****     }
1054:..\FreeRTOS\Source/stream_buffer.c **** 
1055:..\FreeRTOS\Source/stream_buffer.c ****     /* True if the available space equals zero. */
1056:..\FreeRTOS\Source/stream_buffer.c ****     if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 1960              		.loc 1 1056 0
 1961 002e 7B68     		ldr	r3, [r7, #4]
 1962 0030 1800     		movs	r0, r3
 1963 0032 FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 1964 0036 0200     		movs	r2, r0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 54


 1965 0038 3B69     		ldr	r3, [r7, #16]
 1966 003a 9A42     		cmp	r2, r3
 1967 003c 02D8     		bhi	.L172
1057:..\FreeRTOS\Source/stream_buffer.c ****     {
1058:..\FreeRTOS\Source/stream_buffer.c ****         xReturn = pdTRUE;
 1968              		.loc 1 1058 0
 1969 003e 0123     		movs	r3, #1
 1970 0040 7B61     		str	r3, [r7, #20]
 1971 0042 01E0     		b	.L173
 1972              	.L172:
1059:..\FreeRTOS\Source/stream_buffer.c ****     }
1060:..\FreeRTOS\Source/stream_buffer.c ****     else
1061:..\FreeRTOS\Source/stream_buffer.c ****     {
1062:..\FreeRTOS\Source/stream_buffer.c ****         xReturn = pdFALSE;
 1973              		.loc 1 1062 0
 1974 0044 0023     		movs	r3, #0
 1975 0046 7B61     		str	r3, [r7, #20]
 1976              	.L173:
1063:..\FreeRTOS\Source/stream_buffer.c ****     }
1064:..\FreeRTOS\Source/stream_buffer.c **** 
1065:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 1977              		.loc 1 1065 0
 1978 0048 7B69     		ldr	r3, [r7, #20]
1066:..\FreeRTOS\Source/stream_buffer.c **** }
 1979              		.loc 1 1066 0
 1980 004a 1800     		movs	r0, r3
 1981 004c BD46     		mov	sp, r7
 1982 004e 06B0     		add	sp, sp, #24
 1983              		@ sp needed
 1984 0050 80BD     		pop	{r7, pc}
 1985              	.L176:
 1986 0052 C046     		.align	2
 1987              	.L175:
 1988 0054 00000000 		.word	x
 1989              		.cfi_endproc
 1990              	.LFE15:
 1991              		.size	xStreamBufferIsFull, .-xStreamBufferIsFull
 1992              		.section	.text.xStreamBufferSendCompletedFromISR,"ax",%progbits
 1993              		.align	2
 1994              		.global	xStreamBufferSendCompletedFromISR
 1995              		.code	16
 1996              		.thumb_func
 1997              		.type	xStreamBufferSendCompletedFromISR, %function
 1998              	xStreamBufferSendCompletedFromISR:
 1999              	.LFB16:
1067:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1068:..\FreeRTOS\Source/stream_buffer.c **** 
1069:..\FreeRTOS\Source/stream_buffer.c **** BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
1070:..\FreeRTOS\Source/stream_buffer.c ****                                               BaseType_t * pxHigherPriorityTaskWoken )
1071:..\FreeRTOS\Source/stream_buffer.c **** {
 2000              		.loc 1 1071 0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 24
 2003              		@ frame_needed = 1, uses_anonymous_args = 0
 2004 0000 80B5     		push	{r7, lr}
 2005              		.cfi_def_cfa_offset 8
 2006              		.cfi_offset 7, -8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 55


 2007              		.cfi_offset 14, -4
 2008 0002 88B0     		sub	sp, sp, #32
 2009              		.cfi_def_cfa_offset 40
 2010 0004 02AF     		add	r7, sp, #8
 2011              		.cfi_def_cfa 7, 32
 2012 0006 7860     		str	r0, [r7, #4]
 2013 0008 3960     		str	r1, [r7]
1072:..\FreeRTOS\Source/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 2014              		.loc 1 1072 0
 2015 000a 7B68     		ldr	r3, [r7, #4]
 2016 000c 3B61     		str	r3, [r7, #16]
1073:..\FreeRTOS\Source/stream_buffer.c ****     BaseType_t xReturn;
1074:..\FreeRTOS\Source/stream_buffer.c ****     UBaseType_t uxSavedInterruptStatus;
1075:..\FreeRTOS\Source/stream_buffer.c **** 
1076:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 2017              		.loc 1 1076 0
 2018 000e 154B     		ldr	r3, .L183
 2019 0010 1B88     		ldrh	r3, [r3]
 2020 0012 002B     		cmp	r3, #0
 2021 0014 01D1     		bne	.L178
 2022              		.loc 1 1076 0 is_stmt 0 discriminator 1
 2023              		.syntax divided
 2024              	@ 1076 "..\FreeRTOS\Source\stream_buffer.c" 1
 2025 0016 72B6     		 cpsid i 
 2026              	@ 0 "" 2
 2027              		.thumb
 2028              		.syntax unified
 2029              	.L179:
 2030 0018 FEE7     		b	.L179
 2031              	.L178:
1077:..\FreeRTOS\Source/stream_buffer.c **** 
1078:..\FreeRTOS\Source/stream_buffer.c ****     uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 2032              		.loc 1 1078 0 is_stmt 1
 2033 001a FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 2034 001e 0300     		movs	r3, r0
 2035 0020 FB60     		str	r3, [r7, #12]
1079:..\FreeRTOS\Source/stream_buffer.c ****     {
1080:..\FreeRTOS\Source/stream_buffer.c ****         if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 2036              		.loc 1 1080 0
 2037 0022 3B69     		ldr	r3, [r7, #16]
 2038 0024 1B69     		ldr	r3, [r3, #16]
 2039 0026 002B     		cmp	r3, #0
 2040 0028 10D0     		beq	.L180
1081:..\FreeRTOS\Source/stream_buffer.c ****         {
1082:..\FreeRTOS\Source/stream_buffer.c ****             ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 2041              		.loc 1 1082 0
 2042 002a 3B69     		ldr	r3, [r7, #16]
 2043 002c 1869     		ldr	r0, [r3, #16]
 2044 002e 3B68     		ldr	r3, [r7]
 2045 0030 0193     		str	r3, [sp, #4]
 2046 0032 0023     		movs	r3, #0
 2047 0034 0093     		str	r3, [sp]
 2048 0036 0023     		movs	r3, #0
 2049 0038 0022     		movs	r2, #0
 2050 003a 0021     		movs	r1, #0
 2051 003c FFF7FEFF 		bl	xTaskGenericNotifyFromISR
1083:..\FreeRTOS\Source/stream_buffer.c ****                                          ( uint32_t ) 0,
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 56


1084:..\FreeRTOS\Source/stream_buffer.c ****                                          eNoAction,
1085:..\FreeRTOS\Source/stream_buffer.c ****                                          pxHigherPriorityTaskWoken );
1086:..\FreeRTOS\Source/stream_buffer.c ****             ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 2052              		.loc 1 1086 0
 2053 0040 3B69     		ldr	r3, [r7, #16]
 2054 0042 0022     		movs	r2, #0
 2055 0044 1A61     		str	r2, [r3, #16]
1087:..\FreeRTOS\Source/stream_buffer.c ****             xReturn = pdTRUE;
 2056              		.loc 1 1087 0
 2057 0046 0123     		movs	r3, #1
 2058 0048 7B61     		str	r3, [r7, #20]
 2059 004a 01E0     		b	.L181
 2060              	.L180:
1088:..\FreeRTOS\Source/stream_buffer.c ****         }
1089:..\FreeRTOS\Source/stream_buffer.c ****         else
1090:..\FreeRTOS\Source/stream_buffer.c ****         {
1091:..\FreeRTOS\Source/stream_buffer.c ****             xReturn = pdFALSE;
 2061              		.loc 1 1091 0
 2062 004c 0023     		movs	r3, #0
 2063 004e 7B61     		str	r3, [r7, #20]
 2064              	.L181:
1092:..\FreeRTOS\Source/stream_buffer.c ****         }
1093:..\FreeRTOS\Source/stream_buffer.c ****     }
1094:..\FreeRTOS\Source/stream_buffer.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 2065              		.loc 1 1094 0
 2066 0050 FB68     		ldr	r3, [r7, #12]
 2067 0052 1800     		movs	r0, r3
 2068 0054 FFF7FEFF 		bl	vClearInterruptMaskFromISR
1095:..\FreeRTOS\Source/stream_buffer.c **** 
1096:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 2069              		.loc 1 1096 0
 2070 0058 7B69     		ldr	r3, [r7, #20]
1097:..\FreeRTOS\Source/stream_buffer.c **** }
 2071              		.loc 1 1097 0
 2072 005a 1800     		movs	r0, r3
 2073 005c BD46     		mov	sp, r7
 2074 005e 06B0     		add	sp, sp, #24
 2075              		@ sp needed
 2076 0060 80BD     		pop	{r7, pc}
 2077              	.L184:
 2078 0062 C046     		.align	2
 2079              	.L183:
 2080 0064 00000000 		.word	x
 2081              		.cfi_endproc
 2082              	.LFE16:
 2083              		.size	xStreamBufferSendCompletedFromISR, .-xStreamBufferSendCompletedFromISR
 2084              		.section	.text.xStreamBufferReceiveCompletedFromISR,"ax",%progbits
 2085              		.align	2
 2086              		.global	xStreamBufferReceiveCompletedFromISR
 2087              		.code	16
 2088              		.thumb_func
 2089              		.type	xStreamBufferReceiveCompletedFromISR, %function
 2090              	xStreamBufferReceiveCompletedFromISR:
 2091              	.LFB17:
1098:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1099:..\FreeRTOS\Source/stream_buffer.c **** 
1100:..\FreeRTOS\Source/stream_buffer.c **** BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 57


1101:..\FreeRTOS\Source/stream_buffer.c ****                                                  BaseType_t * pxHigherPriorityTaskWoken )
1102:..\FreeRTOS\Source/stream_buffer.c **** {
 2092              		.loc 1 1102 0
 2093              		.cfi_startproc
 2094              		@ args = 0, pretend = 0, frame = 24
 2095              		@ frame_needed = 1, uses_anonymous_args = 0
 2096 0000 80B5     		push	{r7, lr}
 2097              		.cfi_def_cfa_offset 8
 2098              		.cfi_offset 7, -8
 2099              		.cfi_offset 14, -4
 2100 0002 88B0     		sub	sp, sp, #32
 2101              		.cfi_def_cfa_offset 40
 2102 0004 02AF     		add	r7, sp, #8
 2103              		.cfi_def_cfa 7, 32
 2104 0006 7860     		str	r0, [r7, #4]
 2105 0008 3960     		str	r1, [r7]
1103:..\FreeRTOS\Source/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 2106              		.loc 1 1103 0
 2107 000a 7B68     		ldr	r3, [r7, #4]
 2108 000c 3B61     		str	r3, [r7, #16]
1104:..\FreeRTOS\Source/stream_buffer.c ****     BaseType_t xReturn;
1105:..\FreeRTOS\Source/stream_buffer.c ****     UBaseType_t uxSavedInterruptStatus;
1106:..\FreeRTOS\Source/stream_buffer.c **** 
1107:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 2109              		.loc 1 1107 0
 2110 000e 154B     		ldr	r3, .L191
 2111 0010 1B88     		ldrh	r3, [r3]
 2112 0012 002B     		cmp	r3, #0
 2113 0014 01D1     		bne	.L186
 2114              		.loc 1 1107 0 is_stmt 0 discriminator 1
 2115              		.syntax divided
 2116              	@ 1107 "..\FreeRTOS\Source\stream_buffer.c" 1
 2117 0016 72B6     		 cpsid i 
 2118              	@ 0 "" 2
 2119              		.thumb
 2120              		.syntax unified
 2121              	.L187:
 2122 0018 FEE7     		b	.L187
 2123              	.L186:
1108:..\FreeRTOS\Source/stream_buffer.c **** 
1109:..\FreeRTOS\Source/stream_buffer.c ****     uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 2124              		.loc 1 1109 0 is_stmt 1
 2125 001a FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 2126 001e 0300     		movs	r3, r0
 2127 0020 FB60     		str	r3, [r7, #12]
1110:..\FreeRTOS\Source/stream_buffer.c ****     {
1111:..\FreeRTOS\Source/stream_buffer.c ****         if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 2128              		.loc 1 1111 0
 2129 0022 3B69     		ldr	r3, [r7, #16]
 2130 0024 5B69     		ldr	r3, [r3, #20]
 2131 0026 002B     		cmp	r3, #0
 2132 0028 10D0     		beq	.L188
1112:..\FreeRTOS\Source/stream_buffer.c ****         {
1113:..\FreeRTOS\Source/stream_buffer.c ****             ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 2133              		.loc 1 1113 0
 2134 002a 3B69     		ldr	r3, [r7, #16]
 2135 002c 5869     		ldr	r0, [r3, #20]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 58


 2136 002e 3B68     		ldr	r3, [r7]
 2137 0030 0193     		str	r3, [sp, #4]
 2138 0032 0023     		movs	r3, #0
 2139 0034 0093     		str	r3, [sp]
 2140 0036 0023     		movs	r3, #0
 2141 0038 0022     		movs	r2, #0
 2142 003a 0021     		movs	r1, #0
 2143 003c FFF7FEFF 		bl	xTaskGenericNotifyFromISR
1114:..\FreeRTOS\Source/stream_buffer.c ****                                          ( uint32_t ) 0,
1115:..\FreeRTOS\Source/stream_buffer.c ****                                          eNoAction,
1116:..\FreeRTOS\Source/stream_buffer.c ****                                          pxHigherPriorityTaskWoken );
1117:..\FreeRTOS\Source/stream_buffer.c ****             ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 2144              		.loc 1 1117 0
 2145 0040 3B69     		ldr	r3, [r7, #16]
 2146 0042 0022     		movs	r2, #0
 2147 0044 5A61     		str	r2, [r3, #20]
1118:..\FreeRTOS\Source/stream_buffer.c ****             xReturn = pdTRUE;
 2148              		.loc 1 1118 0
 2149 0046 0123     		movs	r3, #1
 2150 0048 7B61     		str	r3, [r7, #20]
 2151 004a 01E0     		b	.L189
 2152              	.L188:
1119:..\FreeRTOS\Source/stream_buffer.c ****         }
1120:..\FreeRTOS\Source/stream_buffer.c ****         else
1121:..\FreeRTOS\Source/stream_buffer.c ****         {
1122:..\FreeRTOS\Source/stream_buffer.c ****             xReturn = pdFALSE;
 2153              		.loc 1 1122 0
 2154 004c 0023     		movs	r3, #0
 2155 004e 7B61     		str	r3, [r7, #20]
 2156              	.L189:
1123:..\FreeRTOS\Source/stream_buffer.c ****         }
1124:..\FreeRTOS\Source/stream_buffer.c ****     }
1125:..\FreeRTOS\Source/stream_buffer.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 2157              		.loc 1 1125 0
 2158 0050 FB68     		ldr	r3, [r7, #12]
 2159 0052 1800     		movs	r0, r3
 2160 0054 FFF7FEFF 		bl	vClearInterruptMaskFromISR
1126:..\FreeRTOS\Source/stream_buffer.c **** 
1127:..\FreeRTOS\Source/stream_buffer.c ****     return xReturn;
 2161              		.loc 1 1127 0
 2162 0058 7B69     		ldr	r3, [r7, #20]
1128:..\FreeRTOS\Source/stream_buffer.c **** }
 2163              		.loc 1 1128 0
 2164 005a 1800     		movs	r0, r3
 2165 005c BD46     		mov	sp, r7
 2166 005e 06B0     		add	sp, sp, #24
 2167              		@ sp needed
 2168 0060 80BD     		pop	{r7, pc}
 2169              	.L192:
 2170 0062 C046     		.align	2
 2171              	.L191:
 2172 0064 00000000 		.word	x
 2173              		.cfi_endproc
 2174              	.LFE17:
 2175              		.size	xStreamBufferReceiveCompletedFromISR, .-xStreamBufferReceiveCompletedFromISR
 2176              		.section	.text.prvWriteBytesToBuffer,"ax",%progbits
 2177              		.align	2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 59


 2178              		.code	16
 2179              		.thumb_func
 2180              		.type	prvWriteBytesToBuffer, %function
 2181              	prvWriteBytesToBuffer:
 2182              	.LFB18:
1129:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1130:..\FreeRTOS\Source/stream_buffer.c **** 
1131:..\FreeRTOS\Source/stream_buffer.c **** static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
1132:..\FreeRTOS\Source/stream_buffer.c ****                                      const uint8_t * pucData,
1133:..\FreeRTOS\Source/stream_buffer.c ****                                      size_t xCount )
1134:..\FreeRTOS\Source/stream_buffer.c **** {
 2183              		.loc 1 1134 0
 2184              		.cfi_startproc
 2185              		@ args = 0, pretend = 0, frame = 24
 2186              		@ frame_needed = 1, uses_anonymous_args = 0
 2187 0000 80B5     		push	{r7, lr}
 2188              		.cfi_def_cfa_offset 8
 2189              		.cfi_offset 7, -8
 2190              		.cfi_offset 14, -4
 2191 0002 86B0     		sub	sp, sp, #24
 2192              		.cfi_def_cfa_offset 32
 2193 0004 00AF     		add	r7, sp, #0
 2194              		.cfi_def_cfa_register 7
 2195 0006 F860     		str	r0, [r7, #12]
 2196 0008 B960     		str	r1, [r7, #8]
 2197 000a 7A60     		str	r2, [r7, #4]
1135:..\FreeRTOS\Source/stream_buffer.c ****     size_t xNextHead, xFirstLength;
1136:..\FreeRTOS\Source/stream_buffer.c **** 
1137:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( xCount > ( size_t ) 0 );
 2198              		.loc 1 1137 0
 2199 000c 254B     		ldr	r3, .L204
 2200 000e 1B88     		ldrh	r3, [r3]
 2201 0010 002B     		cmp	r3, #0
 2202 0012 01D1     		bne	.L194
 2203              		.loc 1 1137 0 is_stmt 0 discriminator 1
 2204              		.syntax divided
 2205              	@ 1137 "..\FreeRTOS\Source\stream_buffer.c" 1
 2206 0014 72B6     		 cpsid i 
 2207              	@ 0 "" 2
 2208              		.thumb
 2209              		.syntax unified
 2210              	.L195:
 2211 0016 FEE7     		b	.L195
 2212              	.L194:
1138:..\FreeRTOS\Source/stream_buffer.c **** 
1139:..\FreeRTOS\Source/stream_buffer.c ****     xNextHead = pxStreamBuffer->xHead;
 2213              		.loc 1 1139 0 is_stmt 1
 2214 0018 FB68     		ldr	r3, [r7, #12]
 2215 001a 5B68     		ldr	r3, [r3, #4]
 2216 001c 7B61     		str	r3, [r7, #20]
1140:..\FreeRTOS\Source/stream_buffer.c **** 
1141:..\FreeRTOS\Source/stream_buffer.c ****     /* Calculate the number of bytes that can be added in the first write -
1142:..\FreeRTOS\Source/stream_buffer.c ****      * which may be less than the total number of bytes that need to be added if
1143:..\FreeRTOS\Source/stream_buffer.c ****      * the buffer will wrap back to the beginning. */
1144:..\FreeRTOS\Source/stream_buffer.c ****     xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 2217              		.loc 1 1144 0
 2218 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 60


 2219 0020 9A68     		ldr	r2, [r3, #8]
 2220 0022 7B69     		ldr	r3, [r7, #20]
 2221 0024 D31A     		subs	r3, r2, r3
 2222 0026 7A68     		ldr	r2, [r7, #4]
 2223 0028 9342     		cmp	r3, r2
 2224 002a 00D9     		bls	.L196
 2225 002c 1300     		movs	r3, r2
 2226              	.L196:
 2227 002e 3B61     		str	r3, [r7, #16]
1145:..\FreeRTOS\Source/stream_buffer.c **** 
1146:..\FreeRTOS\Source/stream_buffer.c ****     /* Write as many bytes as can be written in the first write. */
1147:..\FreeRTOS\Source/stream_buffer.c ****     configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 2228              		.loc 1 1147 0
 2229 0030 1C4B     		ldr	r3, .L204
 2230 0032 1B88     		ldrh	r3, [r3]
 2231 0034 002B     		cmp	r3, #0
 2232 0036 01D1     		bne	.L197
 2233              		.loc 1 1147 0 is_stmt 0 discriminator 1
 2234              		.syntax divided
 2235              	@ 1147 "..\FreeRTOS\Source\stream_buffer.c" 1
 2236 0038 72B6     		 cpsid i 
 2237              	@ 0 "" 2
 2238              		.thumb
 2239              		.syntax unified
 2240              	.L198:
 2241              		.loc 1 1147 0 discriminator 2
 2242 003a FEE7     		b	.L198
 2243              	.L197:
1148:..\FreeRTOS\Source/stream_buffer.c ****     ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) p
 2244              		.loc 1 1148 0 is_stmt 1 discriminator 2
 2245 003c FB68     		ldr	r3, [r7, #12]
 2246 003e 9A69     		ldr	r2, [r3, #24]
 2247 0040 7B69     		ldr	r3, [r7, #20]
 2248 0042 D318     		adds	r3, r2, r3
 2249 0044 3A69     		ldr	r2, [r7, #16]
 2250 0046 B968     		ldr	r1, [r7, #8]
 2251 0048 1800     		movs	r0, r3
 2252 004a FFF7FEFF 		bl	memcpy
1149:..\FreeRTOS\Source/stream_buffer.c **** 
1150:..\FreeRTOS\Source/stream_buffer.c ****     /* If the number of bytes written was less than the number that could be
1151:..\FreeRTOS\Source/stream_buffer.c ****      * written in the first write... */
1152:..\FreeRTOS\Source/stream_buffer.c ****     if( xCount > xFirstLength )
 2253              		.loc 1 1152 0 discriminator 2
 2254 004e 7A68     		ldr	r2, [r7, #4]
 2255 0050 3B69     		ldr	r3, [r7, #16]
 2256 0052 9A42     		cmp	r2, r3
 2257 0054 10D9     		bls	.L199
1153:..\FreeRTOS\Source/stream_buffer.c ****     {
1154:..\FreeRTOS\Source/stream_buffer.c ****         /* ...then write the remaining bytes to the start of the buffer. */
1155:..\FreeRTOS\Source/stream_buffer.c ****         configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 2258              		.loc 1 1155 0
 2259 0056 134B     		ldr	r3, .L204
 2260 0058 1B88     		ldrh	r3, [r3]
 2261 005a 002B     		cmp	r3, #0
 2262 005c 01D1     		bne	.L200
 2263              		.loc 1 1155 0 is_stmt 0 discriminator 1
 2264              		.syntax divided
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 61


 2265              	@ 1155 "..\FreeRTOS\Source\stream_buffer.c" 1
 2266 005e 72B6     		 cpsid i 
 2267              	@ 0 "" 2
 2268              		.thumb
 2269              		.syntax unified
 2270              	.L201:
 2271              		.loc 1 1155 0 discriminator 3
 2272 0060 FEE7     		b	.L201
 2273              	.L200:
1156:..\FreeRTOS\Source/stream_buffer.c ****         ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstL
 2274              		.loc 1 1156 0 is_stmt 1 discriminator 2
 2275 0062 FB68     		ldr	r3, [r7, #12]
 2276 0064 9869     		ldr	r0, [r3, #24]
 2277 0066 BA68     		ldr	r2, [r7, #8]
 2278 0068 3B69     		ldr	r3, [r7, #16]
 2279 006a D118     		adds	r1, r2, r3
 2280 006c 7A68     		ldr	r2, [r7, #4]
 2281 006e 3B69     		ldr	r3, [r7, #16]
 2282 0070 D31A     		subs	r3, r2, r3
 2283 0072 1A00     		movs	r2, r3
 2284 0074 FFF7FEFF 		bl	memcpy
 2285              	.L199:
1157:..\FreeRTOS\Source/stream_buffer.c ****     }
1158:..\FreeRTOS\Source/stream_buffer.c ****     else
1159:..\FreeRTOS\Source/stream_buffer.c ****     {
1160:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
1161:..\FreeRTOS\Source/stream_buffer.c ****     }
1162:..\FreeRTOS\Source/stream_buffer.c **** 
1163:..\FreeRTOS\Source/stream_buffer.c ****     xNextHead += xCount;
 2286              		.loc 1 1163 0
 2287 0078 7A69     		ldr	r2, [r7, #20]
 2288 007a 7B68     		ldr	r3, [r7, #4]
 2289 007c D318     		adds	r3, r2, r3
 2290 007e 7B61     		str	r3, [r7, #20]
1164:..\FreeRTOS\Source/stream_buffer.c **** 
1165:..\FreeRTOS\Source/stream_buffer.c ****     if( xNextHead >= pxStreamBuffer->xLength )
 2291              		.loc 1 1165 0
 2292 0080 FB68     		ldr	r3, [r7, #12]
 2293 0082 9A68     		ldr	r2, [r3, #8]
 2294 0084 7B69     		ldr	r3, [r7, #20]
 2295 0086 9A42     		cmp	r2, r3
 2296 0088 04D8     		bhi	.L202
1166:..\FreeRTOS\Source/stream_buffer.c ****     {
1167:..\FreeRTOS\Source/stream_buffer.c ****         xNextHead -= pxStreamBuffer->xLength;
 2297              		.loc 1 1167 0
 2298 008a FB68     		ldr	r3, [r7, #12]
 2299 008c 9B68     		ldr	r3, [r3, #8]
 2300 008e 7A69     		ldr	r2, [r7, #20]
 2301 0090 D31A     		subs	r3, r2, r3
 2302 0092 7B61     		str	r3, [r7, #20]
 2303              	.L202:
1168:..\FreeRTOS\Source/stream_buffer.c ****     }
1169:..\FreeRTOS\Source/stream_buffer.c ****     else
1170:..\FreeRTOS\Source/stream_buffer.c ****     {
1171:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
1172:..\FreeRTOS\Source/stream_buffer.c ****     }
1173:..\FreeRTOS\Source/stream_buffer.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 62


1174:..\FreeRTOS\Source/stream_buffer.c ****     pxStreamBuffer->xHead = xNextHead;
 2304              		.loc 1 1174 0
 2305 0094 FB68     		ldr	r3, [r7, #12]
 2306 0096 7A69     		ldr	r2, [r7, #20]
 2307 0098 5A60     		str	r2, [r3, #4]
1175:..\FreeRTOS\Source/stream_buffer.c **** 
1176:..\FreeRTOS\Source/stream_buffer.c ****     return xCount;
 2308              		.loc 1 1176 0
 2309 009a 7B68     		ldr	r3, [r7, #4]
1177:..\FreeRTOS\Source/stream_buffer.c **** }
 2310              		.loc 1 1177 0
 2311 009c 1800     		movs	r0, r3
 2312 009e BD46     		mov	sp, r7
 2313 00a0 06B0     		add	sp, sp, #24
 2314              		@ sp needed
 2315 00a2 80BD     		pop	{r7, pc}
 2316              	.L205:
 2317              		.align	2
 2318              	.L204:
 2319 00a4 00000000 		.word	x
 2320              		.cfi_endproc
 2321              	.LFE18:
 2322              		.size	prvWriteBytesToBuffer, .-prvWriteBytesToBuffer
 2323              		.section	.text.prvReadBytesFromBuffer,"ax",%progbits
 2324              		.align	2
 2325              		.code	16
 2326              		.thumb_func
 2327              		.type	prvReadBytesFromBuffer, %function
 2328              	prvReadBytesFromBuffer:
 2329              	.LFB19:
1178:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1179:..\FreeRTOS\Source/stream_buffer.c **** 
1180:..\FreeRTOS\Source/stream_buffer.c **** static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
1181:..\FreeRTOS\Source/stream_buffer.c ****                                       uint8_t * pucData,
1182:..\FreeRTOS\Source/stream_buffer.c ****                                       size_t xMaxCount,
1183:..\FreeRTOS\Source/stream_buffer.c ****                                       size_t xBytesAvailable )
1184:..\FreeRTOS\Source/stream_buffer.c **** {
 2330              		.loc 1 1184 0
 2331              		.cfi_startproc
 2332              		@ args = 0, pretend = 0, frame = 32
 2333              		@ frame_needed = 1, uses_anonymous_args = 0
 2334 0000 80B5     		push	{r7, lr}
 2335              		.cfi_def_cfa_offset 8
 2336              		.cfi_offset 7, -8
 2337              		.cfi_offset 14, -4
 2338 0002 88B0     		sub	sp, sp, #32
 2339              		.cfi_def_cfa_offset 40
 2340 0004 00AF     		add	r7, sp, #0
 2341              		.cfi_def_cfa_register 7
 2342 0006 F860     		str	r0, [r7, #12]
 2343 0008 B960     		str	r1, [r7, #8]
 2344 000a 7A60     		str	r2, [r7, #4]
 2345 000c 3B60     		str	r3, [r7]
1185:..\FreeRTOS\Source/stream_buffer.c ****     size_t xCount, xFirstLength, xNextTail;
1186:..\FreeRTOS\Source/stream_buffer.c **** 
1187:..\FreeRTOS\Source/stream_buffer.c ****     /* Use the minimum of the wanted bytes and the available bytes. */
1188:..\FreeRTOS\Source/stream_buffer.c ****     xCount = configMIN( xBytesAvailable, xMaxCount );
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 63


 2346              		.loc 1 1188 0
 2347 000e 3A68     		ldr	r2, [r7]
 2348 0010 7B68     		ldr	r3, [r7, #4]
 2349 0012 9342     		cmp	r3, r2
 2350 0014 00D9     		bls	.L207
 2351 0016 1300     		movs	r3, r2
 2352              	.L207:
 2353 0018 BB61     		str	r3, [r7, #24]
1189:..\FreeRTOS\Source/stream_buffer.c **** 
1190:..\FreeRTOS\Source/stream_buffer.c ****     if( xCount > ( size_t ) 0 )
 2354              		.loc 1 1190 0
 2355 001a BB69     		ldr	r3, [r7, #24]
 2356 001c 002B     		cmp	r3, #0
 2357 001e 46D0     		beq	.L208
1191:..\FreeRTOS\Source/stream_buffer.c ****     {
1192:..\FreeRTOS\Source/stream_buffer.c ****         xNextTail = pxStreamBuffer->xTail;
 2358              		.loc 1 1192 0
 2359 0020 FB68     		ldr	r3, [r7, #12]
 2360 0022 1B68     		ldr	r3, [r3]
 2361 0024 FB61     		str	r3, [r7, #28]
1193:..\FreeRTOS\Source/stream_buffer.c **** 
1194:..\FreeRTOS\Source/stream_buffer.c ****         /* Calculate the number of bytes that can be read - which may be
1195:..\FreeRTOS\Source/stream_buffer.c ****          * less than the number wanted if the data wraps around to the start of
1196:..\FreeRTOS\Source/stream_buffer.c ****          * the buffer. */
1197:..\FreeRTOS\Source/stream_buffer.c ****         xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 2362              		.loc 1 1197 0
 2363 0026 FB68     		ldr	r3, [r7, #12]
 2364 0028 9A68     		ldr	r2, [r3, #8]
 2365 002a FB69     		ldr	r3, [r7, #28]
 2366 002c D31A     		subs	r3, r2, r3
 2367 002e BA69     		ldr	r2, [r7, #24]
 2368 0030 9342     		cmp	r3, r2
 2369 0032 00D9     		bls	.L209
 2370 0034 1300     		movs	r3, r2
 2371              	.L209:
 2372 0036 7B61     		str	r3, [r7, #20]
1198:..\FreeRTOS\Source/stream_buffer.c **** 
1199:..\FreeRTOS\Source/stream_buffer.c ****         /* Obtain the number of bytes it is possible to obtain in the first
1200:..\FreeRTOS\Source/stream_buffer.c ****          * read.  Asserts check bounds of read and write. */
1201:..\FreeRTOS\Source/stream_buffer.c ****         configASSERT( xFirstLength <= xMaxCount );
 2373              		.loc 1 1201 0
 2374 0038 1F4B     		ldr	r3, .L219
 2375 003a 1B88     		ldrh	r3, [r3]
 2376 003c 002B     		cmp	r3, #0
 2377 003e 01D1     		bne	.L210
 2378              		.loc 1 1201 0 is_stmt 0 discriminator 1
 2379              		.syntax divided
 2380              	@ 1201 "..\FreeRTOS\Source\stream_buffer.c" 1
 2381 0040 72B6     		 cpsid i 
 2382              	@ 0 "" 2
 2383              		.thumb
 2384              		.syntax unified
 2385              	.L211:
 2386 0042 FEE7     		b	.L211
 2387              	.L210:
1202:..\FreeRTOS\Source/stream_buffer.c ****         configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 2388              		.loc 1 1202 0 is_stmt 1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 64


 2389 0044 1C4B     		ldr	r3, .L219
 2390 0046 1B88     		ldrh	r3, [r3]
 2391 0048 002B     		cmp	r3, #0
 2392 004a 01D1     		bne	.L212
 2393              		.loc 1 1202 0 is_stmt 0 discriminator 1
 2394              		.syntax divided
 2395              	@ 1202 "..\FreeRTOS\Source\stream_buffer.c" 1
 2396 004c 72B6     		 cpsid i 
 2397              	@ 0 "" 2
 2398              		.thumb
 2399              		.syntax unified
 2400              	.L213:
 2401              		.loc 1 1202 0 discriminator 2
 2402 004e FEE7     		b	.L213
 2403              	.L212:
1203:..\FreeRTOS\Source/stream_buffer.c ****         ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTa
 2404              		.loc 1 1203 0 is_stmt 1 discriminator 2
 2405 0050 FB68     		ldr	r3, [r7, #12]
 2406 0052 9A69     		ldr	r2, [r3, #24]
 2407 0054 FB69     		ldr	r3, [r7, #28]
 2408 0056 D118     		adds	r1, r2, r3
 2409 0058 7A69     		ldr	r2, [r7, #20]
 2410 005a BB68     		ldr	r3, [r7, #8]
 2411 005c 1800     		movs	r0, r3
 2412 005e FFF7FEFF 		bl	memcpy
1204:..\FreeRTOS\Source/stream_buffer.c **** 
1205:..\FreeRTOS\Source/stream_buffer.c ****         /* If the total number of wanted bytes is greater than the number
1206:..\FreeRTOS\Source/stream_buffer.c ****          * that could be read in the first read... */
1207:..\FreeRTOS\Source/stream_buffer.c ****         if( xCount > xFirstLength )
 2413              		.loc 1 1207 0 discriminator 2
 2414 0062 BA69     		ldr	r2, [r7, #24]
 2415 0064 7B69     		ldr	r3, [r7, #20]
 2416 0066 9A42     		cmp	r2, r3
 2417 0068 10D9     		bls	.L214
1208:..\FreeRTOS\Source/stream_buffer.c ****         {
1209:..\FreeRTOS\Source/stream_buffer.c ****             /*...then read the remaining bytes from the start of the buffer. */
1210:..\FreeRTOS\Source/stream_buffer.c ****             configASSERT( xCount <= xMaxCount );
 2418              		.loc 1 1210 0
 2419 006a 134B     		ldr	r3, .L219
 2420 006c 1B88     		ldrh	r3, [r3]
 2421 006e 002B     		cmp	r3, #0
 2422 0070 01D1     		bne	.L215
 2423              		.loc 1 1210 0 is_stmt 0 discriminator 1
 2424              		.syntax divided
 2425              	@ 1210 "..\FreeRTOS\Source\stream_buffer.c" 1
 2426 0072 72B6     		 cpsid i 
 2427              	@ 0 "" 2
 2428              		.thumb
 2429              		.syntax unified
 2430              	.L216:
 2431              		.loc 1 1210 0 discriminator 3
 2432 0074 FEE7     		b	.L216
 2433              	.L215:
1211:..\FreeRTOS\Source/stream_buffer.c ****             ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->
 2434              		.loc 1 1211 0 is_stmt 1
 2435 0076 BA68     		ldr	r2, [r7, #8]
 2436 0078 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 65


 2437 007a D018     		adds	r0, r2, r3
 2438 007c FB68     		ldr	r3, [r7, #12]
 2439 007e 9969     		ldr	r1, [r3, #24]
 2440 0080 BA69     		ldr	r2, [r7, #24]
 2441 0082 7B69     		ldr	r3, [r7, #20]
 2442 0084 D31A     		subs	r3, r2, r3
 2443 0086 1A00     		movs	r2, r3
 2444 0088 FFF7FEFF 		bl	memcpy
 2445              	.L214:
1212:..\FreeRTOS\Source/stream_buffer.c ****         }
1213:..\FreeRTOS\Source/stream_buffer.c ****         else
1214:..\FreeRTOS\Source/stream_buffer.c ****         {
1215:..\FreeRTOS\Source/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
1216:..\FreeRTOS\Source/stream_buffer.c ****         }
1217:..\FreeRTOS\Source/stream_buffer.c **** 
1218:..\FreeRTOS\Source/stream_buffer.c ****         /* Move the tail pointer to effectively remove the data read from
1219:..\FreeRTOS\Source/stream_buffer.c ****          * the buffer. */
1220:..\FreeRTOS\Source/stream_buffer.c ****         xNextTail += xCount;
 2446              		.loc 1 1220 0
 2447 008c FA69     		ldr	r2, [r7, #28]
 2448 008e BB69     		ldr	r3, [r7, #24]
 2449 0090 D318     		adds	r3, r2, r3
 2450 0092 FB61     		str	r3, [r7, #28]
1221:..\FreeRTOS\Source/stream_buffer.c **** 
1222:..\FreeRTOS\Source/stream_buffer.c ****         if( xNextTail >= pxStreamBuffer->xLength )
 2451              		.loc 1 1222 0
 2452 0094 FB68     		ldr	r3, [r7, #12]
 2453 0096 9A68     		ldr	r2, [r3, #8]
 2454 0098 FB69     		ldr	r3, [r7, #28]
 2455 009a 9A42     		cmp	r2, r3
 2456 009c 04D8     		bhi	.L217
1223:..\FreeRTOS\Source/stream_buffer.c ****         {
1224:..\FreeRTOS\Source/stream_buffer.c ****             xNextTail -= pxStreamBuffer->xLength;
 2457              		.loc 1 1224 0
 2458 009e FB68     		ldr	r3, [r7, #12]
 2459 00a0 9B68     		ldr	r3, [r3, #8]
 2460 00a2 FA69     		ldr	r2, [r7, #28]
 2461 00a4 D31A     		subs	r3, r2, r3
 2462 00a6 FB61     		str	r3, [r7, #28]
 2463              	.L217:
1225:..\FreeRTOS\Source/stream_buffer.c ****         }
1226:..\FreeRTOS\Source/stream_buffer.c **** 
1227:..\FreeRTOS\Source/stream_buffer.c ****         pxStreamBuffer->xTail = xNextTail;
 2464              		.loc 1 1227 0
 2465 00a8 FB68     		ldr	r3, [r7, #12]
 2466 00aa FA69     		ldr	r2, [r7, #28]
 2467 00ac 1A60     		str	r2, [r3]
 2468              	.L208:
1228:..\FreeRTOS\Source/stream_buffer.c ****     }
1229:..\FreeRTOS\Source/stream_buffer.c ****     else
1230:..\FreeRTOS\Source/stream_buffer.c ****     {
1231:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
1232:..\FreeRTOS\Source/stream_buffer.c ****     }
1233:..\FreeRTOS\Source/stream_buffer.c **** 
1234:..\FreeRTOS\Source/stream_buffer.c ****     return xCount;
 2469              		.loc 1 1234 0
 2470 00ae BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 66


1235:..\FreeRTOS\Source/stream_buffer.c **** }
 2471              		.loc 1 1235 0
 2472 00b0 1800     		movs	r0, r3
 2473 00b2 BD46     		mov	sp, r7
 2474 00b4 08B0     		add	sp, sp, #32
 2475              		@ sp needed
 2476 00b6 80BD     		pop	{r7, pc}
 2477              	.L220:
 2478              		.align	2
 2479              	.L219:
 2480 00b8 00000000 		.word	x
 2481              		.cfi_endproc
 2482              	.LFE19:
 2483              		.size	prvReadBytesFromBuffer, .-prvReadBytesFromBuffer
 2484              		.section	.text.prvBytesInBuffer,"ax",%progbits
 2485              		.align	2
 2486              		.code	16
 2487              		.thumb_func
 2488              		.type	prvBytesInBuffer, %function
 2489              	prvBytesInBuffer:
 2490              	.LFB20:
1236:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1237:..\FreeRTOS\Source/stream_buffer.c **** 
1238:..\FreeRTOS\Source/stream_buffer.c **** static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
1239:..\FreeRTOS\Source/stream_buffer.c **** {
 2491              		.loc 1 1239 0
 2492              		.cfi_startproc
 2493              		@ args = 0, pretend = 0, frame = 16
 2494              		@ frame_needed = 1, uses_anonymous_args = 0
 2495 0000 80B5     		push	{r7, lr}
 2496              		.cfi_def_cfa_offset 8
 2497              		.cfi_offset 7, -8
 2498              		.cfi_offset 14, -4
 2499 0002 84B0     		sub	sp, sp, #16
 2500              		.cfi_def_cfa_offset 24
 2501 0004 00AF     		add	r7, sp, #0
 2502              		.cfi_def_cfa_register 7
 2503 0006 7860     		str	r0, [r7, #4]
1240:..\FreeRTOS\Source/stream_buffer.c **** /* Returns the distance between xTail and xHead. */
1241:..\FreeRTOS\Source/stream_buffer.c ****     size_t xCount;
1242:..\FreeRTOS\Source/stream_buffer.c **** 
1243:..\FreeRTOS\Source/stream_buffer.c ****     xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 2504              		.loc 1 1243 0
 2505 0008 7B68     		ldr	r3, [r7, #4]
 2506 000a 9A68     		ldr	r2, [r3, #8]
 2507 000c 7B68     		ldr	r3, [r7, #4]
 2508 000e 5B68     		ldr	r3, [r3, #4]
 2509 0010 D318     		adds	r3, r2, r3
 2510 0012 FB60     		str	r3, [r7, #12]
1244:..\FreeRTOS\Source/stream_buffer.c ****     xCount -= pxStreamBuffer->xTail;
 2511              		.loc 1 1244 0
 2512 0014 7B68     		ldr	r3, [r7, #4]
 2513 0016 1B68     		ldr	r3, [r3]
 2514 0018 FA68     		ldr	r2, [r7, #12]
 2515 001a D31A     		subs	r3, r2, r3
 2516 001c FB60     		str	r3, [r7, #12]
1245:..\FreeRTOS\Source/stream_buffer.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 67


1246:..\FreeRTOS\Source/stream_buffer.c ****     if( xCount >= pxStreamBuffer->xLength )
 2517              		.loc 1 1246 0
 2518 001e 7B68     		ldr	r3, [r7, #4]
 2519 0020 9A68     		ldr	r2, [r3, #8]
 2520 0022 FB68     		ldr	r3, [r7, #12]
 2521 0024 9A42     		cmp	r2, r3
 2522 0026 04D8     		bhi	.L222
1247:..\FreeRTOS\Source/stream_buffer.c ****     {
1248:..\FreeRTOS\Source/stream_buffer.c ****         xCount -= pxStreamBuffer->xLength;
 2523              		.loc 1 1248 0
 2524 0028 7B68     		ldr	r3, [r7, #4]
 2525 002a 9B68     		ldr	r3, [r3, #8]
 2526 002c FA68     		ldr	r2, [r7, #12]
 2527 002e D31A     		subs	r3, r2, r3
 2528 0030 FB60     		str	r3, [r7, #12]
 2529              	.L222:
1249:..\FreeRTOS\Source/stream_buffer.c ****     }
1250:..\FreeRTOS\Source/stream_buffer.c ****     else
1251:..\FreeRTOS\Source/stream_buffer.c ****     {
1252:..\FreeRTOS\Source/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
1253:..\FreeRTOS\Source/stream_buffer.c ****     }
1254:..\FreeRTOS\Source/stream_buffer.c **** 
1255:..\FreeRTOS\Source/stream_buffer.c ****     return xCount;
 2530              		.loc 1 1255 0
 2531 0032 FB68     		ldr	r3, [r7, #12]
1256:..\FreeRTOS\Source/stream_buffer.c **** }
 2532              		.loc 1 1256 0
 2533 0034 1800     		movs	r0, r3
 2534 0036 BD46     		mov	sp, r7
 2535 0038 04B0     		add	sp, sp, #16
 2536              		@ sp needed
 2537 003a 80BD     		pop	{r7, pc}
 2538              		.cfi_endproc
 2539              	.LFE20:
 2540              		.size	prvBytesInBuffer, .-prvBytesInBuffer
 2541              		.section	.text.prvInitialiseNewStreamBuffer,"ax",%progbits
 2542              		.align	2
 2543              		.code	16
 2544              		.thumb_func
 2545              		.type	prvInitialiseNewStreamBuffer, %function
 2546              	prvInitialiseNewStreamBuffer:
 2547              	.LFB21:
1257:..\FreeRTOS\Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1258:..\FreeRTOS\Source/stream_buffer.c **** 
1259:..\FreeRTOS\Source/stream_buffer.c **** static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
1260:..\FreeRTOS\Source/stream_buffer.c ****                                           uint8_t * const pucBuffer,
1261:..\FreeRTOS\Source/stream_buffer.c ****                                           size_t xBufferSizeBytes,
1262:..\FreeRTOS\Source/stream_buffer.c ****                                           size_t xTriggerLevelBytes,
1263:..\FreeRTOS\Source/stream_buffer.c ****                                           uint8_t ucFlags )
1264:..\FreeRTOS\Source/stream_buffer.c **** {
 2548              		.loc 1 1264 0
 2549              		.cfi_startproc
 2550              		@ args = 4, pretend = 0, frame = 24
 2551              		@ frame_needed = 1, uses_anonymous_args = 0
 2552 0000 80B5     		push	{r7, lr}
 2553              		.cfi_def_cfa_offset 8
 2554              		.cfi_offset 7, -8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 68


 2555              		.cfi_offset 14, -4
 2556 0002 86B0     		sub	sp, sp, #24
 2557              		.cfi_def_cfa_offset 32
 2558 0004 00AF     		add	r7, sp, #0
 2559              		.cfi_def_cfa_register 7
 2560 0006 F860     		str	r0, [r7, #12]
 2561 0008 B960     		str	r1, [r7, #8]
 2562 000a 7A60     		str	r2, [r7, #4]
 2563 000c 3B60     		str	r3, [r7]
 2564              	.LBB5:
1265:..\FreeRTOS\Source/stream_buffer.c ****     /* Assert here is deliberately writing to the entire buffer to ensure it can
1266:..\FreeRTOS\Source/stream_buffer.c ****      * be written to without generating exceptions, and is setting the buffer to a
1267:..\FreeRTOS\Source/stream_buffer.c ****      * known value to assist in development/debugging. */
1268:..\FreeRTOS\Source/stream_buffer.c ****     #if ( configASSERT_DEFINED == 1 )
1269:..\FreeRTOS\Source/stream_buffer.c ****         {
1270:..\FreeRTOS\Source/stream_buffer.c ****             /* The value written just has to be identifiable when looking at the
1271:..\FreeRTOS\Source/stream_buffer.c ****              * memory.  Don't use 0xA5 as that is the stack fill value and could
1272:..\FreeRTOS\Source/stream_buffer.c ****              * result in confusion as to what is actually being observed. */
1273:..\FreeRTOS\Source/stream_buffer.c ****             const BaseType_t xWriteValue = 0x55;
 2565              		.loc 1 1273 0
 2566 000e 5523     		movs	r3, #85
 2567 0010 7B61     		str	r3, [r7, #20]
1274:..\FreeRTOS\Source/stream_buffer.c ****             configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer )
 2568              		.loc 1 1274 0
 2569 0012 124B     		ldr	r3, .L227
 2570 0014 1B88     		ldrh	r3, [r3]
 2571 0016 002B     		cmp	r3, #0
 2572 0018 01D1     		bne	.L225
 2573              		.loc 1 1274 0 is_stmt 0 discriminator 1
 2574              		.syntax divided
 2575              	@ 1274 "..\FreeRTOS\Source\stream_buffer.c" 1
 2576 001a 72B6     		 cpsid i 
 2577              	@ 0 "" 2
 2578              		.thumb
 2579              		.syntax unified
 2580              	.L226:
 2581 001c FEE7     		b	.L226
 2582              	.L225:
 2583              		.loc 1 1274 0 discriminator 2
 2584 001e 7A68     		ldr	r2, [r7, #4]
 2585 0020 7969     		ldr	r1, [r7, #20]
 2586 0022 BB68     		ldr	r3, [r7, #8]
 2587 0024 1800     		movs	r0, r3
 2588 0026 FFF7FEFF 		bl	memset
 2589              	.LBE5:
1275:..\FreeRTOS\Source/stream_buffer.c ****         } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
1276:..\FreeRTOS\Source/stream_buffer.c ****     #endif
1277:..\FreeRTOS\Source/stream_buffer.c **** 
1278:..\FreeRTOS\Source/stream_buffer.c ****     ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 mem
 2590              		.loc 1 1278 0 is_stmt 1 discriminator 2
 2591 002a FB68     		ldr	r3, [r7, #12]
 2592 002c 2022     		movs	r2, #32
 2593 002e 0021     		movs	r1, #0
 2594 0030 1800     		movs	r0, r3
 2595 0032 FFF7FEFF 		bl	memset
1279:..\FreeRTOS\Source/stream_buffer.c ****     pxStreamBuffer->pucBuffer = pucBuffer;
 2596              		.loc 1 1279 0 discriminator 2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 69


 2597 0036 FB68     		ldr	r3, [r7, #12]
 2598 0038 BA68     		ldr	r2, [r7, #8]
 2599 003a 9A61     		str	r2, [r3, #24]
1280:..\FreeRTOS\Source/stream_buffer.c ****     pxStreamBuffer->xLength = xBufferSizeBytes;
 2600              		.loc 1 1280 0 discriminator 2
 2601 003c FB68     		ldr	r3, [r7, #12]
 2602 003e 7A68     		ldr	r2, [r7, #4]
 2603 0040 9A60     		str	r2, [r3, #8]
1281:..\FreeRTOS\Source/stream_buffer.c ****     pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 2604              		.loc 1 1281 0 discriminator 2
 2605 0042 FB68     		ldr	r3, [r7, #12]
 2606 0044 3A68     		ldr	r2, [r7]
 2607 0046 DA60     		str	r2, [r3, #12]
1282:..\FreeRTOS\Source/stream_buffer.c ****     pxStreamBuffer->ucFlags = ucFlags;
 2608              		.loc 1 1282 0 discriminator 2
 2609 0048 FB68     		ldr	r3, [r7, #12]
 2610 004a 2022     		movs	r2, #32
 2611 004c BA18     		adds	r2, r7, r2
 2612 004e 1278     		ldrb	r2, [r2]
 2613 0050 1A77     		strb	r2, [r3, #28]
1283:..\FreeRTOS\Source/stream_buffer.c **** }
 2614              		.loc 1 1283 0 discriminator 2
 2615 0052 C046     		nop
 2616 0054 BD46     		mov	sp, r7
 2617 0056 06B0     		add	sp, sp, #24
 2618              		@ sp needed
 2619 0058 80BD     		pop	{r7, pc}
 2620              	.L228:
 2621 005a C046     		.align	2
 2622              	.L227:
 2623 005c 00000000 		.word	x
 2624              		.cfi_endproc
 2625              	.LFE21:
 2626              		.size	prvInitialiseNewStreamBuffer, .-prvInitialiseNewStreamBuffer
 2627              		.text
 2628              	.Letext0:
 2629              		.file 2 "d:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2630              		.file 3 "d:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2631              		.file 4 "d:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2632              		.file 5 "..\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM0/portmacro.h"
 2633              		.file 6 "..\\FreeRTOS\\Source\\include/FreeRTOS.h"
 2634              		.file 7 "..\\FreeRTOS\\Source\\include/task.h"
 2635              		.file 8 "..\\FreeRTOS\\Source\\include/stream_buffer.h"
 2636              		.file 9 "./FreeRTOSConfig.h"
 2637              		.section	.debug_info,"",%progbits
 2638              	.Ldebug_info0:
 2639 0000 780C0000 		.4byte	0xc78
 2640 0004 0400     		.2byte	0x4
 2641 0006 00000000 		.4byte	.Ldebug_abbrev0
 2642 000a 04       		.byte	0x4
 2643 000b 01       		.uleb128 0x1
 2644 000c 8F020000 		.4byte	.LASF104
 2645 0010 0C       		.byte	0xc
 2646 0011 2C030000 		.4byte	.LASF105
 2647 0015 D7060000 		.4byte	.LASF106
 2648 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2649 001d 00000000 		.4byte	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 70


 2650 0021 00000000 		.4byte	.Ldebug_line0
 2651 0025 02       		.uleb128 0x2
 2652 0026 01       		.byte	0x1
 2653 0027 06       		.byte	0x6
 2654 0028 E5030000 		.4byte	.LASF0
 2655 002c 03       		.uleb128 0x3
 2656 002d CE070000 		.4byte	.LASF3
 2657 0031 02       		.byte	0x2
 2658 0032 1D       		.byte	0x1d
 2659 0033 37000000 		.4byte	0x37
 2660 0037 02       		.uleb128 0x2
 2661 0038 01       		.byte	0x1
 2662 0039 08       		.byte	0x8
 2663 003a 78030000 		.4byte	.LASF1
 2664 003e 02       		.uleb128 0x2
 2665 003f 02       		.byte	0x2
 2666 0040 05       		.byte	0x5
 2667 0041 96000000 		.4byte	.LASF2
 2668 0045 03       		.uleb128 0x3
 2669 0046 42010000 		.4byte	.LASF4
 2670 004a 02       		.byte	0x2
 2671 004b 2B       		.byte	0x2b
 2672 004c 50000000 		.4byte	0x50
 2673 0050 02       		.uleb128 0x2
 2674 0051 02       		.byte	0x2
 2675 0052 07       		.byte	0x7
 2676 0053 C7040000 		.4byte	.LASF5
 2677 0057 02       		.uleb128 0x2
 2678 0058 04       		.byte	0x4
 2679 0059 05       		.byte	0x5
 2680 005a 30020000 		.4byte	.LASF6
 2681 005e 03       		.uleb128 0x3
 2682 005f 26010000 		.4byte	.LASF7
 2683 0063 02       		.byte	0x2
 2684 0064 41       		.byte	0x41
 2685 0065 69000000 		.4byte	0x69
 2686 0069 02       		.uleb128 0x2
 2687 006a 04       		.byte	0x4
 2688 006b 07       		.byte	0x7
 2689 006c 7B050000 		.4byte	.LASF8
 2690 0070 02       		.uleb128 0x2
 2691 0071 08       		.byte	0x8
 2692 0072 05       		.byte	0x5
 2693 0073 E3010000 		.4byte	.LASF9
 2694 0077 02       		.uleb128 0x2
 2695 0078 08       		.byte	0x8
 2696 0079 07       		.byte	0x7
 2697 007a 0E040000 		.4byte	.LASF10
 2698 007e 04       		.uleb128 0x4
 2699 007f 04       		.byte	0x4
 2700 0080 05       		.byte	0x5
 2701 0081 696E7400 		.ascii	"int\000"
 2702 0085 02       		.uleb128 0x2
 2703 0086 04       		.byte	0x4
 2704 0087 07       		.byte	0x7
 2705 0088 81040000 		.4byte	.LASF11
 2706 008c 03       		.uleb128 0x3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 71


 2707 008d 9D010000 		.4byte	.LASF12
 2708 0091 03       		.byte	0x3
 2709 0092 18       		.byte	0x18
 2710 0093 2C000000 		.4byte	0x2c
 2711 0097 03       		.uleb128 0x3
 2712 0098 8E040000 		.4byte	.LASF13
 2713 009c 03       		.byte	0x3
 2714 009d 24       		.byte	0x24
 2715 009e 45000000 		.4byte	0x45
 2716 00a2 03       		.uleb128 0x3
 2717 00a3 3E040000 		.4byte	.LASF14
 2718 00a7 03       		.byte	0x3
 2719 00a8 30       		.byte	0x30
 2720 00a9 5E000000 		.4byte	0x5e
 2721 00ad 03       		.uleb128 0x3
 2722 00ae A0000000 		.4byte	.LASF15
 2723 00b2 04       		.byte	0x4
 2724 00b3 D8       		.byte	0xd8
 2725 00b4 85000000 		.4byte	0x85
 2726 00b8 02       		.uleb128 0x2
 2727 00b9 08       		.byte	0x8
 2728 00ba 04       		.byte	0x4
 2729 00bb 64030000 		.4byte	.LASF16
 2730 00bf 02       		.uleb128 0x2
 2731 00c0 04       		.byte	0x4
 2732 00c1 07       		.byte	0x7
 2733 00c2 A7000000 		.4byte	.LASF17
 2734 00c6 05       		.uleb128 0x5
 2735 00c7 04       		.byte	0x4
 2736 00c8 02       		.uleb128 0x2
 2737 00c9 01       		.byte	0x1
 2738 00ca 08       		.byte	0x8
 2739 00cb F0040000 		.4byte	.LASF18
 2740 00cf 03       		.uleb128 0x3
 2741 00d0 97040000 		.4byte	.LASF19
 2742 00d4 05       		.byte	0x5
 2743 00d5 38       		.byte	0x38
 2744 00d6 57000000 		.4byte	0x57
 2745 00da 03       		.uleb128 0x3
 2746 00db A8050000 		.4byte	.LASF20
 2747 00df 05       		.byte	0x5
 2748 00e0 39       		.byte	0x39
 2749 00e1 69000000 		.4byte	0x69
 2750 00e5 03       		.uleb128 0x3
 2751 00e6 BC040000 		.4byte	.LASF21
 2752 00ea 05       		.byte	0x5
 2753 00eb 3F       		.byte	0x3f
 2754 00ec A2000000 		.4byte	0xa2
 2755 00f0 06       		.uleb128 0x6
 2756 00f1 04       		.byte	0x4
 2757 00f2 8C000000 		.4byte	0x8c
 2758 00f6 07       		.uleb128 0x7
 2759 00f7 C6000000 		.4byte	0xc6
 2760 00fb 06010000 		.4byte	0x106
 2761 00ff 08       		.uleb128 0x8
 2762 0100 BF000000 		.4byte	0xbf
 2763 0104 02       		.byte	0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 72


 2764 0105 00       		.byte	0
 2765 0106 09       		.uleb128 0x9
 2766 0107 DA040000 		.4byte	.LASF32
 2767 010b 20       		.byte	0x20
 2768 010c 06       		.byte	0x6
 2769 010d 2E05     		.2byte	0x52e
 2770 010f 3B010000 		.4byte	0x13b
 2771 0113 0A       		.uleb128 0xa
 2772 0114 34050000 		.4byte	.LASF22
 2773 0118 06       		.byte	0x6
 2774 0119 3005     		.2byte	0x530
 2775 011b 3B010000 		.4byte	0x13b
 2776 011f 00       		.byte	0
 2777 0120 0A       		.uleb128 0xa
 2778 0121 41070000 		.4byte	.LASF23
 2779 0125 06       		.byte	0x6
 2780 0126 3105     		.2byte	0x531
 2781 0128 F6000000 		.4byte	0xf6
 2782 012c 10       		.byte	0x10
 2783 012d 0A       		.uleb128 0xa
 2784 012e 30060000 		.4byte	.LASF24
 2785 0132 06       		.byte	0x6
 2786 0133 3205     		.2byte	0x532
 2787 0135 8C000000 		.4byte	0x8c
 2788 0139 1C       		.byte	0x1c
 2789 013a 00       		.byte	0
 2790 013b 07       		.uleb128 0x7
 2791 013c AD000000 		.4byte	0xad
 2792 0140 4B010000 		.4byte	0x14b
 2793 0144 08       		.uleb128 0x8
 2794 0145 BF000000 		.4byte	0xbf
 2795 0149 03       		.byte	0x3
 2796 014a 00       		.byte	0
 2797 014b 0B       		.uleb128 0xb
 2798 014c 90060000 		.4byte	.LASF25
 2799 0150 06       		.byte	0x6
 2800 0151 3605     		.2byte	0x536
 2801 0153 06010000 		.4byte	0x106
 2802 0157 03       		.uleb128 0x3
 2803 0158 C7000000 		.4byte	.LASF26
 2804 015c 07       		.byte	0x7
 2805 015d 4E       		.byte	0x4e
 2806 015e 62010000 		.4byte	0x162
 2807 0162 06       		.uleb128 0x6
 2808 0163 04       		.byte	0x4
 2809 0164 68010000 		.4byte	0x168
 2810 0168 0C       		.uleb128 0xc
 2811 0169 5C020000 		.4byte	.LASF107
 2812 016d 0D       		.uleb128 0xd
 2813 016e 01       		.byte	0x1
 2814 016f 37000000 		.4byte	0x37
 2815 0173 07       		.byte	0x7
 2816 0174 63       		.byte	0x63
 2817 0175 98010000 		.4byte	0x198
 2818 0179 0E       		.uleb128 0xe
 2819 017a 20000000 		.4byte	.LASF27
 2820 017e 00       		.byte	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 73


 2821 017f 0E       		.uleb128 0xe
 2822 0180 BF010000 		.4byte	.LASF28
 2823 0184 01       		.byte	0x1
 2824 0185 0E       		.uleb128 0xe
 2825 0186 C3070000 		.4byte	.LASF29
 2826 018a 02       		.byte	0x2
 2827 018b 0E       		.uleb128 0xe
 2828 018c F5040000 		.4byte	.LASF30
 2829 0190 03       		.byte	0x3
 2830 0191 0E       		.uleb128 0xe
 2831 0192 16060000 		.4byte	.LASF31
 2832 0196 04       		.byte	0x4
 2833 0197 00       		.byte	0
 2834 0198 0F       		.uleb128 0xf
 2835 0199 5B000000 		.4byte	.LASF33
 2836 019d 08       		.byte	0x8
 2837 019e 07       		.byte	0x7
 2838 019f 6E       		.byte	0x6e
 2839 01a0 BD010000 		.4byte	0x1bd
 2840 01a4 10       		.uleb128 0x10
 2841 01a5 A7030000 		.4byte	.LASF34
 2842 01a9 07       		.byte	0x7
 2843 01aa 70       		.byte	0x70
 2844 01ab CF000000 		.4byte	0xcf
 2845 01af 00       		.byte	0
 2846 01b0 10       		.uleb128 0x10
 2847 01b1 86030000 		.4byte	.LASF35
 2848 01b5 07       		.byte	0x7
 2849 01b6 71       		.byte	0x71
 2850 01b7 E5000000 		.4byte	0xe5
 2851 01bb 04       		.byte	0x4
 2852 01bc 00       		.byte	0
 2853 01bd 03       		.uleb128 0x3
 2854 01be 8C000000 		.4byte	.LASF36
 2855 01c2 07       		.byte	0x7
 2856 01c3 72       		.byte	0x72
 2857 01c4 98010000 		.4byte	0x198
 2858 01c8 03       		.uleb128 0x3
 2859 01c9 64060000 		.4byte	.LASF37
 2860 01cd 08       		.byte	0x8
 2861 01ce 46       		.byte	0x46
 2862 01cf D3010000 		.4byte	0x1d3
 2863 01d3 06       		.uleb128 0x6
 2864 01d4 04       		.byte	0x4
 2865 01d5 D9010000 		.4byte	0x1d9
 2866 01d9 0F       		.uleb128 0xf
 2867 01da 7A000000 		.4byte	.LASF38
 2868 01de 20       		.byte	0x20
 2869 01df 01       		.byte	0x1
 2870 01e0 8C       		.byte	0x8c
 2871 01e1 46020000 		.4byte	0x246
 2872 01e5 10       		.uleb128 0x10
 2873 01e6 CA050000 		.4byte	.LASF39
 2874 01ea 01       		.byte	0x1
 2875 01eb 8E       		.byte	0x8e
 2876 01ec 46020000 		.4byte	0x246
 2877 01f0 00       		.byte	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 74


 2878 01f1 10       		.uleb128 0x10
 2879 01f2 D1060000 		.4byte	.LASF40
 2880 01f6 01       		.byte	0x1
 2881 01f7 8F       		.byte	0x8f
 2882 01f8 46020000 		.4byte	0x246
 2883 01fc 04       		.byte	0x4
 2884 01fd 10       		.uleb128 0x10
 2885 01fe 70030000 		.4byte	.LASF41
 2886 0202 01       		.byte	0x1
 2887 0203 90       		.byte	0x90
 2888 0204 AD000000 		.4byte	0xad
 2889 0208 08       		.byte	0x8
 2890 0209 10       		.uleb128 0x10
 2891 020a 4E050000 		.4byte	.LASF42
 2892 020e 01       		.byte	0x1
 2893 020f 91       		.byte	0x91
 2894 0210 AD000000 		.4byte	0xad
 2895 0214 0C       		.byte	0xc
 2896 0215 10       		.uleb128 0x10
 2897 0216 2A000000 		.4byte	.LASF43
 2898 021a 01       		.byte	0x1
 2899 021b 92       		.byte	0x92
 2900 021c 4B020000 		.4byte	0x24b
 2901 0220 10       		.byte	0x10
 2902 0221 10       		.uleb128 0x10
 2903 0222 51060000 		.4byte	.LASF44
 2904 0226 01       		.byte	0x1
 2905 0227 93       		.byte	0x93
 2906 0228 4B020000 		.4byte	0x24b
 2907 022c 14       		.byte	0x14
 2908 022d 10       		.uleb128 0x10
 2909 022e 4D010000 		.4byte	.LASF45
 2910 0232 01       		.byte	0x1
 2911 0233 94       		.byte	0x94
 2912 0234 F0000000 		.4byte	0xf0
 2913 0238 18       		.byte	0x18
 2914 0239 10       		.uleb128 0x10
 2915 023a A2040000 		.4byte	.LASF46
 2916 023e 01       		.byte	0x1
 2917 023f 95       		.byte	0x95
 2918 0240 8C000000 		.4byte	0x8c
 2919 0244 1C       		.byte	0x1c
 2920 0245 00       		.byte	0
 2921 0246 11       		.uleb128 0x11
 2922 0247 AD000000 		.4byte	0xad
 2923 024b 11       		.uleb128 0x11
 2924 024c 57010000 		.4byte	0x157
 2925 0250 03       		.uleb128 0x3
 2926 0251 D8070000 		.4byte	.LASF47
 2927 0255 01       		.byte	0x1
 2928 0256 9A       		.byte	0x9a
 2929 0257 D9010000 		.4byte	0x1d9
 2930 025b 12       		.uleb128 0x12
 2931 025c 82010000 		.4byte	.LASF51
 2932 0260 01       		.byte	0x1
 2933 0261 DC       		.byte	0xdc
 2934 0262 C8010000 		.4byte	0x1c8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 75


 2935 0266 00000000 		.4byte	.LFB0
 2936 026a A4000000 		.4byte	.LFE0-.LFB0
 2937 026e 01       		.uleb128 0x1
 2938 026f 9C       		.byte	0x9c
 2939 0270 BB020000 		.4byte	0x2bb
 2940 0274 13       		.uleb128 0x13
 2941 0275 96030000 		.4byte	.LASF48
 2942 0279 01       		.byte	0x1
 2943 027a DC       		.byte	0xdc
 2944 027b AD000000 		.4byte	0xad
 2945 027f 02       		.uleb128 0x2
 2946 0280 91       		.byte	0x91
 2947 0281 64       		.sleb128 -28
 2948 0282 13       		.uleb128 0x13
 2949 0283 4E050000 		.4byte	.LASF42
 2950 0287 01       		.byte	0x1
 2951 0288 DD       		.byte	0xdd
 2952 0289 AD000000 		.4byte	0xad
 2953 028d 02       		.uleb128 0x2
 2954 028e 91       		.byte	0x91
 2955 028f 60       		.sleb128 -32
 2956 0290 13       		.uleb128 0x13
 2957 0291 0C050000 		.4byte	.LASF49
 2958 0295 01       		.byte	0x1
 2959 0296 DE       		.byte	0xde
 2960 0297 CF000000 		.4byte	0xcf
 2961 029b 02       		.uleb128 0x2
 2962 029c 91       		.byte	0x91
 2963 029d 5C       		.sleb128 -36
 2964 029e 14       		.uleb128 0x14
 2965 029f 7C020000 		.4byte	.LASF50
 2966 02a3 01       		.byte	0x1
 2967 02a4 E0       		.byte	0xe0
 2968 02a5 F0000000 		.4byte	0xf0
 2969 02a9 02       		.uleb128 0x2
 2970 02aa 91       		.byte	0x91
 2971 02ab 6C       		.sleb128 -20
 2972 02ac 14       		.uleb128 0x14
 2973 02ad A2040000 		.4byte	.LASF46
 2974 02b1 01       		.byte	0x1
 2975 02b2 E1       		.byte	0xe1
 2976 02b3 8C000000 		.4byte	0x8c
 2977 02b7 02       		.uleb128 0x2
 2978 02b8 91       		.byte	0x91
 2979 02b9 6B       		.sleb128 -21
 2980 02ba 00       		.byte	0
 2981 02bb 15       		.uleb128 0x15
 2982 02bc 47040000 		.4byte	.LASF52
 2983 02c0 01       		.byte	0x1
 2984 02c1 2701     		.2byte	0x127
 2985 02c3 C8010000 		.4byte	0x1c8
 2986 02c7 00000000 		.4byte	.LFB1
 2987 02cb C0000000 		.4byte	.LFE1-.LFB1
 2988 02cf 01       		.uleb128 0x1
 2989 02d0 9C       		.byte	0x9c
 2990 02d1 67030000 		.4byte	0x367
 2991 02d5 16       		.uleb128 0x16
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 76


 2992 02d6 96030000 		.4byte	.LASF48
 2993 02da 01       		.byte	0x1
 2994 02db 2701     		.2byte	0x127
 2995 02dd AD000000 		.4byte	0xad
 2996 02e1 02       		.uleb128 0x2
 2997 02e2 91       		.byte	0x91
 2998 02e3 5C       		.sleb128 -36
 2999 02e4 16       		.uleb128 0x16
 3000 02e5 4E050000 		.4byte	.LASF42
 3001 02e9 01       		.byte	0x1
 3002 02ea 2801     		.2byte	0x128
 3003 02ec AD000000 		.4byte	0xad
 3004 02f0 02       		.uleb128 0x2
 3005 02f1 91       		.byte	0x91
 3006 02f2 58       		.sleb128 -40
 3007 02f3 16       		.uleb128 0x16
 3008 02f4 0C050000 		.4byte	.LASF49
 3009 02f8 01       		.byte	0x1
 3010 02f9 2901     		.2byte	0x129
 3011 02fb CF000000 		.4byte	0xcf
 3012 02ff 02       		.uleb128 0x2
 3013 0300 91       		.byte	0x91
 3014 0301 54       		.sleb128 -44
 3015 0302 16       		.uleb128 0x16
 3016 0303 75070000 		.4byte	.LASF53
 3017 0307 01       		.byte	0x1
 3018 0308 2A01     		.2byte	0x12a
 3019 030a 67030000 		.4byte	0x367
 3020 030e 02       		.uleb128 0x2
 3021 030f 91       		.byte	0x91
 3022 0310 50       		.sleb128 -48
 3023 0311 16       		.uleb128 0x16
 3024 0312 57010000 		.4byte	.LASF54
 3025 0316 01       		.byte	0x1
 3026 0317 2B01     		.2byte	0x12b
 3027 0319 72030000 		.4byte	0x372
 3028 031d 02       		.uleb128 0x2
 3029 031e 91       		.byte	0x91
 3030 031f 00       		.sleb128 0
 3031 0320 17       		.uleb128 0x17
 3032 0321 1D030000 		.4byte	.LASF55
 3033 0325 01       		.byte	0x1
 3034 0326 2D01     		.2byte	0x12d
 3035 0328 7D030000 		.4byte	0x37d
 3036 032c 02       		.uleb128 0x2
 3037 032d 91       		.byte	0x91
 3038 032e 64       		.sleb128 -28
 3039 032f 17       		.uleb128 0x17
 3040 0330 A5060000 		.4byte	.LASF56
 3041 0334 01       		.byte	0x1
 3042 0335 2E01     		.2byte	0x12e
 3043 0337 C8010000 		.4byte	0x1c8
 3044 033b 02       		.uleb128 0x2
 3045 033c 91       		.byte	0x91
 3046 033d 6C       		.sleb128 -20
 3047 033e 17       		.uleb128 0x17
 3048 033f A2040000 		.4byte	.LASF46
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 77


 3049 0343 01       		.byte	0x1
 3050 0344 2F01     		.2byte	0x12f
 3051 0346 8C000000 		.4byte	0x8c
 3052 034a 02       		.uleb128 0x2
 3053 034b 91       		.byte	0x91
 3054 034c 6B       		.sleb128 -21
 3055 034d 18       		.uleb128 0x18
 3056 034e 64000000 		.4byte	.LBB2
 3057 0352 12000000 		.4byte	.LBE2-.LBB2
 3058 0356 17       		.uleb128 0x17
 3059 0357 BD070000 		.4byte	.LASF57
 3060 035b 01       		.byte	0x1
 3061 035c 5201     		.2byte	0x152
 3062 035e 46020000 		.4byte	0x246
 3063 0362 02       		.uleb128 0x2
 3064 0363 91       		.byte	0x91
 3065 0364 60       		.sleb128 -32
 3066 0365 00       		.byte	0
 3067 0366 00       		.byte	0
 3068 0367 19       		.uleb128 0x19
 3069 0368 F0000000 		.4byte	0xf0
 3070 036c 06       		.uleb128 0x6
 3071 036d 04       		.byte	0x4
 3072 036e 4B010000 		.4byte	0x14b
 3073 0372 19       		.uleb128 0x19
 3074 0373 6C030000 		.4byte	0x36c
 3075 0377 06       		.uleb128 0x6
 3076 0378 04       		.byte	0x4
 3077 0379 50020000 		.4byte	0x250
 3078 037d 19       		.uleb128 0x19
 3079 037e 77030000 		.4byte	0x377
 3080 0382 1A       		.uleb128 0x1a
 3081 0383 47000000 		.4byte	.LASF108
 3082 0387 01       		.byte	0x1
 3083 0388 7301     		.2byte	0x173
 3084 038a 00000000 		.4byte	.LFB2
 3085 038e 48000000 		.4byte	.LFE2-.LFB2
 3086 0392 01       		.uleb128 0x1
 3087 0393 9C       		.byte	0x9c
 3088 0394 B7030000 		.4byte	0x3b7
 3089 0398 16       		.uleb128 0x16
 3090 0399 C8010000 		.4byte	.LASF58
 3091 039d 01       		.byte	0x1
 3092 039e 7301     		.2byte	0x173
 3093 03a0 C8010000 		.4byte	0x1c8
 3094 03a4 02       		.uleb128 0x2
 3095 03a5 91       		.byte	0x91
 3096 03a6 6C       		.sleb128 -20
 3097 03a7 17       		.uleb128 0x17
 3098 03a8 1D030000 		.4byte	.LASF55
 3099 03ac 01       		.byte	0x1
 3100 03ad 7501     		.2byte	0x175
 3101 03af 77030000 		.4byte	0x377
 3102 03b3 02       		.uleb128 0x2
 3103 03b4 91       		.byte	0x91
 3104 03b5 74       		.sleb128 -12
 3105 03b6 00       		.byte	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 78


 3106 03b7 15       		.uleb128 0x15
 3107 03b8 68050000 		.4byte	.LASF59
 3108 03bc 01       		.byte	0x1
 3109 03bd 9401     		.2byte	0x194
 3110 03bf CF000000 		.4byte	0xcf
 3111 03c3 00000000 		.4byte	.LFB3
 3112 03c7 60000000 		.4byte	.LFE3-.LFB3
 3113 03cb 01       		.uleb128 0x1
 3114 03cc 9C       		.byte	0x9c
 3115 03cd FF030000 		.4byte	0x3ff
 3116 03d1 16       		.uleb128 0x16
 3117 03d2 C8010000 		.4byte	.LASF58
 3118 03d6 01       		.byte	0x1
 3119 03d7 9401     		.2byte	0x194
 3120 03d9 C8010000 		.4byte	0x1c8
 3121 03dd 02       		.uleb128 0x2
 3122 03de 91       		.byte	0x91
 3123 03df 64       		.sleb128 -28
 3124 03e0 17       		.uleb128 0x17
 3125 03e1 1D030000 		.4byte	.LASF55
 3126 03e5 01       		.byte	0x1
 3127 03e6 9601     		.2byte	0x196
 3128 03e8 7D030000 		.4byte	0x37d
 3129 03ec 02       		.uleb128 0x2
 3130 03ed 91       		.byte	0x91
 3131 03ee 68       		.sleb128 -24
 3132 03ef 17       		.uleb128 0x17
 3133 03f0 A5060000 		.4byte	.LASF56
 3134 03f4 01       		.byte	0x1
 3135 03f5 9701     		.2byte	0x197
 3136 03f7 CF000000 		.4byte	0xcf
 3137 03fb 02       		.uleb128 0x2
 3138 03fc 91       		.byte	0x91
 3139 03fd 6C       		.sleb128 -20
 3140 03fe 00       		.byte	0
 3141 03ff 1B       		.uleb128 0x1b
 3142 0400 B6030000 		.4byte	.LASF60
 3143 0404 01       		.byte	0x1
 3144 0405 C501     		.2byte	0x1c5
 3145 0407 CF000000 		.4byte	0xcf
 3146 040b 00000000 		.4byte	.LFB4
 3147 040f 4C000000 		.4byte	.LFE4-.LFB4
 3148 0413 01       		.uleb128 0x1
 3149 0414 9C       		.byte	0x9c
 3150 0415 56040000 		.4byte	0x456
 3151 0419 16       		.uleb128 0x16
 3152 041a C8010000 		.4byte	.LASF58
 3153 041e 01       		.byte	0x1
 3154 041f C501     		.2byte	0x1c5
 3155 0421 C8010000 		.4byte	0x1c8
 3156 0425 02       		.uleb128 0x2
 3157 0426 91       		.byte	0x91
 3158 0427 6C       		.sleb128 -20
 3159 0428 16       		.uleb128 0x16
 3160 0429 39020000 		.4byte	.LASF61
 3161 042d 01       		.byte	0x1
 3162 042e C601     		.2byte	0x1c6
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 79


 3163 0430 AD000000 		.4byte	0xad
 3164 0434 02       		.uleb128 0x2
 3165 0435 91       		.byte	0x91
 3166 0436 68       		.sleb128 -24
 3167 0437 17       		.uleb128 0x17
 3168 0438 1D030000 		.4byte	.LASF55
 3169 043c 01       		.byte	0x1
 3170 043d C801     		.2byte	0x1c8
 3171 043f 7D030000 		.4byte	0x37d
 3172 0443 02       		.uleb128 0x2
 3173 0444 91       		.byte	0x91
 3174 0445 70       		.sleb128 -16
 3175 0446 17       		.uleb128 0x17
 3176 0447 A5060000 		.4byte	.LASF56
 3177 044b 01       		.byte	0x1
 3178 044c C901     		.2byte	0x1c9
 3179 044e CF000000 		.4byte	0xcf
 3180 0452 02       		.uleb128 0x2
 3181 0453 91       		.byte	0x91
 3182 0454 74       		.sleb128 -12
 3183 0455 00       		.byte	0
 3184 0456 1B       		.uleb128 0x1b
 3185 0457 F1030000 		.4byte	.LASF62
 3186 045b 01       		.byte	0x1
 3187 045c E301     		.2byte	0x1e3
 3188 045e AD000000 		.4byte	0xad
 3189 0462 00000000 		.4byte	.LFB5
 3190 0466 58000000 		.4byte	.LFE5-.LFB5
 3191 046a 01       		.uleb128 0x1
 3192 046b 9C       		.byte	0x9c
 3193 046c 9E040000 		.4byte	0x49e
 3194 0470 16       		.uleb128 0x16
 3195 0471 C8010000 		.4byte	.LASF58
 3196 0475 01       		.byte	0x1
 3197 0476 E301     		.2byte	0x1e3
 3198 0478 C8010000 		.4byte	0x1c8
 3199 047c 02       		.uleb128 0x2
 3200 047d 91       		.byte	0x91
 3201 047e 6C       		.sleb128 -20
 3202 047f 17       		.uleb128 0x17
 3203 0480 1D030000 		.4byte	.LASF55
 3204 0484 01       		.byte	0x1
 3205 0485 E501     		.2byte	0x1e5
 3206 0487 A9040000 		.4byte	0x4a9
 3207 048b 02       		.uleb128 0x2
 3208 048c 91       		.byte	0x91
 3209 048d 70       		.sleb128 -16
 3210 048e 17       		.uleb128 0x17
 3211 048f 61050000 		.4byte	.LASF63
 3212 0493 01       		.byte	0x1
 3213 0494 E601     		.2byte	0x1e6
 3214 0496 AD000000 		.4byte	0xad
 3215 049a 02       		.uleb128 0x2
 3216 049b 91       		.byte	0x91
 3217 049c 74       		.sleb128 -12
 3218 049d 00       		.byte	0
 3219 049e 06       		.uleb128 0x6
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 80


 3220 049f 04       		.byte	0x4
 3221 04a0 A4040000 		.4byte	0x4a4
 3222 04a4 19       		.uleb128 0x19
 3223 04a5 50020000 		.4byte	0x250
 3224 04a9 19       		.uleb128 0x19
 3225 04aa 9E040000 		.4byte	0x49e
 3226 04ae 15       		.uleb128 0x15
 3227 04af 98070000 		.4byte	.LASF64
 3228 04b3 01       		.byte	0x1
 3229 04b4 FB01     		.2byte	0x1fb
 3230 04b6 AD000000 		.4byte	0xad
 3231 04ba 00000000 		.4byte	.LFB6
 3232 04be 34000000 		.4byte	.LFE6-.LFB6
 3233 04c2 01       		.uleb128 0x1
 3234 04c3 9C       		.byte	0x9c
 3235 04c4 F6040000 		.4byte	0x4f6
 3236 04c8 16       		.uleb128 0x16
 3237 04c9 C8010000 		.4byte	.LASF58
 3238 04cd 01       		.byte	0x1
 3239 04ce FB01     		.2byte	0x1fb
 3240 04d0 C8010000 		.4byte	0x1c8
 3241 04d4 02       		.uleb128 0x2
 3242 04d5 91       		.byte	0x91
 3243 04d6 6C       		.sleb128 -20
 3244 04d7 17       		.uleb128 0x17
 3245 04d8 1D030000 		.4byte	.LASF55
 3246 04dc 01       		.byte	0x1
 3247 04dd FD01     		.2byte	0x1fd
 3248 04df A9040000 		.4byte	0x4a9
 3249 04e3 02       		.uleb128 0x2
 3250 04e4 91       		.byte	0x91
 3251 04e5 74       		.sleb128 -12
 3252 04e6 17       		.uleb128 0x17
 3253 04e7 A5060000 		.4byte	.LASF56
 3254 04eb 01       		.byte	0x1
 3255 04ec FE01     		.2byte	0x1fe
 3256 04ee AD000000 		.4byte	0xad
 3257 04f2 02       		.uleb128 0x2
 3258 04f3 91       		.byte	0x91
 3259 04f4 70       		.sleb128 -16
 3260 04f5 00       		.byte	0
 3261 04f6 15       		.uleb128 0x15
 3262 04f7 AA040000 		.4byte	.LASF65
 3263 04fb 01       		.byte	0x1
 3264 04fc 0702     		.2byte	0x207
 3265 04fe AD000000 		.4byte	0xad
 3266 0502 00000000 		.4byte	.LFB7
 3267 0506 68010000 		.4byte	.LFE7-.LFB7
 3268 050a 01       		.uleb128 0x1
 3269 050b 9C       		.byte	0x9c
 3270 050c A7050000 		.4byte	0x5a7
 3271 0510 16       		.uleb128 0x16
 3272 0511 C8010000 		.4byte	.LASF58
 3273 0515 01       		.byte	0x1
 3274 0516 0702     		.2byte	0x207
 3275 0518 C8010000 		.4byte	0x1c8
 3276 051c 02       		.uleb128 0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 81


 3277 051d 91       		.byte	0x91
 3278 051e 4C       		.sleb128 -52
 3279 051f 16       		.uleb128 0x16
 3280 0520 B4070000 		.4byte	.LASF66
 3281 0524 01       		.byte	0x1
 3282 0525 0802     		.2byte	0x208
 3283 0527 A7050000 		.4byte	0x5a7
 3284 052b 02       		.uleb128 0x2
 3285 052c 91       		.byte	0x91
 3286 052d 48       		.sleb128 -56
 3287 052e 16       		.uleb128 0x16
 3288 052f 31010000 		.4byte	.LASF67
 3289 0533 01       		.byte	0x1
 3290 0534 0902     		.2byte	0x209
 3291 0536 AD000000 		.4byte	0xad
 3292 053a 02       		.uleb128 0x2
 3293 053b 91       		.byte	0x91
 3294 053c 44       		.sleb128 -60
 3295 053d 16       		.uleb128 0x16
 3296 053e D6010000 		.4byte	.LASF68
 3297 0542 01       		.byte	0x1
 3298 0543 0A02     		.2byte	0x20a
 3299 0545 E5000000 		.4byte	0xe5
 3300 0549 02       		.uleb128 0x2
 3301 054a 91       		.byte	0x91
 3302 054b 40       		.sleb128 -64
 3303 054c 17       		.uleb128 0x17
 3304 054d 1D030000 		.4byte	.LASF55
 3305 0551 01       		.byte	0x1
 3306 0552 0C02     		.2byte	0x20c
 3307 0554 7D030000 		.4byte	0x37d
 3308 0558 02       		.uleb128 0x2
 3309 0559 91       		.byte	0x91
 3310 055a 64       		.sleb128 -28
 3311 055b 17       		.uleb128 0x17
 3312 055c A5060000 		.4byte	.LASF56
 3313 0560 01       		.byte	0x1
 3314 0561 0D02     		.2byte	0x20d
 3315 0563 AD000000 		.4byte	0xad
 3316 0567 02       		.uleb128 0x2
 3317 0568 91       		.byte	0x91
 3318 0569 5C       		.sleb128 -36
 3319 056a 17       		.uleb128 0x17
 3320 056b 61050000 		.4byte	.LASF63
 3321 056f 01       		.byte	0x1
 3322 0570 0D02     		.2byte	0x20d
 3323 0572 AD000000 		.4byte	0xad
 3324 0576 02       		.uleb128 0x2
 3325 0577 91       		.byte	0x91
 3326 0578 6C       		.sleb128 -20
 3327 0579 17       		.uleb128 0x17
 3328 057a F1010000 		.4byte	.LASF69
 3329 057e 01       		.byte	0x1
 3330 057f 0E02     		.2byte	0x20e
 3331 0581 AD000000 		.4byte	0xad
 3332 0585 02       		.uleb128 0x2
 3333 0586 91       		.byte	0x91
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 82


 3334 0587 68       		.sleb128 -24
 3335 0588 17       		.uleb128 0x17
 3336 0589 79010000 		.4byte	.LASF70
 3337 058d 01       		.byte	0x1
 3338 058e 0F02     		.2byte	0x20f
 3339 0590 BD010000 		.4byte	0x1bd
 3340 0594 02       		.uleb128 0x2
 3341 0595 91       		.byte	0x91
 3342 0596 54       		.sleb128 -44
 3343 0597 17       		.uleb128 0x17
 3344 0598 D3030000 		.4byte	.LASF71
 3345 059c 01       		.byte	0x1
 3346 059d 1302     		.2byte	0x213
 3347 059f AE050000 		.4byte	0x5ae
 3348 05a3 02       		.uleb128 0x2
 3349 05a4 91       		.byte	0x91
 3350 05a5 60       		.sleb128 -32
 3351 05a6 00       		.byte	0
 3352 05a7 06       		.uleb128 0x6
 3353 05a8 04       		.byte	0x4
 3354 05a9 AD050000 		.4byte	0x5ad
 3355 05ad 1C       		.uleb128 0x1c
 3356 05ae 19       		.uleb128 0x19
 3357 05af AD000000 		.4byte	0xad
 3358 05b3 15       		.uleb128 0x15
 3359 05b4 68040000 		.4byte	.LASF72
 3360 05b8 01       		.byte	0x1
 3361 05b9 8902     		.2byte	0x289
 3362 05bb AD000000 		.4byte	0xad
 3363 05bf 00000000 		.4byte	.LFB8
 3364 05c3 BC000000 		.4byte	.LFE8-.LFB8
 3365 05c7 01       		.uleb128 0x1
 3366 05c8 9C       		.byte	0x9c
 3367 05c9 5F060000 		.4byte	0x65f
 3368 05cd 16       		.uleb128 0x16
 3369 05ce C8010000 		.4byte	.LASF58
 3370 05d2 01       		.byte	0x1
 3371 05d3 8902     		.2byte	0x289
 3372 05d5 C8010000 		.4byte	0x1c8
 3373 05d9 02       		.uleb128 0x2
 3374 05da 91       		.byte	0x91
 3375 05db 54       		.sleb128 -44
 3376 05dc 16       		.uleb128 0x16
 3377 05dd B4070000 		.4byte	.LASF66
 3378 05e1 01       		.byte	0x1
 3379 05e2 8A02     		.2byte	0x28a
 3380 05e4 A7050000 		.4byte	0x5a7
 3381 05e8 02       		.uleb128 0x2
 3382 05e9 91       		.byte	0x91
 3383 05ea 50       		.sleb128 -48
 3384 05eb 16       		.uleb128 0x16
 3385 05ec 31010000 		.4byte	.LASF67
 3386 05f0 01       		.byte	0x1
 3387 05f1 8B02     		.2byte	0x28b
 3388 05f3 AD000000 		.4byte	0xad
 3389 05f7 02       		.uleb128 0x2
 3390 05f8 91       		.byte	0x91
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 83


 3391 05f9 4C       		.sleb128 -52
 3392 05fa 16       		.uleb128 0x16
 3393 05fb AD060000 		.4byte	.LASF73
 3394 05ff 01       		.byte	0x1
 3395 0600 8C02     		.2byte	0x28c
 3396 0602 65060000 		.4byte	0x665
 3397 0606 02       		.uleb128 0x2
 3398 0607 91       		.byte	0x91
 3399 0608 48       		.sleb128 -56
 3400 0609 17       		.uleb128 0x17
 3401 060a 1D030000 		.4byte	.LASF55
 3402 060e 01       		.byte	0x1
 3403 060f 8E02     		.2byte	0x28e
 3404 0611 7D030000 		.4byte	0x37d
 3405 0615 02       		.uleb128 0x2
 3406 0616 91       		.byte	0x91
 3407 0617 68       		.sleb128 -24
 3408 0618 17       		.uleb128 0x17
 3409 0619 A5060000 		.4byte	.LASF56
 3410 061d 01       		.byte	0x1
 3411 061e 8F02     		.2byte	0x28f
 3412 0620 AD000000 		.4byte	0xad
 3413 0624 02       		.uleb128 0x2
 3414 0625 91       		.byte	0x91
 3415 0626 60       		.sleb128 -32
 3416 0627 17       		.uleb128 0x17
 3417 0628 61050000 		.4byte	.LASF63
 3418 062c 01       		.byte	0x1
 3419 062d 8F02     		.2byte	0x28f
 3420 062f AD000000 		.4byte	0xad
 3421 0633 02       		.uleb128 0x2
 3422 0634 91       		.byte	0x91
 3423 0635 64       		.sleb128 -28
 3424 0636 17       		.uleb128 0x17
 3425 0637 F1010000 		.4byte	.LASF69
 3426 063b 01       		.byte	0x1
 3427 063c 9002     		.2byte	0x290
 3428 063e AD000000 		.4byte	0xad
 3429 0642 02       		.uleb128 0x2
 3430 0643 91       		.byte	0x91
 3431 0644 6C       		.sleb128 -20
 3432 0645 18       		.uleb128 0x18
 3433 0646 7A000000 		.4byte	.LBB3
 3434 064a 34000000 		.4byte	.LBE3-.LBB3
 3435 064e 17       		.uleb128 0x17
 3436 064f 79060000 		.4byte	.LASF74
 3437 0653 01       		.byte	0x1
 3438 0654 AA02     		.2byte	0x2aa
 3439 0656 DA000000 		.4byte	0xda
 3440 065a 02       		.uleb128 0x2
 3441 065b 91       		.byte	0x91
 3442 065c 5C       		.sleb128 -36
 3443 065d 00       		.byte	0
 3444 065e 00       		.byte	0
 3445 065f 06       		.uleb128 0x6
 3446 0660 04       		.byte	0x4
 3447 0661 CF000000 		.4byte	0xcf
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 84


 3448 0665 19       		.uleb128 0x19
 3449 0666 5F060000 		.4byte	0x65f
 3450 066a 1D       		.uleb128 0x1d
 3451 066b 39060000 		.4byte	.LASF86
 3452 066f 01       		.byte	0x1
 3453 0670 BC02     		.2byte	0x2bc
 3454 0672 AD000000 		.4byte	0xad
 3455 0676 00000000 		.4byte	.LFB9
 3456 067a 7C000000 		.4byte	.LFE9-.LFB9
 3457 067e 01       		.uleb128 0x1
 3458 067f 9C       		.byte	0x9c
 3459 0680 EE060000 		.4byte	0x6ee
 3460 0684 16       		.uleb128 0x16
 3461 0685 1D030000 		.4byte	.LASF55
 3462 0689 01       		.byte	0x1
 3463 068a BC02     		.2byte	0x2bc
 3464 068c 7D030000 		.4byte	0x37d
 3465 0690 02       		.uleb128 0x2
 3466 0691 91       		.byte	0x91
 3467 0692 6C       		.sleb128 -20
 3468 0693 16       		.uleb128 0x16
 3469 0694 B4070000 		.4byte	.LASF66
 3470 0698 01       		.byte	0x1
 3471 0699 BD02     		.2byte	0x2bd
 3472 069b A7050000 		.4byte	0x5a7
 3473 069f 02       		.uleb128 0x2
 3474 06a0 91       		.byte	0x91
 3475 06a1 68       		.sleb128 -24
 3476 06a2 16       		.uleb128 0x16
 3477 06a3 31010000 		.4byte	.LASF67
 3478 06a7 01       		.byte	0x1
 3479 06a8 BE02     		.2byte	0x2be
 3480 06aa AD000000 		.4byte	0xad
 3481 06ae 02       		.uleb128 0x2
 3482 06af 91       		.byte	0x91
 3483 06b0 64       		.sleb128 -28
 3484 06b1 16       		.uleb128 0x16
 3485 06b2 61050000 		.4byte	.LASF63
 3486 06b6 01       		.byte	0x1
 3487 06b7 BF02     		.2byte	0x2bf
 3488 06b9 AD000000 		.4byte	0xad
 3489 06bd 02       		.uleb128 0x2
 3490 06be 91       		.byte	0x91
 3491 06bf 60       		.sleb128 -32
 3492 06c0 16       		.uleb128 0x16
 3493 06c1 F1010000 		.4byte	.LASF69
 3494 06c5 01       		.byte	0x1
 3495 06c6 C002     		.2byte	0x2c0
 3496 06c8 AD000000 		.4byte	0xad
 3497 06cc 02       		.uleb128 0x2
 3498 06cd 91       		.byte	0x91
 3499 06ce 00       		.sleb128 0
 3500 06cf 17       		.uleb128 0x17
 3501 06d0 00000000 		.4byte	.LASF75
 3502 06d4 01       		.byte	0x1
 3503 06d5 C202     		.2byte	0x2c2
 3504 06d7 CF000000 		.4byte	0xcf
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 85


 3505 06db 02       		.uleb128 0x2
 3506 06dc 91       		.byte	0x91
 3507 06dd 74       		.sleb128 -12
 3508 06de 17       		.uleb128 0x17
 3509 06df A5060000 		.4byte	.LASF56
 3510 06e3 01       		.byte	0x1
 3511 06e4 C302     		.2byte	0x2c3
 3512 06e6 AD000000 		.4byte	0xad
 3513 06ea 02       		.uleb128 0x2
 3514 06eb 91       		.byte	0x91
 3515 06ec 70       		.sleb128 -16
 3516 06ed 00       		.byte	0
 3517 06ee 15       		.uleb128 0x15
 3518 06ef 65000000 		.4byte	.LASF76
 3519 06f3 01       		.byte	0x1
 3520 06f4 F002     		.2byte	0x2f0
 3521 06f6 AD000000 		.4byte	0xad
 3522 06fa 00000000 		.4byte	.LFB10
 3523 06fe 1C010000 		.4byte	.LFE10-.LFB10
 3524 0702 01       		.uleb128 0x1
 3525 0703 9C       		.byte	0x9c
 3526 0704 81070000 		.4byte	0x781
 3527 0708 16       		.uleb128 0x16
 3528 0709 C8010000 		.4byte	.LASF58
 3529 070d 01       		.byte	0x1
 3530 070e F002     		.2byte	0x2f0
 3531 0710 C8010000 		.4byte	0x1c8
 3532 0714 02       		.uleb128 0x2
 3533 0715 91       		.byte	0x91
 3534 0716 5C       		.sleb128 -36
 3535 0717 16       		.uleb128 0x16
 3536 0718 5B030000 		.4byte	.LASF77
 3537 071c 01       		.byte	0x1
 3538 071d F102     		.2byte	0x2f1
 3539 071f C6000000 		.4byte	0xc6
 3540 0723 02       		.uleb128 0x2
 3541 0724 91       		.byte	0x91
 3542 0725 58       		.sleb128 -40
 3543 0726 16       		.uleb128 0x16
 3544 0727 0D000000 		.4byte	.LASF78
 3545 072b 01       		.byte	0x1
 3546 072c F202     		.2byte	0x2f2
 3547 072e AD000000 		.4byte	0xad
 3548 0732 02       		.uleb128 0x2
 3549 0733 91       		.byte	0x91
 3550 0734 54       		.sleb128 -44
 3551 0735 16       		.uleb128 0x16
 3552 0736 D6010000 		.4byte	.LASF68
 3553 073a 01       		.byte	0x1
 3554 073b F302     		.2byte	0x2f3
 3555 073d E5000000 		.4byte	0xe5
 3556 0741 02       		.uleb128 0x2
 3557 0742 91       		.byte	0x91
 3558 0743 50       		.sleb128 -48
 3559 0744 17       		.uleb128 0x17
 3560 0745 1D030000 		.4byte	.LASF55
 3561 0749 01       		.byte	0x1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 86


 3562 074a F502     		.2byte	0x2f5
 3563 074c 7D030000 		.4byte	0x37d
 3564 0750 02       		.uleb128 0x2
 3565 0751 91       		.byte	0x91
 3566 0752 60       		.sleb128 -32
 3567 0753 17       		.uleb128 0x17
 3568 0754 A5010000 		.4byte	.LASF79
 3569 0758 01       		.byte	0x1
 3570 0759 F602     		.2byte	0x2f6
 3571 075b AD000000 		.4byte	0xad
 3572 075f 02       		.uleb128 0x2
 3573 0760 91       		.byte	0x91
 3574 0761 6C       		.sleb128 -20
 3575 0762 17       		.uleb128 0x17
 3576 0763 F9000000 		.4byte	.LASF80
 3577 0767 01       		.byte	0x1
 3578 0768 F602     		.2byte	0x2f6
 3579 076a AD000000 		.4byte	0xad
 3580 076e 02       		.uleb128 0x2
 3581 076f 91       		.byte	0x91
 3582 0770 68       		.sleb128 -24
 3583 0771 17       		.uleb128 0x17
 3584 0772 8D050000 		.4byte	.LASF81
 3585 0776 01       		.byte	0x1
 3586 0777 F602     		.2byte	0x2f6
 3587 0779 AD000000 		.4byte	0xad
 3588 077d 02       		.uleb128 0x2
 3589 077e 91       		.byte	0x91
 3590 077f 64       		.sleb128 -28
 3591 0780 00       		.byte	0
 3592 0781 15       		.uleb128 0x15
 3593 0782 F2050000 		.4byte	.LASF82
 3594 0786 01       		.byte	0x1
 3595 0787 5803     		.2byte	0x358
 3596 0789 AD000000 		.4byte	0xad
 3597 078d 00000000 		.4byte	.LFB11
 3598 0791 7C000000 		.4byte	.LFE11-.LFB11
 3599 0795 01       		.uleb128 0x1
 3600 0796 9C       		.byte	0x9c
 3601 0797 F6070000 		.4byte	0x7f6
 3602 079b 16       		.uleb128 0x16
 3603 079c C8010000 		.4byte	.LASF58
 3604 07a0 01       		.byte	0x1
 3605 07a1 5803     		.2byte	0x358
 3606 07a3 C8010000 		.4byte	0x1c8
 3607 07a7 02       		.uleb128 0x2
 3608 07a8 91       		.byte	0x91
 3609 07a9 5C       		.sleb128 -36
 3610 07aa 17       		.uleb128 0x17
 3611 07ab 1D030000 		.4byte	.LASF55
 3612 07af 01       		.byte	0x1
 3613 07b0 5A03     		.2byte	0x35a
 3614 07b2 7D030000 		.4byte	0x37d
 3615 07b6 02       		.uleb128 0x2
 3616 07b7 91       		.byte	0x91
 3617 07b8 70       		.sleb128 -16
 3618 07b9 17       		.uleb128 0x17
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 87


 3619 07ba A5060000 		.4byte	.LASF56
 3620 07be 01       		.byte	0x1
 3621 07bf 5B03     		.2byte	0x35b
 3622 07c1 AD000000 		.4byte	0xad
 3623 07c5 02       		.uleb128 0x2
 3624 07c6 91       		.byte	0x91
 3625 07c7 74       		.sleb128 -12
 3626 07c8 17       		.uleb128 0x17
 3627 07c9 F9000000 		.4byte	.LASF80
 3628 07cd 01       		.byte	0x1
 3629 07ce 5B03     		.2byte	0x35b
 3630 07d0 AD000000 		.4byte	0xad
 3631 07d4 02       		.uleb128 0x2
 3632 07d5 91       		.byte	0x91
 3633 07d6 6C       		.sleb128 -20
 3634 07d7 17       		.uleb128 0x17
 3635 07d8 4A070000 		.4byte	.LASF83
 3636 07dc 01       		.byte	0x1
 3637 07dd 5B03     		.2byte	0x35b
 3638 07df AD000000 		.4byte	0xad
 3639 07e3 02       		.uleb128 0x2
 3640 07e4 91       		.byte	0x91
 3641 07e5 68       		.sleb128 -24
 3642 07e6 17       		.uleb128 0x17
 3643 07e7 70020000 		.4byte	.LASF84
 3644 07eb 01       		.byte	0x1
 3645 07ec 5C03     		.2byte	0x35c
 3646 07ee AD000000 		.4byte	0xad
 3647 07f2 02       		.uleb128 0x2
 3648 07f3 91       		.byte	0x91
 3649 07f4 64       		.sleb128 -28
 3650 07f5 00       		.byte	0
 3651 07f6 15       		.uleb128 0x15
 3652 07f7 00020000 		.4byte	.LASF85
 3653 07fb 01       		.byte	0x1
 3654 07fc 8503     		.2byte	0x385
 3655 07fe AD000000 		.4byte	0xad
 3656 0802 00000000 		.4byte	.LFB12
 3657 0806 B8000000 		.4byte	.LFE12-.LFB12
 3658 080a 01       		.uleb128 0x1
 3659 080b 9C       		.byte	0x9c
 3660 080c A2080000 		.4byte	0x8a2
 3661 0810 16       		.uleb128 0x16
 3662 0811 C8010000 		.4byte	.LASF58
 3663 0815 01       		.byte	0x1
 3664 0816 8503     		.2byte	0x385
 3665 0818 C8010000 		.4byte	0x1c8
 3666 081c 02       		.uleb128 0x2
 3667 081d 91       		.byte	0x91
 3668 081e 54       		.sleb128 -44
 3669 081f 16       		.uleb128 0x16
 3670 0820 5B030000 		.4byte	.LASF77
 3671 0824 01       		.byte	0x1
 3672 0825 8603     		.2byte	0x386
 3673 0827 C6000000 		.4byte	0xc6
 3674 082b 02       		.uleb128 0x2
 3675 082c 91       		.byte	0x91
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 88


 3676 082d 50       		.sleb128 -48
 3677 082e 16       		.uleb128 0x16
 3678 082f 0D000000 		.4byte	.LASF78
 3679 0833 01       		.byte	0x1
 3680 0834 8703     		.2byte	0x387
 3681 0836 AD000000 		.4byte	0xad
 3682 083a 02       		.uleb128 0x2
 3683 083b 91       		.byte	0x91
 3684 083c 4C       		.sleb128 -52
 3685 083d 16       		.uleb128 0x16
 3686 083e AD060000 		.4byte	.LASF73
 3687 0842 01       		.byte	0x1
 3688 0843 8803     		.2byte	0x388
 3689 0845 65060000 		.4byte	0x665
 3690 0849 02       		.uleb128 0x2
 3691 084a 91       		.byte	0x91
 3692 084b 48       		.sleb128 -56
 3693 084c 17       		.uleb128 0x17
 3694 084d 1D030000 		.4byte	.LASF55
 3695 0851 01       		.byte	0x1
 3696 0852 8A03     		.2byte	0x38a
 3697 0854 7D030000 		.4byte	0x37d
 3698 0858 02       		.uleb128 0x2
 3699 0859 91       		.byte	0x91
 3700 085a 64       		.sleb128 -28
 3701 085b 17       		.uleb128 0x17
 3702 085c A5010000 		.4byte	.LASF79
 3703 0860 01       		.byte	0x1
 3704 0861 8B03     		.2byte	0x38b
 3705 0863 AD000000 		.4byte	0xad
 3706 0867 02       		.uleb128 0x2
 3707 0868 91       		.byte	0x91
 3708 0869 6C       		.sleb128 -20
 3709 086a 17       		.uleb128 0x17
 3710 086b F9000000 		.4byte	.LASF80
 3711 086f 01       		.byte	0x1
 3712 0870 8B03     		.2byte	0x38b
 3713 0872 AD000000 		.4byte	0xad
 3714 0876 02       		.uleb128 0x2
 3715 0877 91       		.byte	0x91
 3716 0878 60       		.sleb128 -32
 3717 0879 17       		.uleb128 0x17
 3718 087a 8D050000 		.4byte	.LASF81
 3719 087e 01       		.byte	0x1
 3720 087f 8B03     		.2byte	0x38b
 3721 0881 AD000000 		.4byte	0xad
 3722 0885 02       		.uleb128 0x2
 3723 0886 91       		.byte	0x91
 3724 0887 68       		.sleb128 -24
 3725 0888 18       		.uleb128 0x18
 3726 0889 74000000 		.4byte	.LBB4
 3727 088d 34000000 		.4byte	.LBE4-.LBB4
 3728 0891 17       		.uleb128 0x17
 3729 0892 79060000 		.4byte	.LASF74
 3730 0896 01       		.byte	0x1
 3731 0897 AC03     		.2byte	0x3ac
 3732 0899 DA000000 		.4byte	0xda
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 89


 3733 089d 02       		.uleb128 0x2
 3734 089e 91       		.byte	0x91
 3735 089f 5C       		.sleb128 -36
 3736 08a0 00       		.byte	0
 3737 08a1 00       		.byte	0
 3738 08a2 1D       		.uleb128 0x1d
 3739 08a3 25040000 		.4byte	.LASF87
 3740 08a7 01       		.byte	0x1
 3741 08a8 BE03     		.2byte	0x3be
 3742 08aa AD000000 		.4byte	0xad
 3743 08ae 00000000 		.4byte	.LFB13
 3744 08b2 66000000 		.4byte	.LFE13-.LFB13
 3745 08b6 01       		.uleb128 0x1
 3746 08b7 9C       		.byte	0x9c
 3747 08b8 44090000 		.4byte	0x944
 3748 08bc 16       		.uleb128 0x16
 3749 08bd 1D030000 		.4byte	.LASF55
 3750 08c1 01       		.byte	0x1
 3751 08c2 BE03     		.2byte	0x3be
 3752 08c4 77030000 		.4byte	0x377
 3753 08c8 02       		.uleb128 0x2
 3754 08c9 91       		.byte	0x91
 3755 08ca 64       		.sleb128 -28
 3756 08cb 16       		.uleb128 0x16
 3757 08cc 5B030000 		.4byte	.LASF77
 3758 08d0 01       		.byte	0x1
 3759 08d1 BF03     		.2byte	0x3bf
 3760 08d3 C6000000 		.4byte	0xc6
 3761 08d7 02       		.uleb128 0x2
 3762 08d8 91       		.byte	0x91
 3763 08d9 60       		.sleb128 -32
 3764 08da 16       		.uleb128 0x16
 3765 08db 0D000000 		.4byte	.LASF78
 3766 08df 01       		.byte	0x1
 3767 08e0 C003     		.2byte	0x3c0
 3768 08e2 AD000000 		.4byte	0xad
 3769 08e6 02       		.uleb128 0x2
 3770 08e7 91       		.byte	0x91
 3771 08e8 5C       		.sleb128 -36
 3772 08e9 16       		.uleb128 0x16
 3773 08ea F9000000 		.4byte	.LASF80
 3774 08ee 01       		.byte	0x1
 3775 08ef C103     		.2byte	0x3c1
 3776 08f1 AD000000 		.4byte	0xad
 3777 08f5 02       		.uleb128 0x2
 3778 08f6 91       		.byte	0x91
 3779 08f7 58       		.sleb128 -40
 3780 08f8 16       		.uleb128 0x16
 3781 08f9 8D050000 		.4byte	.LASF81
 3782 08fd 01       		.byte	0x1
 3783 08fe C203     		.2byte	0x3c2
 3784 0900 AD000000 		.4byte	0xad
 3785 0904 02       		.uleb128 0x2
 3786 0905 91       		.byte	0x91
 3787 0906 00       		.sleb128 0
 3788 0907 17       		.uleb128 0x17
 3789 0908 4A070000 		.4byte	.LASF83
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 90


 3790 090c 01       		.byte	0x1
 3791 090d C403     		.2byte	0x3c4
 3792 090f AD000000 		.4byte	0xad
 3793 0913 02       		.uleb128 0x2
 3794 0914 91       		.byte	0x91
 3795 0915 70       		.sleb128 -16
 3796 0916 17       		.uleb128 0x17
 3797 0917 A5010000 		.4byte	.LASF79
 3798 091b 01       		.byte	0x1
 3799 091c C403     		.2byte	0x3c4
 3800 091e AD000000 		.4byte	0xad
 3801 0922 02       		.uleb128 0x2
 3802 0923 91       		.byte	0x91
 3803 0924 6C       		.sleb128 -20
 3804 0925 17       		.uleb128 0x17
 3805 0926 09010000 		.4byte	.LASF88
 3806 092a 01       		.byte	0x1
 3807 092b C403     		.2byte	0x3c4
 3808 092d AD000000 		.4byte	0xad
 3809 0931 02       		.uleb128 0x2
 3810 0932 91       		.byte	0x91
 3811 0933 74       		.sleb128 -12
 3812 0934 17       		.uleb128 0x17
 3813 0935 1D050000 		.4byte	.LASF89
 3814 0939 01       		.byte	0x1
 3815 093a C503     		.2byte	0x3c5
 3816 093c AD000000 		.4byte	0xad
 3817 0940 02       		.uleb128 0x2
 3818 0941 91       		.byte	0x91
 3819 0942 68       		.sleb128 -24
 3820 0943 00       		.byte	0
 3821 0944 1B       		.uleb128 0x1b
 3822 0945 47020000 		.4byte	.LASF90
 3823 0949 01       		.byte	0x1
 3824 094a F203     		.2byte	0x3f2
 3825 094c CF000000 		.4byte	0xcf
 3826 0950 00000000 		.4byte	.LFB14
 3827 0954 40000000 		.4byte	.LFE14-.LFB14
 3828 0958 01       		.uleb128 0x1
 3829 0959 9C       		.byte	0x9c
 3830 095a 9B090000 		.4byte	0x99b
 3831 095e 16       		.uleb128 0x16
 3832 095f C8010000 		.4byte	.LASF58
 3833 0963 01       		.byte	0x1
 3834 0964 F203     		.2byte	0x3f2
 3835 0966 C8010000 		.4byte	0x1c8
 3836 096a 02       		.uleb128 0x2
 3837 096b 91       		.byte	0x91
 3838 096c 64       		.sleb128 -28
 3839 096d 17       		.uleb128 0x17
 3840 096e 1D030000 		.4byte	.LASF55
 3841 0972 01       		.byte	0x1
 3842 0973 F403     		.2byte	0x3f4
 3843 0975 A9040000 		.4byte	0x4a9
 3844 0979 02       		.uleb128 0x2
 3845 097a 91       		.byte	0x91
 3846 097b 70       		.sleb128 -16
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 91


 3847 097c 17       		.uleb128 0x17
 3848 097d A5060000 		.4byte	.LASF56
 3849 0981 01       		.byte	0x1
 3850 0982 F503     		.2byte	0x3f5
 3851 0984 CF000000 		.4byte	0xcf
 3852 0988 02       		.uleb128 0x2
 3853 0989 91       		.byte	0x91
 3854 098a 74       		.sleb128 -12
 3855 098b 17       		.uleb128 0x17
 3856 098c CA050000 		.4byte	.LASF39
 3857 0990 01       		.byte	0x1
 3858 0991 F603     		.2byte	0x3f6
 3859 0993 AD000000 		.4byte	0xad
 3860 0997 02       		.uleb128 0x2
 3861 0998 91       		.byte	0x91
 3862 0999 6C       		.sleb128 -20
 3863 099a 00       		.byte	0
 3864 099b 15       		.uleb128 0x15
 3865 099c 1C020000 		.4byte	.LASF91
 3866 09a0 01       		.byte	0x1
 3867 09a1 0A04     		.2byte	0x40a
 3868 09a3 CF000000 		.4byte	0xcf
 3869 09a7 00000000 		.4byte	.LFB15
 3870 09ab 58000000 		.4byte	.LFE15-.LFB15
 3871 09af 01       		.uleb128 0x1
 3872 09b0 9C       		.byte	0x9c
 3873 09b1 F2090000 		.4byte	0x9f2
 3874 09b5 16       		.uleb128 0x16
 3875 09b6 C8010000 		.4byte	.LASF58
 3876 09ba 01       		.byte	0x1
 3877 09bb 0A04     		.2byte	0x40a
 3878 09bd C8010000 		.4byte	0x1c8
 3879 09c1 02       		.uleb128 0x2
 3880 09c2 91       		.byte	0x91
 3881 09c3 64       		.sleb128 -28
 3882 09c4 17       		.uleb128 0x17
 3883 09c5 A5060000 		.4byte	.LASF56
 3884 09c9 01       		.byte	0x1
 3885 09ca 0C04     		.2byte	0x40c
 3886 09cc CF000000 		.4byte	0xcf
 3887 09d0 02       		.uleb128 0x2
 3888 09d1 91       		.byte	0x91
 3889 09d2 74       		.sleb128 -12
 3890 09d3 17       		.uleb128 0x17
 3891 09d4 8D050000 		.4byte	.LASF81
 3892 09d8 01       		.byte	0x1
 3893 09d9 0D04     		.2byte	0x40d
 3894 09db AD000000 		.4byte	0xad
 3895 09df 02       		.uleb128 0x2
 3896 09e0 91       		.byte	0x91
 3897 09e1 70       		.sleb128 -16
 3898 09e2 17       		.uleb128 0x17
 3899 09e3 1D030000 		.4byte	.LASF55
 3900 09e7 01       		.byte	0x1
 3901 09e8 0E04     		.2byte	0x40e
 3902 09ea A9040000 		.4byte	0x4a9
 3903 09ee 02       		.uleb128 0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 92


 3904 09ef 91       		.byte	0x91
 3905 09f0 6C       		.sleb128 -20
 3906 09f1 00       		.byte	0
 3907 09f2 15       		.uleb128 0x15
 3908 09f3 D0050000 		.4byte	.LASF92
 3909 09f7 01       		.byte	0x1
 3910 09f8 2D04     		.2byte	0x42d
 3911 09fa CF000000 		.4byte	0xcf
 3912 09fe 00000000 		.4byte	.LFB16
 3913 0a02 68000000 		.4byte	.LFE16-.LFB16
 3914 0a06 01       		.uleb128 0x1
 3915 0a07 9C       		.byte	0x9c
 3916 0a08 580A0000 		.4byte	0xa58
 3917 0a0c 16       		.uleb128 0x16
 3918 0a0d C8010000 		.4byte	.LASF58
 3919 0a11 01       		.byte	0x1
 3920 0a12 2D04     		.2byte	0x42d
 3921 0a14 C8010000 		.4byte	0x1c8
 3922 0a18 02       		.uleb128 0x2
 3923 0a19 91       		.byte	0x91
 3924 0a1a 64       		.sleb128 -28
 3925 0a1b 16       		.uleb128 0x16
 3926 0a1c AD060000 		.4byte	.LASF73
 3927 0a20 01       		.byte	0x1
 3928 0a21 2E04     		.2byte	0x42e
 3929 0a23 5F060000 		.4byte	0x65f
 3930 0a27 02       		.uleb128 0x2
 3931 0a28 91       		.byte	0x91
 3932 0a29 60       		.sleb128 -32
 3933 0a2a 17       		.uleb128 0x17
 3934 0a2b 1D030000 		.4byte	.LASF55
 3935 0a2f 01       		.byte	0x1
 3936 0a30 3004     		.2byte	0x430
 3937 0a32 7D030000 		.4byte	0x37d
 3938 0a36 02       		.uleb128 0x2
 3939 0a37 91       		.byte	0x91
 3940 0a38 70       		.sleb128 -16
 3941 0a39 17       		.uleb128 0x17
 3942 0a3a A5060000 		.4byte	.LASF56
 3943 0a3e 01       		.byte	0x1
 3944 0a3f 3104     		.2byte	0x431
 3945 0a41 CF000000 		.4byte	0xcf
 3946 0a45 02       		.uleb128 0x2
 3947 0a46 91       		.byte	0x91
 3948 0a47 74       		.sleb128 -12
 3949 0a48 17       		.uleb128 0x17
 3950 0a49 79060000 		.4byte	.LASF74
 3951 0a4d 01       		.byte	0x1
 3952 0a4e 3204     		.2byte	0x432
 3953 0a50 DA000000 		.4byte	0xda
 3954 0a54 02       		.uleb128 0x2
 3955 0a55 91       		.byte	0x91
 3956 0a56 6C       		.sleb128 -20
 3957 0a57 00       		.byte	0
 3958 0a58 15       		.uleb128 0x15
 3959 0a59 D4000000 		.4byte	.LASF93
 3960 0a5d 01       		.byte	0x1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 93


 3961 0a5e 4C04     		.2byte	0x44c
 3962 0a60 CF000000 		.4byte	0xcf
 3963 0a64 00000000 		.4byte	.LFB17
 3964 0a68 68000000 		.4byte	.LFE17-.LFB17
 3965 0a6c 01       		.uleb128 0x1
 3966 0a6d 9C       		.byte	0x9c
 3967 0a6e BE0A0000 		.4byte	0xabe
 3968 0a72 16       		.uleb128 0x16
 3969 0a73 C8010000 		.4byte	.LASF58
 3970 0a77 01       		.byte	0x1
 3971 0a78 4C04     		.2byte	0x44c
 3972 0a7a C8010000 		.4byte	0x1c8
 3973 0a7e 02       		.uleb128 0x2
 3974 0a7f 91       		.byte	0x91
 3975 0a80 64       		.sleb128 -28
 3976 0a81 16       		.uleb128 0x16
 3977 0a82 AD060000 		.4byte	.LASF73
 3978 0a86 01       		.byte	0x1
 3979 0a87 4D04     		.2byte	0x44d
 3980 0a89 5F060000 		.4byte	0x65f
 3981 0a8d 02       		.uleb128 0x2
 3982 0a8e 91       		.byte	0x91
 3983 0a8f 60       		.sleb128 -32
 3984 0a90 17       		.uleb128 0x17
 3985 0a91 1D030000 		.4byte	.LASF55
 3986 0a95 01       		.byte	0x1
 3987 0a96 4F04     		.2byte	0x44f
 3988 0a98 7D030000 		.4byte	0x37d
 3989 0a9c 02       		.uleb128 0x2
 3990 0a9d 91       		.byte	0x91
 3991 0a9e 70       		.sleb128 -16
 3992 0a9f 17       		.uleb128 0x17
 3993 0aa0 A5060000 		.4byte	.LASF56
 3994 0aa4 01       		.byte	0x1
 3995 0aa5 5004     		.2byte	0x450
 3996 0aa7 CF000000 		.4byte	0xcf
 3997 0aab 02       		.uleb128 0x2
 3998 0aac 91       		.byte	0x91
 3999 0aad 74       		.sleb128 -12
 4000 0aae 17       		.uleb128 0x17
 4001 0aaf 79060000 		.4byte	.LASF74
 4002 0ab3 01       		.byte	0x1
 4003 0ab4 5104     		.2byte	0x451
 4004 0ab6 DA000000 		.4byte	0xda
 4005 0aba 02       		.uleb128 0x2
 4006 0abb 91       		.byte	0x91
 4007 0abc 6C       		.sleb128 -20
 4008 0abd 00       		.byte	0
 4009 0abe 1D       		.uleb128 0x1d
 4010 0abf B4050000 		.4byte	.LASF94
 4011 0ac3 01       		.byte	0x1
 4012 0ac4 6B04     		.2byte	0x46b
 4013 0ac6 AD000000 		.4byte	0xad
 4014 0aca 00000000 		.4byte	.LFB18
 4015 0ace A8000000 		.4byte	.LFE18-.LFB18
 4016 0ad2 01       		.uleb128 0x1
 4017 0ad3 9C       		.byte	0x9c
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 94


 4018 0ad4 240B0000 		.4byte	0xb24
 4019 0ad8 16       		.uleb128 0x16
 4020 0ad9 1D030000 		.4byte	.LASF55
 4021 0add 01       		.byte	0x1
 4022 0ade 6B04     		.2byte	0x46b
 4023 0ae0 7D030000 		.4byte	0x37d
 4024 0ae4 02       		.uleb128 0x2
 4025 0ae5 91       		.byte	0x91
 4026 0ae6 6C       		.sleb128 -20
 4027 0ae7 16       		.uleb128 0x16
 4028 0ae8 90070000 		.4byte	.LASF95
 4029 0aec 01       		.byte	0x1
 4030 0aed 6C04     		.2byte	0x46c
 4031 0aef 240B0000 		.4byte	0xb24
 4032 0af3 02       		.uleb128 0x2
 4033 0af4 91       		.byte	0x91
 4034 0af5 68       		.sleb128 -24
 4035 0af6 16       		.uleb128 0x16
 4036 0af7 40000000 		.4byte	.LASF96
 4037 0afb 01       		.byte	0x1
 4038 0afc 6D04     		.2byte	0x46d
 4039 0afe AD000000 		.4byte	0xad
 4040 0b02 02       		.uleb128 0x2
 4041 0b03 91       		.byte	0x91
 4042 0b04 64       		.sleb128 -28
 4043 0b05 17       		.uleb128 0x17
 4044 0b06 1C010000 		.4byte	.LASF97
 4045 0b0a 01       		.byte	0x1
 4046 0b0b 6F04     		.2byte	0x46f
 4047 0b0d AD000000 		.4byte	0xad
 4048 0b11 02       		.uleb128 0x2
 4049 0b12 91       		.byte	0x91
 4050 0b13 74       		.sleb128 -12
 4051 0b14 17       		.uleb128 0x17
 4052 0b15 6C010000 		.4byte	.LASF98
 4053 0b19 01       		.byte	0x1
 4054 0b1a 6F04     		.2byte	0x46f
 4055 0b1c AD000000 		.4byte	0xad
 4056 0b20 02       		.uleb128 0x2
 4057 0b21 91       		.byte	0x91
 4058 0b22 70       		.sleb128 -16
 4059 0b23 00       		.byte	0
 4060 0b24 06       		.uleb128 0x6
 4061 0b25 04       		.byte	0x4
 4062 0b26 2A0B0000 		.4byte	0xb2a
 4063 0b2a 19       		.uleb128 0x19
 4064 0b2b 8C000000 		.4byte	0x8c
 4065 0b2f 1D       		.uleb128 0x1d
 4066 0b30 B0000000 		.4byte	.LASF99
 4067 0b34 01       		.byte	0x1
 4068 0b35 9C04     		.2byte	0x49c
 4069 0b37 AD000000 		.4byte	0xad
 4070 0b3b 00000000 		.4byte	.LFB19
 4071 0b3f BC000000 		.4byte	.LFE19-.LFB19
 4072 0b43 01       		.uleb128 0x1
 4073 0b44 9C       		.byte	0x9c
 4074 0b45 B30B0000 		.4byte	0xbb3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 95


 4075 0b49 16       		.uleb128 0x16
 4076 0b4a 1D030000 		.4byte	.LASF55
 4077 0b4e 01       		.byte	0x1
 4078 0b4f 9C04     		.2byte	0x49c
 4079 0b51 77030000 		.4byte	0x377
 4080 0b55 02       		.uleb128 0x2
 4081 0b56 91       		.byte	0x91
 4082 0b57 64       		.sleb128 -28
 4083 0b58 16       		.uleb128 0x16
 4084 0b59 90070000 		.4byte	.LASF95
 4085 0b5d 01       		.byte	0x1
 4086 0b5e 9D04     		.2byte	0x49d
 4087 0b60 F0000000 		.4byte	0xf0
 4088 0b64 02       		.uleb128 0x2
 4089 0b65 91       		.byte	0x91
 4090 0b66 60       		.sleb128 -32
 4091 0b67 16       		.uleb128 0x16
 4092 0b68 B5010000 		.4byte	.LASF100
 4093 0b6c 01       		.byte	0x1
 4094 0b6d 9E04     		.2byte	0x49e
 4095 0b6f AD000000 		.4byte	0xad
 4096 0b73 02       		.uleb128 0x2
 4097 0b74 91       		.byte	0x91
 4098 0b75 5C       		.sleb128 -36
 4099 0b76 16       		.uleb128 0x16
 4100 0b77 F9000000 		.4byte	.LASF80
 4101 0b7b 01       		.byte	0x1
 4102 0b7c 9F04     		.2byte	0x49f
 4103 0b7e AD000000 		.4byte	0xad
 4104 0b82 02       		.uleb128 0x2
 4105 0b83 91       		.byte	0x91
 4106 0b84 58       		.sleb128 -40
 4107 0b85 17       		.uleb128 0x17
 4108 0b86 40000000 		.4byte	.LASF96
 4109 0b8a 01       		.byte	0x1
 4110 0b8b A104     		.2byte	0x4a1
 4111 0b8d AD000000 		.4byte	0xad
 4112 0b91 02       		.uleb128 0x2
 4113 0b92 91       		.byte	0x91
 4114 0b93 70       		.sleb128 -16
 4115 0b94 17       		.uleb128 0x17
 4116 0b95 6C010000 		.4byte	.LASF98
 4117 0b99 01       		.byte	0x1
 4118 0b9a A104     		.2byte	0x4a1
 4119 0b9c AD000000 		.4byte	0xad
 4120 0ba0 02       		.uleb128 0x2
 4121 0ba1 91       		.byte	0x91
 4122 0ba2 6C       		.sleb128 -20
 4123 0ba3 17       		.uleb128 0x17
 4124 0ba4 C7060000 		.4byte	.LASF101
 4125 0ba8 01       		.byte	0x1
 4126 0ba9 A104     		.2byte	0x4a1
 4127 0bab AD000000 		.4byte	0xad
 4128 0baf 02       		.uleb128 0x2
 4129 0bb0 91       		.byte	0x91
 4130 0bb1 74       		.sleb128 -12
 4131 0bb2 00       		.byte	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 96


 4132 0bb3 1E       		.uleb128 0x1e
 4133 0bb4 3D050000 		.4byte	.LASF102
 4134 0bb8 01       		.byte	0x1
 4135 0bb9 D604     		.2byte	0x4d6
 4136 0bbb AD000000 		.4byte	0xad
 4137 0bbf 00000000 		.4byte	.LFB20
 4138 0bc3 3C000000 		.4byte	.LFE20-.LFB20
 4139 0bc7 01       		.uleb128 0x1
 4140 0bc8 9C       		.byte	0x9c
 4141 0bc9 EC0B0000 		.4byte	0xbec
 4142 0bcd 16       		.uleb128 0x16
 4143 0bce 1D030000 		.4byte	.LASF55
 4144 0bd2 01       		.byte	0x1
 4145 0bd3 D604     		.2byte	0x4d6
 4146 0bd5 A9040000 		.4byte	0x4a9
 4147 0bd9 02       		.uleb128 0x2
 4148 0bda 91       		.byte	0x91
 4149 0bdb 6C       		.sleb128 -20
 4150 0bdc 17       		.uleb128 0x17
 4151 0bdd 40000000 		.4byte	.LASF96
 4152 0be1 01       		.byte	0x1
 4153 0be2 D904     		.2byte	0x4d9
 4154 0be4 AD000000 		.4byte	0xad
 4155 0be8 02       		.uleb128 0x2
 4156 0be9 91       		.byte	0x91
 4157 0bea 74       		.sleb128 -12
 4158 0beb 00       		.byte	0
 4159 0bec 1F       		.uleb128 0x1f
 4160 0bed 58070000 		.4byte	.LASF109
 4161 0bf1 01       		.byte	0x1
 4162 0bf2 EB04     		.2byte	0x4eb
 4163 0bf4 00000000 		.4byte	.LFB21
 4164 0bf8 60000000 		.4byte	.LFE21-.LFB21
 4165 0bfc 01       		.uleb128 0x1
 4166 0bfd 9C       		.byte	0x9c
 4167 0bfe 670C0000 		.4byte	0xc67
 4168 0c02 16       		.uleb128 0x16
 4169 0c03 1D030000 		.4byte	.LASF55
 4170 0c07 01       		.byte	0x1
 4171 0c08 EB04     		.2byte	0x4eb
 4172 0c0a 7D030000 		.4byte	0x37d
 4173 0c0e 02       		.uleb128 0x2
 4174 0c0f 91       		.byte	0x91
 4175 0c10 6C       		.sleb128 -20
 4176 0c11 16       		.uleb128 0x16
 4177 0c12 4D010000 		.4byte	.LASF45
 4178 0c16 01       		.byte	0x1
 4179 0c17 EC04     		.2byte	0x4ec
 4180 0c19 67030000 		.4byte	0x367
 4181 0c1d 02       		.uleb128 0x2
 4182 0c1e 91       		.byte	0x91
 4183 0c1f 68       		.sleb128 -24
 4184 0c20 16       		.uleb128 0x16
 4185 0c21 96030000 		.4byte	.LASF48
 4186 0c25 01       		.byte	0x1
 4187 0c26 ED04     		.2byte	0x4ed
 4188 0c28 AD000000 		.4byte	0xad
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 97


 4189 0c2c 02       		.uleb128 0x2
 4190 0c2d 91       		.byte	0x91
 4191 0c2e 64       		.sleb128 -28
 4192 0c2f 16       		.uleb128 0x16
 4193 0c30 4E050000 		.4byte	.LASF42
 4194 0c34 01       		.byte	0x1
 4195 0c35 EE04     		.2byte	0x4ee
 4196 0c37 AD000000 		.4byte	0xad
 4197 0c3b 02       		.uleb128 0x2
 4198 0c3c 91       		.byte	0x91
 4199 0c3d 60       		.sleb128 -32
 4200 0c3e 16       		.uleb128 0x16
 4201 0c3f A2040000 		.4byte	.LASF46
 4202 0c43 01       		.byte	0x1
 4203 0c44 EF04     		.2byte	0x4ef
 4204 0c46 8C000000 		.4byte	0x8c
 4205 0c4a 02       		.uleb128 0x2
 4206 0c4b 91       		.byte	0x91
 4207 0c4c 00       		.sleb128 0
 4208 0c4d 18       		.uleb128 0x18
 4209 0c4e 0E000000 		.4byte	.LBB5
 4210 0c52 1C000000 		.4byte	.LBE5-.LBB5
 4211 0c56 17       		.uleb128 0x17
 4212 0c57 4F030000 		.4byte	.LASF103
 4213 0c5b 01       		.byte	0x1
 4214 0c5c F904     		.2byte	0x4f9
 4215 0c5e 670C0000 		.4byte	0xc67
 4216 0c62 02       		.uleb128 0x2
 4217 0c63 91       		.byte	0x91
 4218 0c64 74       		.sleb128 -12
 4219 0c65 00       		.byte	0
 4220 0c66 00       		.byte	0
 4221 0c67 19       		.uleb128 0x19
 4222 0c68 CF000000 		.4byte	0xcf
 4223 0c6c 20       		.uleb128 0x20
 4224 0c6d 7800     		.ascii	"x\000"
 4225 0c6f 09       		.byte	0x9
 4226 0c70 04       		.byte	0x4
 4227 0c71 97000000 		.4byte	0x97
 4228 0c75 05       		.uleb128 0x5
 4229 0c76 03       		.byte	0x3
 4230 0c77 00000000 		.4byte	x
 4231 0c7b 00       		.byte	0
 4232              		.section	.debug_abbrev,"",%progbits
 4233              	.Ldebug_abbrev0:
 4234 0000 01       		.uleb128 0x1
 4235 0001 11       		.uleb128 0x11
 4236 0002 01       		.byte	0x1
 4237 0003 25       		.uleb128 0x25
 4238 0004 0E       		.uleb128 0xe
 4239 0005 13       		.uleb128 0x13
 4240 0006 0B       		.uleb128 0xb
 4241 0007 03       		.uleb128 0x3
 4242 0008 0E       		.uleb128 0xe
 4243 0009 1B       		.uleb128 0x1b
 4244 000a 0E       		.uleb128 0xe
 4245 000b 55       		.uleb128 0x55
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 98


 4246 000c 17       		.uleb128 0x17
 4247 000d 11       		.uleb128 0x11
 4248 000e 01       		.uleb128 0x1
 4249 000f 10       		.uleb128 0x10
 4250 0010 17       		.uleb128 0x17
 4251 0011 00       		.byte	0
 4252 0012 00       		.byte	0
 4253 0013 02       		.uleb128 0x2
 4254 0014 24       		.uleb128 0x24
 4255 0015 00       		.byte	0
 4256 0016 0B       		.uleb128 0xb
 4257 0017 0B       		.uleb128 0xb
 4258 0018 3E       		.uleb128 0x3e
 4259 0019 0B       		.uleb128 0xb
 4260 001a 03       		.uleb128 0x3
 4261 001b 0E       		.uleb128 0xe
 4262 001c 00       		.byte	0
 4263 001d 00       		.byte	0
 4264 001e 03       		.uleb128 0x3
 4265 001f 16       		.uleb128 0x16
 4266 0020 00       		.byte	0
 4267 0021 03       		.uleb128 0x3
 4268 0022 0E       		.uleb128 0xe
 4269 0023 3A       		.uleb128 0x3a
 4270 0024 0B       		.uleb128 0xb
 4271 0025 3B       		.uleb128 0x3b
 4272 0026 0B       		.uleb128 0xb
 4273 0027 49       		.uleb128 0x49
 4274 0028 13       		.uleb128 0x13
 4275 0029 00       		.byte	0
 4276 002a 00       		.byte	0
 4277 002b 04       		.uleb128 0x4
 4278 002c 24       		.uleb128 0x24
 4279 002d 00       		.byte	0
 4280 002e 0B       		.uleb128 0xb
 4281 002f 0B       		.uleb128 0xb
 4282 0030 3E       		.uleb128 0x3e
 4283 0031 0B       		.uleb128 0xb
 4284 0032 03       		.uleb128 0x3
 4285 0033 08       		.uleb128 0x8
 4286 0034 00       		.byte	0
 4287 0035 00       		.byte	0
 4288 0036 05       		.uleb128 0x5
 4289 0037 0F       		.uleb128 0xf
 4290 0038 00       		.byte	0
 4291 0039 0B       		.uleb128 0xb
 4292 003a 0B       		.uleb128 0xb
 4293 003b 00       		.byte	0
 4294 003c 00       		.byte	0
 4295 003d 06       		.uleb128 0x6
 4296 003e 0F       		.uleb128 0xf
 4297 003f 00       		.byte	0
 4298 0040 0B       		.uleb128 0xb
 4299 0041 0B       		.uleb128 0xb
 4300 0042 49       		.uleb128 0x49
 4301 0043 13       		.uleb128 0x13
 4302 0044 00       		.byte	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 99


 4303 0045 00       		.byte	0
 4304 0046 07       		.uleb128 0x7
 4305 0047 01       		.uleb128 0x1
 4306 0048 01       		.byte	0x1
 4307 0049 49       		.uleb128 0x49
 4308 004a 13       		.uleb128 0x13
 4309 004b 01       		.uleb128 0x1
 4310 004c 13       		.uleb128 0x13
 4311 004d 00       		.byte	0
 4312 004e 00       		.byte	0
 4313 004f 08       		.uleb128 0x8
 4314 0050 21       		.uleb128 0x21
 4315 0051 00       		.byte	0
 4316 0052 49       		.uleb128 0x49
 4317 0053 13       		.uleb128 0x13
 4318 0054 2F       		.uleb128 0x2f
 4319 0055 0B       		.uleb128 0xb
 4320 0056 00       		.byte	0
 4321 0057 00       		.byte	0
 4322 0058 09       		.uleb128 0x9
 4323 0059 13       		.uleb128 0x13
 4324 005a 01       		.byte	0x1
 4325 005b 03       		.uleb128 0x3
 4326 005c 0E       		.uleb128 0xe
 4327 005d 0B       		.uleb128 0xb
 4328 005e 0B       		.uleb128 0xb
 4329 005f 3A       		.uleb128 0x3a
 4330 0060 0B       		.uleb128 0xb
 4331 0061 3B       		.uleb128 0x3b
 4332 0062 05       		.uleb128 0x5
 4333 0063 01       		.uleb128 0x1
 4334 0064 13       		.uleb128 0x13
 4335 0065 00       		.byte	0
 4336 0066 00       		.byte	0
 4337 0067 0A       		.uleb128 0xa
 4338 0068 0D       		.uleb128 0xd
 4339 0069 00       		.byte	0
 4340 006a 03       		.uleb128 0x3
 4341 006b 0E       		.uleb128 0xe
 4342 006c 3A       		.uleb128 0x3a
 4343 006d 0B       		.uleb128 0xb
 4344 006e 3B       		.uleb128 0x3b
 4345 006f 05       		.uleb128 0x5
 4346 0070 49       		.uleb128 0x49
 4347 0071 13       		.uleb128 0x13
 4348 0072 38       		.uleb128 0x38
 4349 0073 0B       		.uleb128 0xb
 4350 0074 00       		.byte	0
 4351 0075 00       		.byte	0
 4352 0076 0B       		.uleb128 0xb
 4353 0077 16       		.uleb128 0x16
 4354 0078 00       		.byte	0
 4355 0079 03       		.uleb128 0x3
 4356 007a 0E       		.uleb128 0xe
 4357 007b 3A       		.uleb128 0x3a
 4358 007c 0B       		.uleb128 0xb
 4359 007d 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 100


 4360 007e 05       		.uleb128 0x5
 4361 007f 49       		.uleb128 0x49
 4362 0080 13       		.uleb128 0x13
 4363 0081 00       		.byte	0
 4364 0082 00       		.byte	0
 4365 0083 0C       		.uleb128 0xc
 4366 0084 13       		.uleb128 0x13
 4367 0085 00       		.byte	0
 4368 0086 03       		.uleb128 0x3
 4369 0087 0E       		.uleb128 0xe
 4370 0088 3C       		.uleb128 0x3c
 4371 0089 19       		.uleb128 0x19
 4372 008a 00       		.byte	0
 4373 008b 00       		.byte	0
 4374 008c 0D       		.uleb128 0xd
 4375 008d 04       		.uleb128 0x4
 4376 008e 01       		.byte	0x1
 4377 008f 0B       		.uleb128 0xb
 4378 0090 0B       		.uleb128 0xb
 4379 0091 49       		.uleb128 0x49
 4380 0092 13       		.uleb128 0x13
 4381 0093 3A       		.uleb128 0x3a
 4382 0094 0B       		.uleb128 0xb
 4383 0095 3B       		.uleb128 0x3b
 4384 0096 0B       		.uleb128 0xb
 4385 0097 01       		.uleb128 0x1
 4386 0098 13       		.uleb128 0x13
 4387 0099 00       		.byte	0
 4388 009a 00       		.byte	0
 4389 009b 0E       		.uleb128 0xe
 4390 009c 28       		.uleb128 0x28
 4391 009d 00       		.byte	0
 4392 009e 03       		.uleb128 0x3
 4393 009f 0E       		.uleb128 0xe
 4394 00a0 1C       		.uleb128 0x1c
 4395 00a1 0B       		.uleb128 0xb
 4396 00a2 00       		.byte	0
 4397 00a3 00       		.byte	0
 4398 00a4 0F       		.uleb128 0xf
 4399 00a5 13       		.uleb128 0x13
 4400 00a6 01       		.byte	0x1
 4401 00a7 03       		.uleb128 0x3
 4402 00a8 0E       		.uleb128 0xe
 4403 00a9 0B       		.uleb128 0xb
 4404 00aa 0B       		.uleb128 0xb
 4405 00ab 3A       		.uleb128 0x3a
 4406 00ac 0B       		.uleb128 0xb
 4407 00ad 3B       		.uleb128 0x3b
 4408 00ae 0B       		.uleb128 0xb
 4409 00af 01       		.uleb128 0x1
 4410 00b0 13       		.uleb128 0x13
 4411 00b1 00       		.byte	0
 4412 00b2 00       		.byte	0
 4413 00b3 10       		.uleb128 0x10
 4414 00b4 0D       		.uleb128 0xd
 4415 00b5 00       		.byte	0
 4416 00b6 03       		.uleb128 0x3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 101


 4417 00b7 0E       		.uleb128 0xe
 4418 00b8 3A       		.uleb128 0x3a
 4419 00b9 0B       		.uleb128 0xb
 4420 00ba 3B       		.uleb128 0x3b
 4421 00bb 0B       		.uleb128 0xb
 4422 00bc 49       		.uleb128 0x49
 4423 00bd 13       		.uleb128 0x13
 4424 00be 38       		.uleb128 0x38
 4425 00bf 0B       		.uleb128 0xb
 4426 00c0 00       		.byte	0
 4427 00c1 00       		.byte	0
 4428 00c2 11       		.uleb128 0x11
 4429 00c3 35       		.uleb128 0x35
 4430 00c4 00       		.byte	0
 4431 00c5 49       		.uleb128 0x49
 4432 00c6 13       		.uleb128 0x13
 4433 00c7 00       		.byte	0
 4434 00c8 00       		.byte	0
 4435 00c9 12       		.uleb128 0x12
 4436 00ca 2E       		.uleb128 0x2e
 4437 00cb 01       		.byte	0x1
 4438 00cc 3F       		.uleb128 0x3f
 4439 00cd 19       		.uleb128 0x19
 4440 00ce 03       		.uleb128 0x3
 4441 00cf 0E       		.uleb128 0xe
 4442 00d0 3A       		.uleb128 0x3a
 4443 00d1 0B       		.uleb128 0xb
 4444 00d2 3B       		.uleb128 0x3b
 4445 00d3 0B       		.uleb128 0xb
 4446 00d4 27       		.uleb128 0x27
 4447 00d5 19       		.uleb128 0x19
 4448 00d6 49       		.uleb128 0x49
 4449 00d7 13       		.uleb128 0x13
 4450 00d8 11       		.uleb128 0x11
 4451 00d9 01       		.uleb128 0x1
 4452 00da 12       		.uleb128 0x12
 4453 00db 06       		.uleb128 0x6
 4454 00dc 40       		.uleb128 0x40
 4455 00dd 18       		.uleb128 0x18
 4456 00de 9642     		.uleb128 0x2116
 4457 00e0 19       		.uleb128 0x19
 4458 00e1 01       		.uleb128 0x1
 4459 00e2 13       		.uleb128 0x13
 4460 00e3 00       		.byte	0
 4461 00e4 00       		.byte	0
 4462 00e5 13       		.uleb128 0x13
 4463 00e6 05       		.uleb128 0x5
 4464 00e7 00       		.byte	0
 4465 00e8 03       		.uleb128 0x3
 4466 00e9 0E       		.uleb128 0xe
 4467 00ea 3A       		.uleb128 0x3a
 4468 00eb 0B       		.uleb128 0xb
 4469 00ec 3B       		.uleb128 0x3b
 4470 00ed 0B       		.uleb128 0xb
 4471 00ee 49       		.uleb128 0x49
 4472 00ef 13       		.uleb128 0x13
 4473 00f0 02       		.uleb128 0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 102


 4474 00f1 18       		.uleb128 0x18
 4475 00f2 00       		.byte	0
 4476 00f3 00       		.byte	0
 4477 00f4 14       		.uleb128 0x14
 4478 00f5 34       		.uleb128 0x34
 4479 00f6 00       		.byte	0
 4480 00f7 03       		.uleb128 0x3
 4481 00f8 0E       		.uleb128 0xe
 4482 00f9 3A       		.uleb128 0x3a
 4483 00fa 0B       		.uleb128 0xb
 4484 00fb 3B       		.uleb128 0x3b
 4485 00fc 0B       		.uleb128 0xb
 4486 00fd 49       		.uleb128 0x49
 4487 00fe 13       		.uleb128 0x13
 4488 00ff 02       		.uleb128 0x2
 4489 0100 18       		.uleb128 0x18
 4490 0101 00       		.byte	0
 4491 0102 00       		.byte	0
 4492 0103 15       		.uleb128 0x15
 4493 0104 2E       		.uleb128 0x2e
 4494 0105 01       		.byte	0x1
 4495 0106 3F       		.uleb128 0x3f
 4496 0107 19       		.uleb128 0x19
 4497 0108 03       		.uleb128 0x3
 4498 0109 0E       		.uleb128 0xe
 4499 010a 3A       		.uleb128 0x3a
 4500 010b 0B       		.uleb128 0xb
 4501 010c 3B       		.uleb128 0x3b
 4502 010d 05       		.uleb128 0x5
 4503 010e 27       		.uleb128 0x27
 4504 010f 19       		.uleb128 0x19
 4505 0110 49       		.uleb128 0x49
 4506 0111 13       		.uleb128 0x13
 4507 0112 11       		.uleb128 0x11
 4508 0113 01       		.uleb128 0x1
 4509 0114 12       		.uleb128 0x12
 4510 0115 06       		.uleb128 0x6
 4511 0116 40       		.uleb128 0x40
 4512 0117 18       		.uleb128 0x18
 4513 0118 9642     		.uleb128 0x2116
 4514 011a 19       		.uleb128 0x19
 4515 011b 01       		.uleb128 0x1
 4516 011c 13       		.uleb128 0x13
 4517 011d 00       		.byte	0
 4518 011e 00       		.byte	0
 4519 011f 16       		.uleb128 0x16
 4520 0120 05       		.uleb128 0x5
 4521 0121 00       		.byte	0
 4522 0122 03       		.uleb128 0x3
 4523 0123 0E       		.uleb128 0xe
 4524 0124 3A       		.uleb128 0x3a
 4525 0125 0B       		.uleb128 0xb
 4526 0126 3B       		.uleb128 0x3b
 4527 0127 05       		.uleb128 0x5
 4528 0128 49       		.uleb128 0x49
 4529 0129 13       		.uleb128 0x13
 4530 012a 02       		.uleb128 0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 103


 4531 012b 18       		.uleb128 0x18
 4532 012c 00       		.byte	0
 4533 012d 00       		.byte	0
 4534 012e 17       		.uleb128 0x17
 4535 012f 34       		.uleb128 0x34
 4536 0130 00       		.byte	0
 4537 0131 03       		.uleb128 0x3
 4538 0132 0E       		.uleb128 0xe
 4539 0133 3A       		.uleb128 0x3a
 4540 0134 0B       		.uleb128 0xb
 4541 0135 3B       		.uleb128 0x3b
 4542 0136 05       		.uleb128 0x5
 4543 0137 49       		.uleb128 0x49
 4544 0138 13       		.uleb128 0x13
 4545 0139 02       		.uleb128 0x2
 4546 013a 18       		.uleb128 0x18
 4547 013b 00       		.byte	0
 4548 013c 00       		.byte	0
 4549 013d 18       		.uleb128 0x18
 4550 013e 0B       		.uleb128 0xb
 4551 013f 01       		.byte	0x1
 4552 0140 11       		.uleb128 0x11
 4553 0141 01       		.uleb128 0x1
 4554 0142 12       		.uleb128 0x12
 4555 0143 06       		.uleb128 0x6
 4556 0144 00       		.byte	0
 4557 0145 00       		.byte	0
 4558 0146 19       		.uleb128 0x19
 4559 0147 26       		.uleb128 0x26
 4560 0148 00       		.byte	0
 4561 0149 49       		.uleb128 0x49
 4562 014a 13       		.uleb128 0x13
 4563 014b 00       		.byte	0
 4564 014c 00       		.byte	0
 4565 014d 1A       		.uleb128 0x1a
 4566 014e 2E       		.uleb128 0x2e
 4567 014f 01       		.byte	0x1
 4568 0150 3F       		.uleb128 0x3f
 4569 0151 19       		.uleb128 0x19
 4570 0152 03       		.uleb128 0x3
 4571 0153 0E       		.uleb128 0xe
 4572 0154 3A       		.uleb128 0x3a
 4573 0155 0B       		.uleb128 0xb
 4574 0156 3B       		.uleb128 0x3b
 4575 0157 05       		.uleb128 0x5
 4576 0158 27       		.uleb128 0x27
 4577 0159 19       		.uleb128 0x19
 4578 015a 11       		.uleb128 0x11
 4579 015b 01       		.uleb128 0x1
 4580 015c 12       		.uleb128 0x12
 4581 015d 06       		.uleb128 0x6
 4582 015e 40       		.uleb128 0x40
 4583 015f 18       		.uleb128 0x18
 4584 0160 9642     		.uleb128 0x2116
 4585 0162 19       		.uleb128 0x19
 4586 0163 01       		.uleb128 0x1
 4587 0164 13       		.uleb128 0x13
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 104


 4588 0165 00       		.byte	0
 4589 0166 00       		.byte	0
 4590 0167 1B       		.uleb128 0x1b
 4591 0168 2E       		.uleb128 0x2e
 4592 0169 01       		.byte	0x1
 4593 016a 3F       		.uleb128 0x3f
 4594 016b 19       		.uleb128 0x19
 4595 016c 03       		.uleb128 0x3
 4596 016d 0E       		.uleb128 0xe
 4597 016e 3A       		.uleb128 0x3a
 4598 016f 0B       		.uleb128 0xb
 4599 0170 3B       		.uleb128 0x3b
 4600 0171 05       		.uleb128 0x5
 4601 0172 27       		.uleb128 0x27
 4602 0173 19       		.uleb128 0x19
 4603 0174 49       		.uleb128 0x49
 4604 0175 13       		.uleb128 0x13
 4605 0176 11       		.uleb128 0x11
 4606 0177 01       		.uleb128 0x1
 4607 0178 12       		.uleb128 0x12
 4608 0179 06       		.uleb128 0x6
 4609 017a 40       		.uleb128 0x40
 4610 017b 18       		.uleb128 0x18
 4611 017c 9742     		.uleb128 0x2117
 4612 017e 19       		.uleb128 0x19
 4613 017f 01       		.uleb128 0x1
 4614 0180 13       		.uleb128 0x13
 4615 0181 00       		.byte	0
 4616 0182 00       		.byte	0
 4617 0183 1C       		.uleb128 0x1c
 4618 0184 26       		.uleb128 0x26
 4619 0185 00       		.byte	0
 4620 0186 00       		.byte	0
 4621 0187 00       		.byte	0
 4622 0188 1D       		.uleb128 0x1d
 4623 0189 2E       		.uleb128 0x2e
 4624 018a 01       		.byte	0x1
 4625 018b 03       		.uleb128 0x3
 4626 018c 0E       		.uleb128 0xe
 4627 018d 3A       		.uleb128 0x3a
 4628 018e 0B       		.uleb128 0xb
 4629 018f 3B       		.uleb128 0x3b
 4630 0190 05       		.uleb128 0x5
 4631 0191 27       		.uleb128 0x27
 4632 0192 19       		.uleb128 0x19
 4633 0193 49       		.uleb128 0x49
 4634 0194 13       		.uleb128 0x13
 4635 0195 11       		.uleb128 0x11
 4636 0196 01       		.uleb128 0x1
 4637 0197 12       		.uleb128 0x12
 4638 0198 06       		.uleb128 0x6
 4639 0199 40       		.uleb128 0x40
 4640 019a 18       		.uleb128 0x18
 4641 019b 9642     		.uleb128 0x2116
 4642 019d 19       		.uleb128 0x19
 4643 019e 01       		.uleb128 0x1
 4644 019f 13       		.uleb128 0x13
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 105


 4645 01a0 00       		.byte	0
 4646 01a1 00       		.byte	0
 4647 01a2 1E       		.uleb128 0x1e
 4648 01a3 2E       		.uleb128 0x2e
 4649 01a4 01       		.byte	0x1
 4650 01a5 03       		.uleb128 0x3
 4651 01a6 0E       		.uleb128 0xe
 4652 01a7 3A       		.uleb128 0x3a
 4653 01a8 0B       		.uleb128 0xb
 4654 01a9 3B       		.uleb128 0x3b
 4655 01aa 05       		.uleb128 0x5
 4656 01ab 27       		.uleb128 0x27
 4657 01ac 19       		.uleb128 0x19
 4658 01ad 49       		.uleb128 0x49
 4659 01ae 13       		.uleb128 0x13
 4660 01af 11       		.uleb128 0x11
 4661 01b0 01       		.uleb128 0x1
 4662 01b1 12       		.uleb128 0x12
 4663 01b2 06       		.uleb128 0x6
 4664 01b3 40       		.uleb128 0x40
 4665 01b4 18       		.uleb128 0x18
 4666 01b5 9742     		.uleb128 0x2117
 4667 01b7 19       		.uleb128 0x19
 4668 01b8 01       		.uleb128 0x1
 4669 01b9 13       		.uleb128 0x13
 4670 01ba 00       		.byte	0
 4671 01bb 00       		.byte	0
 4672 01bc 1F       		.uleb128 0x1f
 4673 01bd 2E       		.uleb128 0x2e
 4674 01be 01       		.byte	0x1
 4675 01bf 03       		.uleb128 0x3
 4676 01c0 0E       		.uleb128 0xe
 4677 01c1 3A       		.uleb128 0x3a
 4678 01c2 0B       		.uleb128 0xb
 4679 01c3 3B       		.uleb128 0x3b
 4680 01c4 05       		.uleb128 0x5
 4681 01c5 27       		.uleb128 0x27
 4682 01c6 19       		.uleb128 0x19
 4683 01c7 11       		.uleb128 0x11
 4684 01c8 01       		.uleb128 0x1
 4685 01c9 12       		.uleb128 0x12
 4686 01ca 06       		.uleb128 0x6
 4687 01cb 40       		.uleb128 0x40
 4688 01cc 18       		.uleb128 0x18
 4689 01cd 9642     		.uleb128 0x2116
 4690 01cf 19       		.uleb128 0x19
 4691 01d0 01       		.uleb128 0x1
 4692 01d1 13       		.uleb128 0x13
 4693 01d2 00       		.byte	0
 4694 01d3 00       		.byte	0
 4695 01d4 20       		.uleb128 0x20
 4696 01d5 34       		.uleb128 0x34
 4697 01d6 00       		.byte	0
 4698 01d7 03       		.uleb128 0x3
 4699 01d8 08       		.uleb128 0x8
 4700 01d9 3A       		.uleb128 0x3a
 4701 01da 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 106


 4702 01db 3B       		.uleb128 0x3b
 4703 01dc 0B       		.uleb128 0xb
 4704 01dd 49       		.uleb128 0x49
 4705 01de 13       		.uleb128 0x13
 4706 01df 3F       		.uleb128 0x3f
 4707 01e0 19       		.uleb128 0x19
 4708 01e1 02       		.uleb128 0x2
 4709 01e2 18       		.uleb128 0x18
 4710 01e3 00       		.byte	0
 4711 01e4 00       		.byte	0
 4712 01e5 00       		.byte	0
 4713              		.section	.debug_aranges,"",%progbits
 4714 0000 C4000000 		.4byte	0xc4
 4715 0004 0200     		.2byte	0x2
 4716 0006 00000000 		.4byte	.Ldebug_info0
 4717 000a 04       		.byte	0x4
 4718 000b 00       		.byte	0
 4719 000c 0000     		.2byte	0
 4720 000e 0000     		.2byte	0
 4721 0010 00000000 		.4byte	.LFB0
 4722 0014 A4000000 		.4byte	.LFE0-.LFB0
 4723 0018 00000000 		.4byte	.LFB1
 4724 001c C0000000 		.4byte	.LFE1-.LFB1
 4725 0020 00000000 		.4byte	.LFB2
 4726 0024 48000000 		.4byte	.LFE2-.LFB2
 4727 0028 00000000 		.4byte	.LFB3
 4728 002c 60000000 		.4byte	.LFE3-.LFB3
 4729 0030 00000000 		.4byte	.LFB4
 4730 0034 4C000000 		.4byte	.LFE4-.LFB4
 4731 0038 00000000 		.4byte	.LFB5
 4732 003c 58000000 		.4byte	.LFE5-.LFB5
 4733 0040 00000000 		.4byte	.LFB6
 4734 0044 34000000 		.4byte	.LFE6-.LFB6
 4735 0048 00000000 		.4byte	.LFB7
 4736 004c 68010000 		.4byte	.LFE7-.LFB7
 4737 0050 00000000 		.4byte	.LFB8
 4738 0054 BC000000 		.4byte	.LFE8-.LFB8
 4739 0058 00000000 		.4byte	.LFB9
 4740 005c 7C000000 		.4byte	.LFE9-.LFB9
 4741 0060 00000000 		.4byte	.LFB10
 4742 0064 1C010000 		.4byte	.LFE10-.LFB10
 4743 0068 00000000 		.4byte	.LFB11
 4744 006c 7C000000 		.4byte	.LFE11-.LFB11
 4745 0070 00000000 		.4byte	.LFB12
 4746 0074 B8000000 		.4byte	.LFE12-.LFB12
 4747 0078 00000000 		.4byte	.LFB13
 4748 007c 66000000 		.4byte	.LFE13-.LFB13
 4749 0080 00000000 		.4byte	.LFB14
 4750 0084 40000000 		.4byte	.LFE14-.LFB14
 4751 0088 00000000 		.4byte	.LFB15
 4752 008c 58000000 		.4byte	.LFE15-.LFB15
 4753 0090 00000000 		.4byte	.LFB16
 4754 0094 68000000 		.4byte	.LFE16-.LFB16
 4755 0098 00000000 		.4byte	.LFB17
 4756 009c 68000000 		.4byte	.LFE17-.LFB17
 4757 00a0 00000000 		.4byte	.LFB18
 4758 00a4 A8000000 		.4byte	.LFE18-.LFB18
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 107


 4759 00a8 00000000 		.4byte	.LFB19
 4760 00ac BC000000 		.4byte	.LFE19-.LFB19
 4761 00b0 00000000 		.4byte	.LFB20
 4762 00b4 3C000000 		.4byte	.LFE20-.LFB20
 4763 00b8 00000000 		.4byte	.LFB21
 4764 00bc 60000000 		.4byte	.LFE21-.LFB21
 4765 00c0 00000000 		.4byte	0
 4766 00c4 00000000 		.4byte	0
 4767              		.section	.debug_ranges,"",%progbits
 4768              	.Ldebug_ranges0:
 4769 0000 00000000 		.4byte	.LFB0
 4770 0004 A4000000 		.4byte	.LFE0
 4771 0008 00000000 		.4byte	.LFB1
 4772 000c C0000000 		.4byte	.LFE1
 4773 0010 00000000 		.4byte	.LFB2
 4774 0014 48000000 		.4byte	.LFE2
 4775 0018 00000000 		.4byte	.LFB3
 4776 001c 60000000 		.4byte	.LFE3
 4777 0020 00000000 		.4byte	.LFB4
 4778 0024 4C000000 		.4byte	.LFE4
 4779 0028 00000000 		.4byte	.LFB5
 4780 002c 58000000 		.4byte	.LFE5
 4781 0030 00000000 		.4byte	.LFB6
 4782 0034 34000000 		.4byte	.LFE6
 4783 0038 00000000 		.4byte	.LFB7
 4784 003c 68010000 		.4byte	.LFE7
 4785 0040 00000000 		.4byte	.LFB8
 4786 0044 BC000000 		.4byte	.LFE8
 4787 0048 00000000 		.4byte	.LFB9
 4788 004c 7C000000 		.4byte	.LFE9
 4789 0050 00000000 		.4byte	.LFB10
 4790 0054 1C010000 		.4byte	.LFE10
 4791 0058 00000000 		.4byte	.LFB11
 4792 005c 7C000000 		.4byte	.LFE11
 4793 0060 00000000 		.4byte	.LFB12
 4794 0064 B8000000 		.4byte	.LFE12
 4795 0068 00000000 		.4byte	.LFB13
 4796 006c 66000000 		.4byte	.LFE13
 4797 0070 00000000 		.4byte	.LFB14
 4798 0074 40000000 		.4byte	.LFE14
 4799 0078 00000000 		.4byte	.LFB15
 4800 007c 58000000 		.4byte	.LFE15
 4801 0080 00000000 		.4byte	.LFB16
 4802 0084 68000000 		.4byte	.LFE16
 4803 0088 00000000 		.4byte	.LFB17
 4804 008c 68000000 		.4byte	.LFE17
 4805 0090 00000000 		.4byte	.LFB18
 4806 0094 A8000000 		.4byte	.LFE18
 4807 0098 00000000 		.4byte	.LFB19
 4808 009c BC000000 		.4byte	.LFE19
 4809 00a0 00000000 		.4byte	.LFB20
 4810 00a4 3C000000 		.4byte	.LFE20
 4811 00a8 00000000 		.4byte	.LFB21
 4812 00ac 60000000 		.4byte	.LFE21
 4813 00b0 00000000 		.4byte	0
 4814 00b4 00000000 		.4byte	0
 4815              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 108


 4816              	.Ldebug_line0:
 4817 0000 CE060000 		.section	.debug_str,"MS",%progbits,1
 4817      02004B02 
 4817      00000201 
 4817      FB0E0D00 
 4817      01010101 
 4818              	.LASF75:
 4819 0000 7853686F 		.ascii	"xShouldWrite\000"
 4819      756C6457 
 4819      72697465 
 4819      00
 4820              	.LASF78:
 4821 000d 78427566 		.ascii	"xBufferLengthBytes\000"
 4821      6665724C 
 4821      656E6774 
 4821      68427974 
 4821      657300
 4822              	.LASF27:
 4823 0020 654E6F41 		.ascii	"eNoAction\000"
 4823      6374696F 
 4823      6E00
 4824              	.LASF43:
 4825 002a 78546173 		.ascii	"xTaskWaitingToReceive\000"
 4825      6B576169 
 4825      74696E67 
 4825      546F5265 
 4825      63656976 
 4826              	.LASF96:
 4827 0040 78436F75 		.ascii	"xCount\000"
 4827      6E7400
 4828              	.LASF108:
 4829 0047 76537472 		.ascii	"vStreamBufferDelete\000"
 4829      65616D42 
 4829      75666665 
 4829      7244656C 
 4829      65746500 
 4830              	.LASF33:
 4831 005b 7854494D 		.ascii	"xTIME_OUT\000"
 4831      455F4F55 
 4831      5400
 4832              	.LASF76:
 4833 0065 78537472 		.ascii	"xStreamBufferReceive\000"
 4833      65616D42 
 4833      75666665 
 4833      72526563 
 4833      65697665 
 4834              	.LASF38:
 4835 007a 53747265 		.ascii	"StreamBufferDef_t\000"
 4835      616D4275 
 4835      66666572 
 4835      4465665F 
 4835      7400
 4836              	.LASF36:
 4837 008c 54696D65 		.ascii	"TimeOut_t\000"
 4837      4F75745F 
 4837      7400
 4838              	.LASF2:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 109


 4839 0096 73686F72 		.ascii	"short int\000"
 4839      7420696E 
 4839      7400
 4840              	.LASF15:
 4841 00a0 73697A65 		.ascii	"size_t\000"
 4841      5F7400
 4842              	.LASF17:
 4843 00a7 73697A65 		.ascii	"sizetype\000"
 4843      74797065 
 4843      00
 4844              	.LASF99:
 4845 00b0 70727652 		.ascii	"prvReadBytesFromBuffer\000"
 4845      65616442 
 4845      79746573 
 4845      46726F6D 
 4845      42756666 
 4846              	.LASF26:
 4847 00c7 5461736B 		.ascii	"TaskHandle_t\000"
 4847      48616E64 
 4847      6C655F74 
 4847      00
 4848              	.LASF93:
 4849 00d4 78537472 		.ascii	"xStreamBufferReceiveCompletedFromISR\000"
 4849      65616D42 
 4849      75666665 
 4849      72526563 
 4849      65697665 
 4850              	.LASF80:
 4851 00f9 78427974 		.ascii	"xBytesAvailable\000"
 4851      65734176 
 4851      61696C61 
 4851      626C6500 
 4852              	.LASF88:
 4853 0109 784E6578 		.ascii	"xNextMessageLength\000"
 4853      744D6573 
 4853      73616765 
 4853      4C656E67 
 4853      746800
 4854              	.LASF97:
 4855 011c 784E6578 		.ascii	"xNextHead\000"
 4855      74486561 
 4855      6400
 4856              	.LASF7:
 4857 0126 5F5F7569 		.ascii	"__uint32_t\000"
 4857      6E743332 
 4857      5F7400
 4858              	.LASF67:
 4859 0131 78446174 		.ascii	"xDataLengthBytes\000"
 4859      614C656E 
 4859      67746842 
 4859      79746573 
 4859      00
 4860              	.LASF4:
 4861 0142 5F5F7569 		.ascii	"__uint16_t\000"
 4861      6E743136 
 4861      5F7400
 4862              	.LASF45:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 110


 4863 014d 70756342 		.ascii	"pucBuffer\000"
 4863      75666665 
 4863      7200
 4864              	.LASF54:
 4865 0157 70785374 		.ascii	"pxStaticStreamBuffer\000"
 4865      61746963 
 4865      53747265 
 4865      616D4275 
 4865      66666572 
 4866              	.LASF98:
 4867 016c 78466972 		.ascii	"xFirstLength\000"
 4867      73744C65 
 4867      6E677468 
 4867      00
 4868              	.LASF70:
 4869 0179 7854696D 		.ascii	"xTimeOut\000"
 4869      654F7574 
 4869      00
 4870              	.LASF51:
 4871 0182 78537472 		.ascii	"xStreamBufferGenericCreate\000"
 4871      65616D42 
 4871      75666665 
 4871      7247656E 
 4871      65726963 
 4872              	.LASF12:
 4873 019d 75696E74 		.ascii	"uint8_t\000"
 4873      385F7400 
 4874              	.LASF79:
 4875 01a5 78526563 		.ascii	"xReceivedLength\000"
 4875      65697665 
 4875      644C656E 
 4875      67746800 
 4876              	.LASF100:
 4877 01b5 784D6178 		.ascii	"xMaxCount\000"
 4877      436F756E 
 4877      7400
 4878              	.LASF28:
 4879 01bf 65536574 		.ascii	"eSetBits\000"
 4879      42697473 
 4879      00
 4880              	.LASF58:
 4881 01c8 78537472 		.ascii	"xStreamBuffer\000"
 4881      65616D42 
 4881      75666665 
 4881      7200
 4882              	.LASF68:
 4883 01d6 78546963 		.ascii	"xTicksToWait\000"
 4883      6B73546F 
 4883      57616974 
 4883      00
 4884              	.LASF9:
 4885 01e3 6C6F6E67 		.ascii	"long long int\000"
 4885      206C6F6E 
 4885      6720696E 
 4885      7400
 4886              	.LASF69:
 4887 01f1 78526571 		.ascii	"xRequiredSpace\000"
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 111


 4887      75697265 
 4887      64537061 
 4887      636500
 4888              	.LASF85:
 4889 0200 78537472 		.ascii	"xStreamBufferReceiveFromISR\000"
 4889      65616D42 
 4889      75666665 
 4889      72526563 
 4889      65697665 
 4890              	.LASF91:
 4891 021c 78537472 		.ascii	"xStreamBufferIsFull\000"
 4891      65616D42 
 4891      75666665 
 4891      72497346 
 4891      756C6C00 
 4892              	.LASF6:
 4893 0230 6C6F6E67 		.ascii	"long int\000"
 4893      20696E74 
 4893      00
 4894              	.LASF61:
 4895 0239 78547269 		.ascii	"xTriggerLevel\000"
 4895      67676572 
 4895      4C657665 
 4895      6C00
 4896              	.LASF90:
 4897 0247 78537472 		.ascii	"xStreamBufferIsEmpty\000"
 4897      65616D42 
 4897      75666665 
 4897      72497345 
 4897      6D707479 
 4898              	.LASF107:
 4899 025c 74736B54 		.ascii	"tskTaskControlBlock\000"
 4899      61736B43 
 4899      6F6E7472 
 4899      6F6C426C 
 4899      6F636B00 
 4900              	.LASF84:
 4901 0270 7854656D 		.ascii	"xTempReturn\000"
 4901      70526574 
 4901      75726E00 
 4902              	.LASF50:
 4903 027c 70756341 		.ascii	"pucAllocatedMemory\000"
 4903      6C6C6F63 
 4903      61746564 
 4903      4D656D6F 
 4903      727900
 4904              	.LASF104:
 4905 028f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4905      43313120 
 4905      352E342E 
 4905      31203230 
 4905      31363036 
 4906 02c2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 4906      20726576 
 4906      6973696F 
 4906      6E203233 
 4906      37373135 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 112


 4907 02f5 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4907      66756E63 
 4907      74696F6E 
 4907      2D736563 
 4907      74696F6E 
 4908              	.LASF55:
 4909 031d 70785374 		.ascii	"pxStreamBuffer\000"
 4909      7265616D 
 4909      42756666 
 4909      657200
 4910              	.LASF105:
 4911 032c 2E2E5C46 		.ascii	"..\\FreeRTOS\\Source\\stream_buffer.c\000"
 4911      72656552 
 4911      544F535C 
 4911      536F7572 
 4911      63655C73 
 4912              	.LASF103:
 4913 034f 78577269 		.ascii	"xWriteValue\000"
 4913      74655661 
 4913      6C756500 
 4914              	.LASF77:
 4915 035b 70765278 		.ascii	"pvRxData\000"
 4915      44617461 
 4915      00
 4916              	.LASF16:
 4917 0364 6C6F6E67 		.ascii	"long double\000"
 4917      20646F75 
 4917      626C6500 
 4918              	.LASF41:
 4919 0370 784C656E 		.ascii	"xLength\000"
 4919      67746800 
 4920              	.LASF1:
 4921 0378 756E7369 		.ascii	"unsigned char\000"
 4921      676E6564 
 4921      20636861 
 4921      7200
 4922              	.LASF35:
 4923 0386 7854696D 		.ascii	"xTimeOnEntering\000"
 4923      654F6E45 
 4923      6E746572 
 4923      696E6700 
 4924              	.LASF48:
 4925 0396 78427566 		.ascii	"xBufferSizeBytes\000"
 4925      66657253 
 4925      697A6542 
 4925      79746573 
 4925      00
 4926              	.LASF34:
 4927 03a7 784F7665 		.ascii	"xOverflowCount\000"
 4927      72666C6F 
 4927      77436F75 
 4927      6E7400
 4928              	.LASF60:
 4929 03b6 78537472 		.ascii	"xStreamBufferSetTriggerLevel\000"
 4929      65616D42 
 4929      75666665 
 4929      72536574 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 113


 4929      54726967 
 4930              	.LASF71:
 4931 03d3 784D6178 		.ascii	"xMaxReportedSpace\000"
 4931      5265706F 
 4931      72746564 
 4931      53706163 
 4931      6500
 4932              	.LASF0:
 4933 03e5 7369676E 		.ascii	"signed char\000"
 4933      65642063 
 4933      68617200 
 4934              	.LASF62:
 4935 03f1 78537472 		.ascii	"xStreamBufferSpacesAvailable\000"
 4935      65616D42 
 4935      75666665 
 4935      72537061 
 4935      63657341 
 4936              	.LASF10:
 4937 040e 6C6F6E67 		.ascii	"long long unsigned int\000"
 4937      206C6F6E 
 4937      6720756E 
 4937      7369676E 
 4937      65642069 
 4938              	.LASF87:
 4939 0425 70727652 		.ascii	"prvReadMessageFromBuffer\000"
 4939      6561644D 
 4939      65737361 
 4939      67654672 
 4939      6F6D4275 
 4940              	.LASF14:
 4941 043e 75696E74 		.ascii	"uint32_t\000"
 4941      33325F74 
 4941      00
 4942              	.LASF52:
 4943 0447 78537472 		.ascii	"xStreamBufferGenericCreateStatic\000"
 4943      65616D42 
 4943      75666665 
 4943      7247656E 
 4943      65726963 
 4944              	.LASF72:
 4945 0468 78537472 		.ascii	"xStreamBufferSendFromISR\000"
 4945      65616D42 
 4945      75666665 
 4945      7253656E 
 4945      6446726F 
 4946              	.LASF11:
 4947 0481 756E7369 		.ascii	"unsigned int\000"
 4947      676E6564 
 4947      20696E74 
 4947      00
 4948              	.LASF13:
 4949 048e 75696E74 		.ascii	"uint16_t\000"
 4949      31365F74 
 4949      00
 4950              	.LASF19:
 4951 0497 42617365 		.ascii	"BaseType_t\000"
 4951      54797065 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 114


 4951      5F7400
 4952              	.LASF46:
 4953 04a2 7563466C 		.ascii	"ucFlags\000"
 4953      61677300 
 4954              	.LASF65:
 4955 04aa 78537472 		.ascii	"xStreamBufferSend\000"
 4955      65616D42 
 4955      75666665 
 4955      7253656E 
 4955      6400
 4956              	.LASF21:
 4957 04bc 5469636B 		.ascii	"TickType_t\000"
 4957      54797065 
 4957      5F7400
 4958              	.LASF5:
 4959 04c7 73686F72 		.ascii	"short unsigned int\000"
 4959      7420756E 
 4959      7369676E 
 4959      65642069 
 4959      6E7400
 4960              	.LASF32:
 4961 04da 78535441 		.ascii	"xSTATIC_STREAM_BUFFER\000"
 4961      5449435F 
 4961      53545245 
 4961      414D5F42 
 4961      55464645 
 4962              	.LASF18:
 4963 04f0 63686172 		.ascii	"char\000"
 4963      00
 4964              	.LASF30:
 4965 04f5 65536574 		.ascii	"eSetValueWithOverwrite\000"
 4965      56616C75 
 4965      65576974 
 4965      684F7665 
 4965      72777269 
 4966              	.LASF49:
 4967 050c 7849734D 		.ascii	"xIsMessageBuffer\000"
 4967      65737361 
 4967      67654275 
 4967      66666572 
 4967      00
 4968              	.LASF89:
 4969 051d 7854656D 		.ascii	"xTempNextMessageLength\000"
 4969      704E6578 
 4969      744D6573 
 4969      73616765 
 4969      4C656E67 
 4970              	.LASF22:
 4971 0534 75784475 		.ascii	"uxDummy1\000"
 4971      6D6D7931 
 4971      00
 4972              	.LASF102:
 4973 053d 70727642 		.ascii	"prvBytesInBuffer\000"
 4973      79746573 
 4973      496E4275 
 4973      66666572 
 4973      00
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 115


 4974              	.LASF42:
 4975 054e 78547269 		.ascii	"xTriggerLevelBytes\000"
 4975      67676572 
 4975      4C657665 
 4975      6C427974 
 4975      657300
 4976              	.LASF63:
 4977 0561 78537061 		.ascii	"xSpace\000"
 4977      636500
 4978              	.LASF59:
 4979 0568 78537472 		.ascii	"xStreamBufferReset\000"
 4979      65616D42 
 4979      75666665 
 4979      72526573 
 4979      657400
 4980              	.LASF8:
 4981 057b 6C6F6E67 		.ascii	"long unsigned int\000"
 4981      20756E73 
 4981      69676E65 
 4981      6420696E 
 4981      7400
 4982              	.LASF81:
 4983 058d 78427974 		.ascii	"xBytesToStoreMessageLength\000"
 4983      6573546F 
 4983      53746F72 
 4983      654D6573 
 4983      73616765 
 4984              	.LASF20:
 4985 05a8 55426173 		.ascii	"UBaseType_t\000"
 4985      65547970 
 4985      655F7400 
 4986              	.LASF94:
 4987 05b4 70727657 		.ascii	"prvWriteBytesToBuffer\000"
 4987      72697465 
 4987      42797465 
 4987      73546F42 
 4987      75666665 
 4988              	.LASF39:
 4989 05ca 78546169 		.ascii	"xTail\000"
 4989      6C00
 4990              	.LASF92:
 4991 05d0 78537472 		.ascii	"xStreamBufferSendCompletedFromISR\000"
 4991      65616D42 
 4991      75666665 
 4991      7253656E 
 4991      64436F6D 
 4992              	.LASF82:
 4993 05f2 78537472 		.ascii	"xStreamBufferNextMessageLengthBytes\000"
 4993      65616D42 
 4993      75666665 
 4993      724E6578 
 4993      744D6573 
 4994              	.LASF31:
 4995 0616 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 4995      56616C75 
 4995      65576974 
 4995      686F7574 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 116


 4995      4F766572 
 4996              	.LASF24:
 4997 0630 75634475 		.ascii	"ucDummy3\000"
 4997      6D6D7933 
 4997      00
 4998              	.LASF86:
 4999 0639 70727657 		.ascii	"prvWriteMessageToBuffer\000"
 4999      72697465 
 4999      4D657373 
 4999      61676554 
 4999      6F427566 
 5000              	.LASF44:
 5001 0651 78546173 		.ascii	"xTaskWaitingToSend\000"
 5001      6B576169 
 5001      74696E67 
 5001      546F5365 
 5001      6E6400
 5002              	.LASF37:
 5003 0664 53747265 		.ascii	"StreamBufferHandle_t\000"
 5003      616D4275 
 5003      66666572 
 5003      48616E64 
 5003      6C655F74 
 5004              	.LASF74:
 5005 0679 75785361 		.ascii	"uxSavedInterruptStatus\000"
 5005      76656449 
 5005      6E746572 
 5005      72757074 
 5005      53746174 
 5006              	.LASF25:
 5007 0690 53746174 		.ascii	"StaticStreamBuffer_t\000"
 5007      69635374 
 5007      7265616D 
 5007      42756666 
 5007      65725F74 
 5008              	.LASF56:
 5009 06a5 78526574 		.ascii	"xReturn\000"
 5009      75726E00 
 5010              	.LASF73:
 5011 06ad 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 5011      67686572 
 5011      5072696F 
 5011      72697479 
 5011      5461736B 
 5012              	.LASF101:
 5013 06c7 784E6578 		.ascii	"xNextTail\000"
 5013      74546169 
 5013      6C00
 5014              	.LASF40:
 5015 06d1 78486561 		.ascii	"xHead\000"
 5015      6400
 5016              	.LASF106:
 5017 06d7 443A5C55 		.ascii	"D:\\Users\\Jason\\Documents\\Jason's Work\\Labs\\EC"
 5017      73657273 
 5017      5C4A6173 
 5017      6F6E5C44 
 5017      6F63756D 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 117


 5018 0704 45473732 		.ascii	"EG721Project\\PSoCProject\\PSoC_4_BLE_CapSense_Prox"
 5018      3150726F 
 5018      6A656374 
 5018      5C50536F 
 5018      4350726F 
 5019 0735 696D6974 		.ascii	"imity.cydsn\000"
 5019      792E6379 
 5019      64736E00 
 5020              	.LASF23:
 5021 0741 70764475 		.ascii	"pvDummy2\000"
 5021      6D6D7932 
 5021      00
 5022              	.LASF83:
 5023 074a 784F7269 		.ascii	"xOriginalTail\000"
 5023      67696E61 
 5023      6C546169 
 5023      6C00
 5024              	.LASF109:
 5025 0758 70727649 		.ascii	"prvInitialiseNewStreamBuffer\000"
 5025      6E697469 
 5025      616C6973 
 5025      654E6577 
 5025      53747265 
 5026              	.LASF53:
 5027 0775 70756353 		.ascii	"pucStreamBufferStorageArea\000"
 5027      74726561 
 5027      6D427566 
 5027      66657253 
 5027      746F7261 
 5028              	.LASF95:
 5029 0790 70756344 		.ascii	"pucData\000"
 5029      61746100 
 5030              	.LASF64:
 5031 0798 78537472 		.ascii	"xStreamBufferBytesAvailable\000"
 5031      65616D42 
 5031      75666665 
 5031      72427974 
 5031      65734176 
 5032              	.LASF66:
 5033 07b4 70765478 		.ascii	"pvTxData\000"
 5033      44617461 
 5033      00
 5034              	.LASF57:
 5035 07bd 7853697A 		.ascii	"xSize\000"
 5035      6500
 5036              	.LASF29:
 5037 07c3 65496E63 		.ascii	"eIncrement\000"
 5037      72656D65 
 5037      6E7400
 5038              	.LASF3:
 5039 07ce 5F5F7569 		.ascii	"__uint8_t\000"
 5039      6E74385F 
 5039      7400
 5040              	.LASF47:
 5041 07d8 53747265 		.ascii	"StreamBuffer_t\000"
 5041      616D4275 
 5041      66666572 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\ccj3BH2l.s 			page 118


 5041      5F7400
 5042              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
