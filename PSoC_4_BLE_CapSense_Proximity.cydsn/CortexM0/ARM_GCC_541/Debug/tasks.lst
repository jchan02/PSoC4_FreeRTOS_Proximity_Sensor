ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	x,2,2
  20              		.global	pxCurrentTCB
  21              		.bss
  22              		.align	2
  23              		.type	pxCurrentTCB, %object
  24              		.size	pxCurrentTCB, 4
  25              	pxCurrentTCB:
  26 0000 00000000 		.space	4
  27              		.align	2
  28              	pxReadyTasksLists:
  29 0004 00000000 		.space	100
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.align	2
  31              	xDelayedTaskList1:
  32 0068 00000000 		.space	20
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.align	2
  34              	xDelayedTaskList2:
  35 007c 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.align	2
  37              	pxDelayedTaskList:
  38 0090 00000000 		.space	4
  39              		.align	2
  40              	pxOverflowDelayedTaskList:
  41 0094 00000000 		.space	4
  42              		.align	2
  43              	xPendingReadyList:
  44 0098 00000000 		.space	20
  44      00000000 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 2


  44      00000000 
  44      00000000 
  44      00000000 
  45              		.align	2
  46              	xTasksWaitingTermination:
  47 00ac 00000000 		.space	20
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.align	2
  49              	uxDeletedTasksWaitingCleanUp:
  50 00c0 00000000 		.space	4
  51              		.align	2
  52              	xSuspendedTaskList:
  53 00c4 00000000 		.space	20
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.align	2
  55              	uxCurrentNumberOfTasks:
  56 00d8 00000000 		.space	4
  57              		.align	2
  58              	xTickCount:
  59 00dc 00000000 		.space	4
  60              		.align	2
  61              	uxTopReadyPriority:
  62 00e0 00000000 		.space	4
  63              		.align	2
  64              	xSchedulerRunning:
  65 00e4 00000000 		.space	4
  66              		.align	2
  67              	xPendedTicks:
  68 00e8 00000000 		.space	4
  69              		.align	2
  70              	xYieldPending:
  71 00ec 00000000 		.space	4
  72              		.align	2
  73              	xNumOfOverflows:
  74 00f0 00000000 		.space	4
  75              		.align	2
  76              	uxTaskNumber:
  77 00f4 00000000 		.space	4
  78              		.align	2
  79              	xNextTaskUnblockTime:
  80 00f8 00000000 		.space	4
  81              		.align	2
  82              	xIdleTaskHandle:
  83 00fc 00000000 		.space	4
  84              		.global	uxTopUsedPriority
  85              		.data
  86              		.align	2
  87              		.type	uxTopUsedPriority, %object
  88              		.size	uxTopUsedPriority, 4
  89              	uxTopUsedPriority:
  90 0000 04000000 		.word	4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 3


  91              		.bss
  92              		.align	2
  93              	uxSchedulerSuspended:
  94 0100 00000000 		.space	4
  95              		.section	.text.xTaskCreateStatic,"ax",%progbits
  96              		.align	2
  97              		.global	xTaskCreateStatic
  98              		.code	16
  99              		.thumb_func
 100              		.type	xTaskCreateStatic, %function
 101              	xTaskCreateStatic:
 102              	.LFB0:
 103              		.file 1 "..\\FreeRTOS\\Source\\tasks.c"
   1:..\FreeRTOS\Source/tasks.c **** /*
   2:..\FreeRTOS\Source/tasks.c ****  * FreeRTOS Kernel V10.4.3
   3:..\FreeRTOS\Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\Source/tasks.c ****  *
   5:..\FreeRTOS\Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS\Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS\Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\Source/tasks.c ****  * subject to the following conditions:
  11:..\FreeRTOS\Source/tasks.c ****  *
  12:..\FreeRTOS\Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\Source/tasks.c ****  * copies or substantial portions of the Software.
  14:..\FreeRTOS\Source/tasks.c ****  *
  15:..\FreeRTOS\Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\FreeRTOS\Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\FreeRTOS\Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\FreeRTOS\Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\FreeRTOS\Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\FreeRTOS\Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\FreeRTOS\Source/tasks.c ****  *
  22:..\FreeRTOS\Source/tasks.c ****  * https://www.FreeRTOS.org
  23:..\FreeRTOS\Source/tasks.c ****  * https://github.com/FreeRTOS
  24:..\FreeRTOS\Source/tasks.c ****  *
  25:..\FreeRTOS\Source/tasks.c ****  */
  26:..\FreeRTOS\Source/tasks.c **** 
  27:..\FreeRTOS\Source/tasks.c **** /* Standard includes. */
  28:..\FreeRTOS\Source/tasks.c **** #include <stdlib.h>
  29:..\FreeRTOS\Source/tasks.c **** #include <string.h>
  30:..\FreeRTOS\Source/tasks.c **** 
  31:..\FreeRTOS\Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:..\FreeRTOS\Source/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  33:..\FreeRTOS\Source/tasks.c ****  * task.h is included from an application file. */
  34:..\FreeRTOS\Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:..\FreeRTOS\Source/tasks.c **** 
  36:..\FreeRTOS\Source/tasks.c **** /* FreeRTOS includes. */
  37:..\FreeRTOS\Source/tasks.c **** #include "FreeRTOS.h"
  38:..\FreeRTOS\Source/tasks.c **** #include "task.h"
  39:..\FreeRTOS\Source/tasks.c **** #include "timers.h"
  40:..\FreeRTOS\Source/tasks.c **** #include "stack_macros.h"
  41:..\FreeRTOS\Source/tasks.c **** 
  42:..\FreeRTOS\Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  43:..\FreeRTOS\Source/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:..\FreeRTOS\Source/tasks.c ****  * for the header files above, but not in this file, in order to generate the
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 4


  45:..\FreeRTOS\Source/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  46:..\FreeRTOS\Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  47:..\FreeRTOS\Source/tasks.c **** 
  48:..\FreeRTOS\Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  49:..\FreeRTOS\Source/tasks.c ****  * functions but without including stdio.h here. */
  50:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  51:..\FreeRTOS\Source/tasks.c **** 
  52:..\FreeRTOS\Source/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  53:..\FreeRTOS\Source/tasks.c ****  * to generate human readable text from the raw data generated by the
  54:..\FreeRTOS\Source/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:..\FreeRTOS\Source/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  56:..\FreeRTOS\Source/tasks.c ****     #include <stdio.h>
  57:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:..\FreeRTOS\Source/tasks.c **** 
  59:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  60:..\FreeRTOS\Source/tasks.c **** 
  61:..\FreeRTOS\Source/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  62:..\FreeRTOS\Source/tasks.c ****  * performed just because a higher priority task has been woken. */
  63:..\FreeRTOS\Source/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  64:..\FreeRTOS\Source/tasks.c **** #else
  65:..\FreeRTOS\Source/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  66:..\FreeRTOS\Source/tasks.c **** #endif
  67:..\FreeRTOS\Source/tasks.c **** 
  68:..\FreeRTOS\Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:..\FreeRTOS\Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  70:..\FreeRTOS\Source/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  71:..\FreeRTOS\Source/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  72:..\FreeRTOS\Source/tasks.c **** 
  73:..\FreeRTOS\Source/tasks.c **** /*
  74:..\FreeRTOS\Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  75:..\FreeRTOS\Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  76:..\FreeRTOS\Source/tasks.c ****  */
  77:..\FreeRTOS\Source/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  78:..\FreeRTOS\Source/tasks.c **** 
  79:..\FreeRTOS\Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  80:..\FreeRTOS\Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  81:..\FreeRTOS\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  82:..\FreeRTOS\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  83:..\FreeRTOS\Source/tasks.c **** 
  84:..\FreeRTOS\Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  85:..\FreeRTOS\Source/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  86:..\FreeRTOS\Source/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  87:..\FreeRTOS\Source/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  88:..\FreeRTOS\Source/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  89:..\FreeRTOS\Source/tasks.c **** #else
  90:..\FreeRTOS\Source/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  91:..\FreeRTOS\Source/tasks.c **** #endif
  92:..\FreeRTOS\Source/tasks.c **** 
  93:..\FreeRTOS\Source/tasks.c **** /*
  94:..\FreeRTOS\Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  95:..\FreeRTOS\Source/tasks.c ****  */
  96:..\FreeRTOS\Source/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  97:..\FreeRTOS\Source/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
  98:..\FreeRTOS\Source/tasks.c **** #define tskREADY_CHAR        ( 'R' )
  99:..\FreeRTOS\Source/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 100:..\FreeRTOS\Source/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 101:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 5


 102:..\FreeRTOS\Source/tasks.c **** /*
 103:..\FreeRTOS\Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 104:..\FreeRTOS\Source/tasks.c ****  * global, rather than file scope.
 105:..\FreeRTOS\Source/tasks.c ****  */
 106:..\FreeRTOS\Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 107:..\FreeRTOS\Source/tasks.c ****     #define static
 108:..\FreeRTOS\Source/tasks.c **** #endif
 109:..\FreeRTOS\Source/tasks.c **** 
 110:..\FreeRTOS\Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 111:..\FreeRTOS\Source/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 112:..\FreeRTOS\Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 113:..\FreeRTOS\Source/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 114:..\FreeRTOS\Source/tasks.c **** #endif
 115:..\FreeRTOS\Source/tasks.c **** 
 116:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 117:..\FreeRTOS\Source/tasks.c **** 
 118:..\FreeRTOS\Source/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 119:..\FreeRTOS\Source/tasks.c ****  * performed in a generic way that is not optimised to any particular
 120:..\FreeRTOS\Source/tasks.c ****  * microcontroller architecture. */
 121:..\FreeRTOS\Source/tasks.c **** 
 122:..\FreeRTOS\Source/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 123:..\FreeRTOS\Source/tasks.c ****  * state task. */
 124:..\FreeRTOS\Source/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 125:..\FreeRTOS\Source/tasks.c ****     {                                               \
 126:..\FreeRTOS\Source/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 127:..\FreeRTOS\Source/tasks.c ****         {                                           \
 128:..\FreeRTOS\Source/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 129:..\FreeRTOS\Source/tasks.c ****         }                                           \
 130:..\FreeRTOS\Source/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 131:..\FreeRTOS\Source/tasks.c **** 
 132:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 133:..\FreeRTOS\Source/tasks.c **** 
 134:..\FreeRTOS\Source/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 135:..\FreeRTOS\Source/tasks.c ****     {                                                                         \
 136:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 137:..\FreeRTOS\Source/tasks.c ****                                                                               \
 138:..\FreeRTOS\Source/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 139:..\FreeRTOS\Source/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 140:..\FreeRTOS\Source/tasks.c ****         {                                                                     \
 141:..\FreeRTOS\Source/tasks.c ****             configASSERT( uxTopPriority );                                    \
 142:..\FreeRTOS\Source/tasks.c ****             --uxTopPriority;                                                  \
 143:..\FreeRTOS\Source/tasks.c ****         }                                                                     \
 144:..\FreeRTOS\Source/tasks.c ****                                                                               \
 145:..\FreeRTOS\Source/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 146:..\FreeRTOS\Source/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 147:..\FreeRTOS\Source/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 148:..\FreeRTOS\Source/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 149:..\FreeRTOS\Source/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 150:..\FreeRTOS\Source/tasks.c **** 
 151:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 152:..\FreeRTOS\Source/tasks.c **** 
 153:..\FreeRTOS\Source/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 154:..\FreeRTOS\Source/tasks.c ****  * they are only required when a port optimised method of task selection is
 155:..\FreeRTOS\Source/tasks.c ****  * being used. */
 156:..\FreeRTOS\Source/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 157:..\FreeRTOS\Source/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 158:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 6


 159:..\FreeRTOS\Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 160:..\FreeRTOS\Source/tasks.c **** 
 161:..\FreeRTOS\Source/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 162:..\FreeRTOS\Source/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 163:..\FreeRTOS\Source/tasks.c ****  * architecture being used. */
 164:..\FreeRTOS\Source/tasks.c **** 
 165:..\FreeRTOS\Source/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 166:..\FreeRTOS\Source/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 167:..\FreeRTOS\Source/tasks.c **** 
 168:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 169:..\FreeRTOS\Source/tasks.c **** 
 170:..\FreeRTOS\Source/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 171:..\FreeRTOS\Source/tasks.c ****     {                                                                                           \
 172:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 173:..\FreeRTOS\Source/tasks.c ****                                                                                                 \
 174:..\FreeRTOS\Source/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 175:..\FreeRTOS\Source/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 176:..\FreeRTOS\Source/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 177:..\FreeRTOS\Source/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 178:..\FreeRTOS\Source/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 179:..\FreeRTOS\Source/tasks.c **** 
 180:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 181:..\FreeRTOS\Source/tasks.c **** 
 182:..\FreeRTOS\Source/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 183:..\FreeRTOS\Source/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 184:..\FreeRTOS\Source/tasks.c ****  * or suspended list then it won't be in a ready list. */
 185:..\FreeRTOS\Source/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 186:..\FreeRTOS\Source/tasks.c ****     {                                                                                              
 187:..\FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 188:..\FreeRTOS\Source/tasks.c ****         {                                                                                          
 189:..\FreeRTOS\Source/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 190:..\FreeRTOS\Source/tasks.c ****         }                                                                                          
 191:..\FreeRTOS\Source/tasks.c ****     }
 192:..\FreeRTOS\Source/tasks.c **** 
 193:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:..\FreeRTOS\Source/tasks.c **** 
 195:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 196:..\FreeRTOS\Source/tasks.c **** 
 197:..\FreeRTOS\Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 198:..\FreeRTOS\Source/tasks.c ****  * count overflows. */
 199:..\FreeRTOS\Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 200:..\FreeRTOS\Source/tasks.c ****     {                                                                             \
 201:..\FreeRTOS\Source/tasks.c ****         List_t * pxTemp;                                                          \
 202:..\FreeRTOS\Source/tasks.c ****                                                                                   \
 203:..\FreeRTOS\Source/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 204:..\FreeRTOS\Source/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 205:..\FreeRTOS\Source/tasks.c ****                                                                                   \
 206:..\FreeRTOS\Source/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 207:..\FreeRTOS\Source/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 208:..\FreeRTOS\Source/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 209:..\FreeRTOS\Source/tasks.c ****         xNumOfOverflows++;                                                        \
 210:..\FreeRTOS\Source/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 211:..\FreeRTOS\Source/tasks.c ****     }
 212:..\FreeRTOS\Source/tasks.c **** 
 213:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 214:..\FreeRTOS\Source/tasks.c **** 
 215:..\FreeRTOS\Source/tasks.c **** /*
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 7


 216:..\FreeRTOS\Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 217:..\FreeRTOS\Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 218:..\FreeRTOS\Source/tasks.c ****  */
 219:..\FreeRTOS\Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 220:..\FreeRTOS\Source/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 221:..\FreeRTOS\Source/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 222:..\FreeRTOS\Source/tasks.c ****     vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 223:..\FreeRTOS\Source/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 224:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 225:..\FreeRTOS\Source/tasks.c **** 
 226:..\FreeRTOS\Source/tasks.c **** /*
 227:..\FreeRTOS\Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 228:..\FreeRTOS\Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 229:..\FreeRTOS\Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 230:..\FreeRTOS\Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 231:..\FreeRTOS\Source/tasks.c ****  */
 232:..\FreeRTOS\Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 233:..\FreeRTOS\Source/tasks.c **** 
 234:..\FreeRTOS\Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 235:..\FreeRTOS\Source/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 236:..\FreeRTOS\Source/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 237:..\FreeRTOS\Source/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 238:..\FreeRTOS\Source/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 239:..\FreeRTOS\Source/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 240:..\FreeRTOS\Source/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 241:..\FreeRTOS\Source/tasks.c ****  * to its original value when it is released. */
 242:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 243:..\FreeRTOS\Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 244:..\FreeRTOS\Source/tasks.c **** #else
 245:..\FreeRTOS\Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 246:..\FreeRTOS\Source/tasks.c **** #endif
 247:..\FreeRTOS\Source/tasks.c **** 
 248:..\FreeRTOS\Source/tasks.c **** /*
 249:..\FreeRTOS\Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 250:..\FreeRTOS\Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 251:..\FreeRTOS\Source/tasks.c ****  * (the task's run time environment, including register values)
 252:..\FreeRTOS\Source/tasks.c ****  */
 253:..\FreeRTOS\Source/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 254:..\FreeRTOS\Source/tasks.c **** {
 255:..\FreeRTOS\Source/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 256:..\FreeRTOS\Source/tasks.c **** 
 257:..\FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 258:..\FreeRTOS\Source/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 259:..\FreeRTOS\Source/tasks.c ****     #endif
 260:..\FreeRTOS\Source/tasks.c **** 
 261:..\FreeRTOS\Source/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 262:..\FreeRTOS\Source/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 263:..\FreeRTOS\Source/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 264:..\FreeRTOS\Source/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 265:..\FreeRTOS\Source/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 266:..\FreeRTOS\Source/tasks.c **** 
 267:..\FreeRTOS\Source/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 268:..\FreeRTOS\Source/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 269:..\FreeRTOS\Source/tasks.c ****     #endif
 270:..\FreeRTOS\Source/tasks.c **** 
 271:..\FreeRTOS\Source/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 272:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 8


 273:..\FreeRTOS\Source/tasks.c ****     #endif
 274:..\FreeRTOS\Source/tasks.c **** 
 275:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 276:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 277:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 278:..\FreeRTOS\Source/tasks.c ****     #endif
 279:..\FreeRTOS\Source/tasks.c **** 
 280:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 281:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 282:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxMutexesHeld;
 283:..\FreeRTOS\Source/tasks.c ****     #endif
 284:..\FreeRTOS\Source/tasks.c **** 
 285:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 286:..\FreeRTOS\Source/tasks.c ****         TaskHookFunction_t pxTaskTag;
 287:..\FreeRTOS\Source/tasks.c ****     #endif
 288:..\FreeRTOS\Source/tasks.c **** 
 289:..\FreeRTOS\Source/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 290:..\FreeRTOS\Source/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 291:..\FreeRTOS\Source/tasks.c ****     #endif
 292:..\FreeRTOS\Source/tasks.c **** 
 293:..\FreeRTOS\Source/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 294:..\FreeRTOS\Source/tasks.c ****         uint32_t ulRunTimeCounter; /*< Stores the amount of time the task has spent in the Running 
 295:..\FreeRTOS\Source/tasks.c ****     #endif
 296:..\FreeRTOS\Source/tasks.c **** 
 297:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 298:..\FreeRTOS\Source/tasks.c **** 
 299:..\FreeRTOS\Source/tasks.c ****         /* Allocate a Newlib reent structure that is specific to this task.
 300:..\FreeRTOS\Source/tasks.c ****          * Note Newlib support has been included by popular demand, but is not
 301:..\FreeRTOS\Source/tasks.c ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 302:..\FreeRTOS\Source/tasks.c ****          * responsible for resulting newlib operation.  User must be familiar with
 303:..\FreeRTOS\Source/tasks.c ****          * newlib and must provide system-wide implementations of the necessary
 304:..\FreeRTOS\Source/tasks.c ****          * stubs. Be warned that (at the time of writing) the current newlib design
 305:..\FreeRTOS\Source/tasks.c ****          * implements a system-wide malloc() that must be provided with locks.
 306:..\FreeRTOS\Source/tasks.c ****          *
 307:..\FreeRTOS\Source/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 308:..\FreeRTOS\Source/tasks.c ****          * for additional information. */
 309:..\FreeRTOS\Source/tasks.c ****         struct  _reent xNewLib_reent;
 310:..\FreeRTOS\Source/tasks.c ****     #endif
 311:..\FreeRTOS\Source/tasks.c **** 
 312:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 313:..\FreeRTOS\Source/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 314:..\FreeRTOS\Source/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 315:..\FreeRTOS\Source/tasks.c ****     #endif
 316:..\FreeRTOS\Source/tasks.c **** 
 317:..\FreeRTOS\Source/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 318:..\FreeRTOS\Source/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 319:..\FreeRTOS\Source/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 320:..\FreeRTOS\Source/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 321:..\FreeRTOS\Source/tasks.c ****     #endif
 322:..\FreeRTOS\Source/tasks.c **** 
 323:..\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 324:..\FreeRTOS\Source/tasks.c ****         uint8_t ucDelayAborted;
 325:..\FreeRTOS\Source/tasks.c ****     #endif
 326:..\FreeRTOS\Source/tasks.c **** 
 327:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 328:..\FreeRTOS\Source/tasks.c ****         int iTaskErrno;
 329:..\FreeRTOS\Source/tasks.c ****     #endif
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 9


 330:..\FreeRTOS\Source/tasks.c **** } tskTCB;
 331:..\FreeRTOS\Source/tasks.c **** 
 332:..\FreeRTOS\Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 333:..\FreeRTOS\Source/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 334:..\FreeRTOS\Source/tasks.c **** typedef tskTCB TCB_t;
 335:..\FreeRTOS\Source/tasks.c **** 
 336:..\FreeRTOS\Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 337:..\FreeRTOS\Source/tasks.c ****  * which static variables must be declared volatile. */
 338:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 339:..\FreeRTOS\Source/tasks.c **** 
 340:..\FreeRTOS\Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 341:..\FreeRTOS\Source/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 342:..\FreeRTOS\Source/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 343:..\FreeRTOS\Source/tasks.c ****  * the static qualifier. */
 344:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 345:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 346:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 347:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 348:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 349:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 350:..\FreeRTOS\Source/tasks.c **** 
 351:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 352:..\FreeRTOS\Source/tasks.c **** 
 353:..\FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 354:..\FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 355:..\FreeRTOS\Source/tasks.c **** 
 356:..\FreeRTOS\Source/tasks.c **** #endif
 357:..\FreeRTOS\Source/tasks.c **** 
 358:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 359:..\FreeRTOS\Source/tasks.c **** 
 360:..\FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 361:..\FreeRTOS\Source/tasks.c **** 
 362:..\FreeRTOS\Source/tasks.c **** #endif
 363:..\FreeRTOS\Source/tasks.c **** 
 364:..\FreeRTOS\Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 365:..\FreeRTOS\Source/tasks.c ****  * the errno of the currently running task. */
 366:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 367:..\FreeRTOS\Source/tasks.c ****     int FreeRTOS_errno = 0;
 368:..\FreeRTOS\Source/tasks.c **** #endif
 369:..\FreeRTOS\Source/tasks.c **** 
 370:..\FreeRTOS\Source/tasks.c **** /* Other file private variables. --------------------------------*/
 371:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 372:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 373:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 374:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 375:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 376:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 377:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 378:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 379:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 380:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 381:..\FreeRTOS\Source/tasks.c **** 
 382:..\FreeRTOS\Source/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 383:..\FreeRTOS\Source/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 384:..\FreeRTOS\Source/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 385:..\FreeRTOS\Source/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 386:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 10


 387:..\FreeRTOS\Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 388:..\FreeRTOS\Source/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 389:..\FreeRTOS\Source/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 390:..\FreeRTOS\Source/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 391:..\FreeRTOS\Source/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 392:..\FreeRTOS\Source/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 393:..\FreeRTOS\Source/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 394:..\FreeRTOS\Source/tasks.c ****  * accessed from a critical section. */
 395:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 396:..\FreeRTOS\Source/tasks.c **** 
 397:..\FreeRTOS\Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 398:..\FreeRTOS\Source/tasks.c **** 
 399:..\FreeRTOS\Source/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 400:..\FreeRTOS\Source/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 401:..\FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;    /*< Holds the value of a timer/c
 402:..\FreeRTOS\Source/tasks.c ****     PRIVILEGED_DATA static volatile uint32_t ulTotalRunTime = 0UL; /*< Holds the total amount of ex
 403:..\FreeRTOS\Source/tasks.c **** 
 404:..\FreeRTOS\Source/tasks.c **** #endif
 405:..\FreeRTOS\Source/tasks.c **** 
 406:..\FreeRTOS\Source/tasks.c **** /*lint -restore */
 407:..\FreeRTOS\Source/tasks.c **** 
 408:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 409:..\FreeRTOS\Source/tasks.c **** 
 410:..\FreeRTOS\Source/tasks.c **** /* File private functions. --------------------------------*/
 411:..\FreeRTOS\Source/tasks.c **** 
 412:..\FreeRTOS\Source/tasks.c **** /**
 413:..\FreeRTOS\Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 414:..\FreeRTOS\Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 415:..\FreeRTOS\Source/tasks.c ****  * is in any other state.
 416:..\FreeRTOS\Source/tasks.c ****  */
 417:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 418:..\FreeRTOS\Source/tasks.c **** 
 419:..\FreeRTOS\Source/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 420:..\FreeRTOS\Source/tasks.c **** 
 421:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 422:..\FreeRTOS\Source/tasks.c **** 
 423:..\FreeRTOS\Source/tasks.c **** /*
 424:..\FreeRTOS\Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 425:..\FreeRTOS\Source/tasks.c ****  * automatically upon the creation of the first task.
 426:..\FreeRTOS\Source/tasks.c ****  */
 427:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 428:..\FreeRTOS\Source/tasks.c **** 
 429:..\FreeRTOS\Source/tasks.c **** /*
 430:..\FreeRTOS\Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 431:..\FreeRTOS\Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 432:..\FreeRTOS\Source/tasks.c ****  * creation of the first user task.
 433:..\FreeRTOS\Source/tasks.c ****  *
 434:..\FreeRTOS\Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 435:..\FreeRTOS\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 436:..\FreeRTOS\Source/tasks.c ****  *
 437:..\FreeRTOS\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 438:..\FreeRTOS\Source/tasks.c ****  *
 439:..\FreeRTOS\Source/tasks.c ****  */
 440:..\FreeRTOS\Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 441:..\FreeRTOS\Source/tasks.c **** 
 442:..\FreeRTOS\Source/tasks.c **** /*
 443:..\FreeRTOS\Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 11


 444:..\FreeRTOS\Source/tasks.c ****  * including the stack pointed to by the TCB.
 445:..\FreeRTOS\Source/tasks.c ****  *
 446:..\FreeRTOS\Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 447:..\FreeRTOS\Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 448:..\FreeRTOS\Source/tasks.c ****  */
 449:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 450:..\FreeRTOS\Source/tasks.c **** 
 451:..\FreeRTOS\Source/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 452:..\FreeRTOS\Source/tasks.c **** 
 453:..\FreeRTOS\Source/tasks.c **** #endif
 454:..\FreeRTOS\Source/tasks.c **** 
 455:..\FreeRTOS\Source/tasks.c **** /*
 456:..\FreeRTOS\Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 457:..\FreeRTOS\Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 458:..\FreeRTOS\Source/tasks.c ****  * and its TCB deleted.
 459:..\FreeRTOS\Source/tasks.c ****  */
 460:..\FreeRTOS\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 461:..\FreeRTOS\Source/tasks.c **** 
 462:..\FreeRTOS\Source/tasks.c **** /*
 463:..\FreeRTOS\Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 464:..\FreeRTOS\Source/tasks.c ****  * either the current or the overflow delayed task list.
 465:..\FreeRTOS\Source/tasks.c ****  */
 466:..\FreeRTOS\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 467:..\FreeRTOS\Source/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 468:..\FreeRTOS\Source/tasks.c **** 
 469:..\FreeRTOS\Source/tasks.c **** /*
 470:..\FreeRTOS\Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 471:..\FreeRTOS\Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 472:..\FreeRTOS\Source/tasks.c ****  * a suspended list, etc.).
 473:..\FreeRTOS\Source/tasks.c ****  *
 474:..\FreeRTOS\Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 475:..\FreeRTOS\Source/tasks.c ****  * NORMAL APPLICATION CODE.
 476:..\FreeRTOS\Source/tasks.c ****  */
 477:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 478:..\FreeRTOS\Source/tasks.c **** 
 479:..\FreeRTOS\Source/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 480:..\FreeRTOS\Source/tasks.c ****                                                      List_t * pxList,
 481:..\FreeRTOS\Source/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 482:..\FreeRTOS\Source/tasks.c **** 
 483:..\FreeRTOS\Source/tasks.c **** #endif
 484:..\FreeRTOS\Source/tasks.c **** 
 485:..\FreeRTOS\Source/tasks.c **** /*
 486:..\FreeRTOS\Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 487:..\FreeRTOS\Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 488:..\FreeRTOS\Source/tasks.c ****  */
 489:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 490:..\FreeRTOS\Source/tasks.c **** 
 491:..\FreeRTOS\Source/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 492:..\FreeRTOS\Source/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 493:..\FreeRTOS\Source/tasks.c **** 
 494:..\FreeRTOS\Source/tasks.c **** #endif
 495:..\FreeRTOS\Source/tasks.c **** 
 496:..\FreeRTOS\Source/tasks.c **** /*
 497:..\FreeRTOS\Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 498:..\FreeRTOS\Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 499:..\FreeRTOS\Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 500:..\FreeRTOS\Source/tasks.c ****  */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 12


 501:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 502:..\FreeRTOS\Source/tasks.c **** 
 503:..\FreeRTOS\Source/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 504:..\FreeRTOS\Source/tasks.c **** 
 505:..\FreeRTOS\Source/tasks.c **** #endif
 506:..\FreeRTOS\Source/tasks.c **** 
 507:..\FreeRTOS\Source/tasks.c **** /*
 508:..\FreeRTOS\Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 509:..\FreeRTOS\Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 510:..\FreeRTOS\Source/tasks.c ****  *
 511:..\FreeRTOS\Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 512:..\FreeRTOS\Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 513:..\FreeRTOS\Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 514:..\FreeRTOS\Source/tasks.c ****  * set to a value other than 1.
 515:..\FreeRTOS\Source/tasks.c ****  */
 516:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 517:..\FreeRTOS\Source/tasks.c **** 
 518:..\FreeRTOS\Source/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 519:..\FreeRTOS\Source/tasks.c **** 
 520:..\FreeRTOS\Source/tasks.c **** #endif
 521:..\FreeRTOS\Source/tasks.c **** 
 522:..\FreeRTOS\Source/tasks.c **** /*
 523:..\FreeRTOS\Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 524:..\FreeRTOS\Source/tasks.c ****  * will exit the Blocked state.
 525:..\FreeRTOS\Source/tasks.c ****  */
 526:..\FreeRTOS\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 527:..\FreeRTOS\Source/tasks.c **** 
 528:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 529:..\FreeRTOS\Source/tasks.c **** 
 530:..\FreeRTOS\Source/tasks.c **** /*
 531:..\FreeRTOS\Source/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 532:..\FreeRTOS\Source/tasks.c ****  * human readable tables of task information.
 533:..\FreeRTOS\Source/tasks.c ****  */
 534:..\FreeRTOS\Source/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 535:..\FreeRTOS\Source/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 536:..\FreeRTOS\Source/tasks.c **** 
 537:..\FreeRTOS\Source/tasks.c **** #endif
 538:..\FreeRTOS\Source/tasks.c **** 
 539:..\FreeRTOS\Source/tasks.c **** /*
 540:..\FreeRTOS\Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 541:..\FreeRTOS\Source/tasks.c ****  * dynamically to fill in the structure's members.
 542:..\FreeRTOS\Source/tasks.c ****  */
 543:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 544:..\FreeRTOS\Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 545:..\FreeRTOS\Source/tasks.c ****                                   const uint32_t ulStackDepth,
 546:..\FreeRTOS\Source/tasks.c ****                                   void * const pvParameters,
 547:..\FreeRTOS\Source/tasks.c ****                                   UBaseType_t uxPriority,
 548:..\FreeRTOS\Source/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 549:..\FreeRTOS\Source/tasks.c ****                                   TCB_t * pxNewTCB,
 550:..\FreeRTOS\Source/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 551:..\FreeRTOS\Source/tasks.c **** 
 552:..\FreeRTOS\Source/tasks.c **** /*
 553:..\FreeRTOS\Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 554:..\FreeRTOS\Source/tasks.c ****  * under the control of the scheduler.
 555:..\FreeRTOS\Source/tasks.c ****  */
 556:..\FreeRTOS\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 557:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 13


 558:..\FreeRTOS\Source/tasks.c **** /*
 559:..\FreeRTOS\Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 560:..\FreeRTOS\Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 561:..\FreeRTOS\Source/tasks.c ****  * called by the function.
 562:..\FreeRTOS\Source/tasks.c ****  */
 563:..\FreeRTOS\Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 564:..\FreeRTOS\Source/tasks.c **** 
 565:..\FreeRTOS\Source/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 566:..\FreeRTOS\Source/tasks.c **** 
 567:..\FreeRTOS\Source/tasks.c **** #endif
 568:..\FreeRTOS\Source/tasks.c **** 
 569:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 570:..\FreeRTOS\Source/tasks.c **** 
 571:..\FreeRTOS\Source/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 572:..\FreeRTOS\Source/tasks.c **** 
 573:..\FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 574:..\FreeRTOS\Source/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 575:..\FreeRTOS\Source/tasks.c ****                                     const uint32_t ulStackDepth,
 576:..\FreeRTOS\Source/tasks.c ****                                     void * const pvParameters,
 577:..\FreeRTOS\Source/tasks.c ****                                     UBaseType_t uxPriority,
 578:..\FreeRTOS\Source/tasks.c ****                                     StackType_t * const puxStackBuffer,
 579:..\FreeRTOS\Source/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 580:..\FreeRTOS\Source/tasks.c ****     {
 104              		.loc 1 580 0
 105              		.cfi_startproc
 106              		@ args = 12, pretend = 0, frame = 32
 107              		@ frame_needed = 1, uses_anonymous_args = 0
 108 0000 90B5     		push	{r4, r7, lr}
 109              		.cfi_def_cfa_offset 12
 110              		.cfi_offset 4, -12
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113 0002 8DB0     		sub	sp, sp, #52
 114              		.cfi_def_cfa_offset 64
 115 0004 04AF     		add	r7, sp, #16
 116              		.cfi_def_cfa 7, 48
 117 0006 F860     		str	r0, [r7, #12]
 118 0008 B960     		str	r1, [r7, #8]
 119 000a 7A60     		str	r2, [r7, #4]
 120 000c 3B60     		str	r3, [r7]
 581:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 582:..\FreeRTOS\Source/tasks.c ****         TaskHandle_t xReturn;
 583:..\FreeRTOS\Source/tasks.c **** 
 584:..\FreeRTOS\Source/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 121              		.loc 1 584 0
 122 000e 204B     		ldr	r3, .L11
 123 0010 1B88     		ldrh	r3, [r3]
 124 0012 002B     		cmp	r3, #0
 125 0014 01D1     		bne	.L2
 126              		.loc 1 584 0 is_stmt 0 discriminator 1
 127              		.syntax divided
 128              	@ 584 "..\FreeRTOS\Source\tasks.c" 1
 129 0016 72B6     		 cpsid i 
 130              	@ 0 "" 2
 131              		.thumb
 132              		.syntax unified
 133              	.L3:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 14


 134 0018 FEE7     		b	.L3
 135              	.L2:
 585:..\FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 136              		.loc 1 585 0 is_stmt 1
 137 001a 1D4B     		ldr	r3, .L11
 138 001c 1B88     		ldrh	r3, [r3]
 139 001e 002B     		cmp	r3, #0
 140 0020 01D1     		bne	.L4
 141              		.loc 1 585 0 is_stmt 0 discriminator 1
 142              		.syntax divided
 143              	@ 585 "..\FreeRTOS\Source\tasks.c" 1
 144 0022 72B6     		 cpsid i 
 145              	@ 0 "" 2
 146              		.thumb
 147              		.syntax unified
 148              	.L5:
 149              		.loc 1 585 0 discriminator 2
 150 0024 FEE7     		b	.L5
 151              	.L4:
 152              	.LBB2:
 586:..\FreeRTOS\Source/tasks.c **** 
 587:..\FreeRTOS\Source/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 588:..\FreeRTOS\Source/tasks.c ****             {
 589:..\FreeRTOS\Source/tasks.c ****                 /* Sanity check that the size of the structure used to declare a
 590:..\FreeRTOS\Source/tasks.c ****                  * variable of type StaticTask_t equals the size of the real task
 591:..\FreeRTOS\Source/tasks.c ****                  * structure. */
 592:..\FreeRTOS\Source/tasks.c ****                 volatile size_t xSize = sizeof( StaticTask_t );
 153              		.loc 1 592 0 is_stmt 1
 154 0026 6823     		movs	r3, #104
 155 0028 7B61     		str	r3, [r7, #20]
 593:..\FreeRTOS\Source/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 156              		.loc 1 593 0
 157 002a 194B     		ldr	r3, .L11
 158 002c 1B88     		ldrh	r3, [r3]
 159 002e 002B     		cmp	r3, #0
 160 0030 01D1     		bne	.L6
 161              		.loc 1 593 0 is_stmt 0 discriminator 1
 162              		.syntax divided
 163              	@ 593 "..\FreeRTOS\Source\tasks.c" 1
 164 0032 72B6     		 cpsid i 
 165              	@ 0 "" 2
 166              		.thumb
 167              		.syntax unified
 168              	.L7:
 169              		.loc 1 593 0 discriminator 3
 170 0034 FEE7     		b	.L7
 171              	.L6:
 172              		.loc 1 593 0 discriminator 2
 173 0036 7B69     		ldr	r3, [r7, #20]
 594:..\FreeRTOS\Source/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 174              		.loc 1 594 0 is_stmt 1 discriminator 2
 175 0038 7B69     		ldr	r3, [r7, #20]
 176              	.LBE2:
 595:..\FreeRTOS\Source/tasks.c ****             }
 596:..\FreeRTOS\Source/tasks.c ****         #endif /* configASSERT_DEFINED */
 597:..\FreeRTOS\Source/tasks.c **** 
 598:..\FreeRTOS\Source/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 15


 177              		.loc 1 598 0 discriminator 2
 178 003a BB6B     		ldr	r3, [r7, #56]
 179 003c 002B     		cmp	r3, #0
 180 003e 20D0     		beq	.L8
 181              		.loc 1 598 0 is_stmt 0 discriminator 1
 182 0040 7B6B     		ldr	r3, [r7, #52]
 183 0042 002B     		cmp	r3, #0
 184 0044 1DD0     		beq	.L8
 599:..\FreeRTOS\Source/tasks.c ****         {
 600:..\FreeRTOS\Source/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 601:..\FreeRTOS\Source/tasks.c ****              * function - use them. */
 602:..\FreeRTOS\Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 185              		.loc 1 602 0 is_stmt 1
 186 0046 BB6B     		ldr	r3, [r7, #56]
 187 0048 FB61     		str	r3, [r7, #28]
 603:..\FreeRTOS\Source/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 188              		.loc 1 603 0
 189 004a FB69     		ldr	r3, [r7, #28]
 190 004c 7A6B     		ldr	r2, [r7, #52]
 191 004e 1A63     		str	r2, [r3, #48]
 604:..\FreeRTOS\Source/tasks.c **** 
 605:..\FreeRTOS\Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 606:..\FreeRTOS\Source/tasks.c ****                 {
 607:..\FreeRTOS\Source/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 608:..\FreeRTOS\Source/tasks.c ****                      * task was created statically in case the task is later deleted. */
 609:..\FreeRTOS\Source/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 192              		.loc 1 609 0
 193 0050 FB69     		ldr	r3, [r7, #28]
 194 0052 6722     		movs	r2, #103
 195 0054 0221     		movs	r1, #2
 196 0056 9954     		strb	r1, [r3, r2]
 610:..\FreeRTOS\Source/tasks.c ****                 }
 611:..\FreeRTOS\Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 612:..\FreeRTOS\Source/tasks.c **** 
 613:..\FreeRTOS\Source/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 197              		.loc 1 613 0
 198 0058 3C68     		ldr	r4, [r7]
 199 005a 7A68     		ldr	r2, [r7, #4]
 200 005c B968     		ldr	r1, [r7, #8]
 201 005e F868     		ldr	r0, [r7, #12]
 202 0060 0023     		movs	r3, #0
 203 0062 0393     		str	r3, [sp, #12]
 204 0064 FB69     		ldr	r3, [r7, #28]
 205 0066 0293     		str	r3, [sp, #8]
 206 0068 1823     		movs	r3, #24
 207 006a FB18     		adds	r3, r7, r3
 208 006c 0193     		str	r3, [sp, #4]
 209 006e 3B6B     		ldr	r3, [r7, #48]
 210 0070 0093     		str	r3, [sp]
 211 0072 2300     		movs	r3, r4
 212 0074 FFF7FEFF 		bl	prvInitialiseNewTask
 614:..\FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 213              		.loc 1 614 0
 214 0078 FB69     		ldr	r3, [r7, #28]
 215 007a 1800     		movs	r0, r3
 216 007c FFF7FEFF 		bl	prvAddNewTaskToReadyList
 217 0080 01E0     		b	.L9
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 16


 218              	.L8:
 615:..\FreeRTOS\Source/tasks.c ****         }
 616:..\FreeRTOS\Source/tasks.c ****         else
 617:..\FreeRTOS\Source/tasks.c ****         {
 618:..\FreeRTOS\Source/tasks.c ****             xReturn = NULL;
 219              		.loc 1 618 0
 220 0082 0023     		movs	r3, #0
 221 0084 BB61     		str	r3, [r7, #24]
 222              	.L9:
 619:..\FreeRTOS\Source/tasks.c ****         }
 620:..\FreeRTOS\Source/tasks.c **** 
 621:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 223              		.loc 1 621 0
 224 0086 BB69     		ldr	r3, [r7, #24]
 622:..\FreeRTOS\Source/tasks.c ****     }
 225              		.loc 1 622 0
 226 0088 1800     		movs	r0, r3
 227 008a BD46     		mov	sp, r7
 228 008c 09B0     		add	sp, sp, #36
 229              		@ sp needed
 230 008e 90BD     		pop	{r4, r7, pc}
 231              	.L12:
 232              		.align	2
 233              	.L11:
 234 0090 00000000 		.word	x
 235              		.cfi_endproc
 236              	.LFE0:
 237              		.size	xTaskCreateStatic, .-xTaskCreateStatic
 238              		.section	.text.xTaskCreate,"ax",%progbits
 239              		.align	2
 240              		.global	xTaskCreate
 241              		.code	16
 242              		.thumb_func
 243              		.type	xTaskCreate, %function
 244              	xTaskCreate:
 245              	.LFB1:
 623:..\FreeRTOS\Source/tasks.c **** 
 624:..\FreeRTOS\Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 625:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 626:..\FreeRTOS\Source/tasks.c **** 
 627:..\FreeRTOS\Source/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 628:..\FreeRTOS\Source/tasks.c **** 
 629:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 630:..\FreeRTOS\Source/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 631:..\FreeRTOS\Source/tasks.c ****     {
 632:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 633:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 634:..\FreeRTOS\Source/tasks.c **** 
 635:..\FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 636:..\FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 637:..\FreeRTOS\Source/tasks.c **** 
 638:..\FreeRTOS\Source/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 639:..\FreeRTOS\Source/tasks.c ****         {
 640:..\FreeRTOS\Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 641:..\FreeRTOS\Source/tasks.c ****              * on the implementation of the port malloc function and whether or
 642:..\FreeRTOS\Source/tasks.c ****              * not static allocation is being used. */
 643:..\FreeRTOS\Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 17


 644:..\FreeRTOS\Source/tasks.c **** 
 645:..\FreeRTOS\Source/tasks.c ****             /* Store the stack location in the TCB. */
 646:..\FreeRTOS\Source/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 647:..\FreeRTOS\Source/tasks.c **** 
 648:..\FreeRTOS\Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 649:..\FreeRTOS\Source/tasks.c ****                 {
 650:..\FreeRTOS\Source/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 651:..\FreeRTOS\Source/tasks.c ****                      * task was created statically in case the task is later deleted. */
 652:..\FreeRTOS\Source/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 653:..\FreeRTOS\Source/tasks.c ****                 }
 654:..\FreeRTOS\Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 655:..\FreeRTOS\Source/tasks.c **** 
 656:..\FreeRTOS\Source/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 657:..\FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->pcName,
 658:..\FreeRTOS\Source/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 659:..\FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->pvParameters,
 660:..\FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->uxPriority,
 661:..\FreeRTOS\Source/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 662:..\FreeRTOS\Source/tasks.c ****                                   pxTaskDefinition->xRegions );
 663:..\FreeRTOS\Source/tasks.c **** 
 664:..\FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 665:..\FreeRTOS\Source/tasks.c ****             xReturn = pdPASS;
 666:..\FreeRTOS\Source/tasks.c ****         }
 667:..\FreeRTOS\Source/tasks.c **** 
 668:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 669:..\FreeRTOS\Source/tasks.c ****     }
 670:..\FreeRTOS\Source/tasks.c **** 
 671:..\FreeRTOS\Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 672:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 673:..\FreeRTOS\Source/tasks.c **** 
 674:..\FreeRTOS\Source/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 675:..\FreeRTOS\Source/tasks.c **** 
 676:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 677:..\FreeRTOS\Source/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 678:..\FreeRTOS\Source/tasks.c ****     {
 679:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 680:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:..\FreeRTOS\Source/tasks.c **** 
 682:..\FreeRTOS\Source/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 683:..\FreeRTOS\Source/tasks.c **** 
 684:..\FreeRTOS\Source/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 685:..\FreeRTOS\Source/tasks.c ****         {
 686:..\FreeRTOS\Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 687:..\FreeRTOS\Source/tasks.c ****              * on the implementation of the port malloc function and whether or
 688:..\FreeRTOS\Source/tasks.c ****              * not static allocation is being used. */
 689:..\FreeRTOS\Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:..\FreeRTOS\Source/tasks.c **** 
 691:..\FreeRTOS\Source/tasks.c ****             if( pxNewTCB != NULL )
 692:..\FreeRTOS\Source/tasks.c ****             {
 693:..\FreeRTOS\Source/tasks.c ****                 /* Store the stack location in the TCB. */
 694:..\FreeRTOS\Source/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:..\FreeRTOS\Source/tasks.c **** 
 696:..\FreeRTOS\Source/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 697:..\FreeRTOS\Source/tasks.c ****                     {
 698:..\FreeRTOS\Source/tasks.c ****                         /* Tasks can be created statically or dynamically, so note
 699:..\FreeRTOS\Source/tasks.c ****                          * this task had a statically allocated stack in case it is
 700:..\FreeRTOS\Source/tasks.c ****                          * later deleted.  The TCB was allocated dynamically. */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 18


 701:..\FreeRTOS\Source/tasks.c ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:..\FreeRTOS\Source/tasks.c ****                     }
 703:..\FreeRTOS\Source/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 704:..\FreeRTOS\Source/tasks.c **** 
 705:..\FreeRTOS\Source/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 706:..\FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->pcName,
 707:..\FreeRTOS\Source/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 708:..\FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->pvParameters,
 709:..\FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->uxPriority,
 710:..\FreeRTOS\Source/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 711:..\FreeRTOS\Source/tasks.c ****                                       pxTaskDefinition->xRegions );
 712:..\FreeRTOS\Source/tasks.c **** 
 713:..\FreeRTOS\Source/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 714:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
 715:..\FreeRTOS\Source/tasks.c ****             }
 716:..\FreeRTOS\Source/tasks.c ****         }
 717:..\FreeRTOS\Source/tasks.c **** 
 718:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 719:..\FreeRTOS\Source/tasks.c ****     }
 720:..\FreeRTOS\Source/tasks.c **** 
 721:..\FreeRTOS\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 723:..\FreeRTOS\Source/tasks.c **** 
 724:..\FreeRTOS\Source/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:..\FreeRTOS\Source/tasks.c **** 
 726:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 727:..\FreeRTOS\Source/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 728:..\FreeRTOS\Source/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 729:..\FreeRTOS\Source/tasks.c ****                             void * const pvParameters,
 730:..\FreeRTOS\Source/tasks.c ****                             UBaseType_t uxPriority,
 731:..\FreeRTOS\Source/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 732:..\FreeRTOS\Source/tasks.c ****     {
 246              		.loc 1 732 0
 247              		.cfi_startproc
 248              		@ args = 8, pretend = 0, frame = 32
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250 0000 90B5     		push	{r4, r7, lr}
 251              		.cfi_def_cfa_offset 12
 252              		.cfi_offset 4, -12
 253              		.cfi_offset 7, -8
 254              		.cfi_offset 14, -4
 255 0002 8DB0     		sub	sp, sp, #52
 256              		.cfi_def_cfa_offset 64
 257 0004 04AF     		add	r7, sp, #16
 258              		.cfi_def_cfa 7, 48
 259 0006 F860     		str	r0, [r7, #12]
 260 0008 B960     		str	r1, [r7, #8]
 261 000a 3B60     		str	r3, [r7]
 262 000c BB1D     		adds	r3, r7, #6
 263 000e 1A80     		strh	r2, [r3]
 264              	.LBB3:
 733:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxNewTCB;
 734:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
 735:..\FreeRTOS\Source/tasks.c **** 
 736:..\FreeRTOS\Source/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 737:..\FreeRTOS\Source/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:..\FreeRTOS\Source/tasks.c ****          * the TCB then the stack. */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 19


 739:..\FreeRTOS\Source/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 740:..\FreeRTOS\Source/tasks.c ****             {
 741:..\FreeRTOS\Source/tasks.c ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 742:..\FreeRTOS\Source/tasks.c ****                  * the implementation of the port malloc function and whether or not static
 743:..\FreeRTOS\Source/tasks.c ****                  * allocation is being used. */
 744:..\FreeRTOS\Source/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:..\FreeRTOS\Source/tasks.c **** 
 746:..\FreeRTOS\Source/tasks.c ****                 if( pxNewTCB != NULL )
 747:..\FreeRTOS\Source/tasks.c ****                 {
 748:..\FreeRTOS\Source/tasks.c ****                     /* Allocate space for the stack used by the task being created.
 749:..\FreeRTOS\Source/tasks.c ****                      * The base of the stack memory stored in the TCB so the task can
 750:..\FreeRTOS\Source/tasks.c ****                      * be deleted later if required. */
 751:..\FreeRTOS\Source/tasks.c ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth
 752:..\FreeRTOS\Source/tasks.c **** 
 753:..\FreeRTOS\Source/tasks.c ****                     if( pxNewTCB->pxStack == NULL )
 754:..\FreeRTOS\Source/tasks.c ****                     {
 755:..\FreeRTOS\Source/tasks.c ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 756:..\FreeRTOS\Source/tasks.c ****                         vPortFree( pxNewTCB );
 757:..\FreeRTOS\Source/tasks.c ****                         pxNewTCB = NULL;
 758:..\FreeRTOS\Source/tasks.c ****                     }
 759:..\FreeRTOS\Source/tasks.c ****                 }
 760:..\FreeRTOS\Source/tasks.c ****             }
 761:..\FreeRTOS\Source/tasks.c ****         #else /* portSTACK_GROWTH */
 762:..\FreeRTOS\Source/tasks.c ****             {
 763:..\FreeRTOS\Source/tasks.c ****                 StackType_t * pxStack;
 764:..\FreeRTOS\Source/tasks.c **** 
 765:..\FreeRTOS\Source/tasks.c ****                 /* Allocate space for the stack used by the task being created. */
 766:..\FreeRTOS\Source/tasks.c ****                 pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); 
 265              		.loc 1 766 0
 266 0010 BB1D     		adds	r3, r7, #6
 267 0012 1B88     		ldrh	r3, [r3]
 268 0014 9B00     		lsls	r3, r3, #2
 269 0016 1800     		movs	r0, r3
 270 0018 FFF7FEFF 		bl	pvPortMalloc
 271 001c 0300     		movs	r3, r0
 272 001e 7B61     		str	r3, [r7, #20]
 767:..\FreeRTOS\Source/tasks.c **** 
 768:..\FreeRTOS\Source/tasks.c ****                 if( pxStack != NULL )
 273              		.loc 1 768 0
 274 0020 7B69     		ldr	r3, [r7, #20]
 275 0022 002B     		cmp	r3, #0
 276 0024 10D0     		beq	.L14
 769:..\FreeRTOS\Source/tasks.c ****                 {
 770:..\FreeRTOS\Source/tasks.c ****                     /* Allocate space for the TCB. */
 771:..\FreeRTOS\Source/tasks.c ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
 277              		.loc 1 771 0
 278 0026 6820     		movs	r0, #104
 279 0028 FFF7FEFF 		bl	pvPortMalloc
 280 002c 0300     		movs	r3, r0
 281 002e FB61     		str	r3, [r7, #28]
 772:..\FreeRTOS\Source/tasks.c **** 
 773:..\FreeRTOS\Source/tasks.c ****                     if( pxNewTCB != NULL )
 282              		.loc 1 773 0
 283 0030 FB69     		ldr	r3, [r7, #28]
 284 0032 002B     		cmp	r3, #0
 285 0034 03D0     		beq	.L15
 774:..\FreeRTOS\Source/tasks.c ****                     {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 20


 775:..\FreeRTOS\Source/tasks.c ****                         /* Store the stack location in the TCB. */
 776:..\FreeRTOS\Source/tasks.c ****                         pxNewTCB->pxStack = pxStack;
 286              		.loc 1 776 0
 287 0036 FB69     		ldr	r3, [r7, #28]
 288 0038 7A69     		ldr	r2, [r7, #20]
 289 003a 1A63     		str	r2, [r3, #48]
 290 003c 06E0     		b	.L17
 291              	.L15:
 777:..\FreeRTOS\Source/tasks.c ****                     }
 778:..\FreeRTOS\Source/tasks.c ****                     else
 779:..\FreeRTOS\Source/tasks.c ****                     {
 780:..\FreeRTOS\Source/tasks.c ****                         /* The stack cannot be used as the TCB was not created.  Free
 781:..\FreeRTOS\Source/tasks.c ****                          * it again. */
 782:..\FreeRTOS\Source/tasks.c ****                         vPortFree( pxStack );
 292              		.loc 1 782 0
 293 003e 7B69     		ldr	r3, [r7, #20]
 294 0040 1800     		movs	r0, r3
 295 0042 FFF7FEFF 		bl	vPortFree
 296 0046 01E0     		b	.L17
 297              	.L14:
 783:..\FreeRTOS\Source/tasks.c ****                     }
 784:..\FreeRTOS\Source/tasks.c ****                 }
 785:..\FreeRTOS\Source/tasks.c ****                 else
 786:..\FreeRTOS\Source/tasks.c ****                 {
 787:..\FreeRTOS\Source/tasks.c ****                     pxNewTCB = NULL;
 298              		.loc 1 787 0
 299 0048 0023     		movs	r3, #0
 300 004a FB61     		str	r3, [r7, #28]
 301              	.L17:
 302              	.LBE3:
 788:..\FreeRTOS\Source/tasks.c ****                 }
 789:..\FreeRTOS\Source/tasks.c ****             }
 790:..\FreeRTOS\Source/tasks.c ****         #endif /* portSTACK_GROWTH */
 791:..\FreeRTOS\Source/tasks.c **** 
 792:..\FreeRTOS\Source/tasks.c ****         if( pxNewTCB != NULL )
 303              		.loc 1 792 0
 304 004c FB69     		ldr	r3, [r7, #28]
 305 004e 002B     		cmp	r3, #0
 306 0050 1AD0     		beq	.L18
 793:..\FreeRTOS\Source/tasks.c ****         {
 794:..\FreeRTOS\Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 795:..\FreeRTOS\Source/tasks.c ****                 {
 796:..\FreeRTOS\Source/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 797:..\FreeRTOS\Source/tasks.c ****                      * task was created dynamically in case it is later deleted. */
 798:..\FreeRTOS\Source/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 307              		.loc 1 798 0
 308 0052 FB69     		ldr	r3, [r7, #28]
 309 0054 6722     		movs	r2, #103
 310 0056 0021     		movs	r1, #0
 311 0058 9954     		strb	r1, [r3, r2]
 799:..\FreeRTOS\Source/tasks.c ****                 }
 800:..\FreeRTOS\Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 801:..\FreeRTOS\Source/tasks.c **** 
 802:..\FreeRTOS\Source/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 312              		.loc 1 802 0
 313 005a BB1D     		adds	r3, r7, #6
 314 005c 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 21


 315 005e 3C68     		ldr	r4, [r7]
 316 0060 B968     		ldr	r1, [r7, #8]
 317 0062 F868     		ldr	r0, [r7, #12]
 318 0064 0023     		movs	r3, #0
 319 0066 0393     		str	r3, [sp, #12]
 320 0068 FB69     		ldr	r3, [r7, #28]
 321 006a 0293     		str	r3, [sp, #8]
 322 006c 7B6B     		ldr	r3, [r7, #52]
 323 006e 0193     		str	r3, [sp, #4]
 324 0070 3B6B     		ldr	r3, [r7, #48]
 325 0072 0093     		str	r3, [sp]
 326 0074 2300     		movs	r3, r4
 327 0076 FFF7FEFF 		bl	prvInitialiseNewTask
 803:..\FreeRTOS\Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 328              		.loc 1 803 0
 329 007a FB69     		ldr	r3, [r7, #28]
 330 007c 1800     		movs	r0, r3
 331 007e FFF7FEFF 		bl	prvAddNewTaskToReadyList
 804:..\FreeRTOS\Source/tasks.c ****             xReturn = pdPASS;
 332              		.loc 1 804 0
 333 0082 0123     		movs	r3, #1
 334 0084 BB61     		str	r3, [r7, #24]
 335 0086 02E0     		b	.L19
 336              	.L18:
 805:..\FreeRTOS\Source/tasks.c ****         }
 806:..\FreeRTOS\Source/tasks.c ****         else
 807:..\FreeRTOS\Source/tasks.c ****         {
 808:..\FreeRTOS\Source/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 337              		.loc 1 808 0
 338 0088 0123     		movs	r3, #1
 339 008a 5B42     		rsbs	r3, r3, #0
 340 008c BB61     		str	r3, [r7, #24]
 341              	.L19:
 809:..\FreeRTOS\Source/tasks.c ****         }
 810:..\FreeRTOS\Source/tasks.c **** 
 811:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 342              		.loc 1 811 0
 343 008e BB69     		ldr	r3, [r7, #24]
 812:..\FreeRTOS\Source/tasks.c ****     }
 344              		.loc 1 812 0
 345 0090 1800     		movs	r0, r3
 346 0092 BD46     		mov	sp, r7
 347 0094 09B0     		add	sp, sp, #36
 348              		@ sp needed
 349 0096 90BD     		pop	{r4, r7, pc}
 350              		.cfi_endproc
 351              	.LFE1:
 352              		.size	xTaskCreate, .-xTaskCreate
 353              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 354              		.align	2
 355              		.code	16
 356              		.thumb_func
 357              		.type	prvInitialiseNewTask, %function
 358              	prvInitialiseNewTask:
 359              	.LFB2:
 813:..\FreeRTOS\Source/tasks.c **** 
 814:..\FreeRTOS\Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 22


 815:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 816:..\FreeRTOS\Source/tasks.c **** 
 817:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 818:..\FreeRTOS\Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 819:..\FreeRTOS\Source/tasks.c ****                                   const uint32_t ulStackDepth,
 820:..\FreeRTOS\Source/tasks.c ****                                   void * const pvParameters,
 821:..\FreeRTOS\Source/tasks.c ****                                   UBaseType_t uxPriority,
 822:..\FreeRTOS\Source/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 823:..\FreeRTOS\Source/tasks.c ****                                   TCB_t * pxNewTCB,
 824:..\FreeRTOS\Source/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 825:..\FreeRTOS\Source/tasks.c **** {
 360              		.loc 1 825 0
 361              		.cfi_startproc
 362              		@ args = 16, pretend = 0, frame = 24
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364 0000 80B5     		push	{r7, lr}
 365              		.cfi_def_cfa_offset 8
 366              		.cfi_offset 7, -8
 367              		.cfi_offset 14, -4
 368 0002 86B0     		sub	sp, sp, #24
 369              		.cfi_def_cfa_offset 32
 370 0004 00AF     		add	r7, sp, #0
 371              		.cfi_def_cfa_register 7
 372 0006 F860     		str	r0, [r7, #12]
 373 0008 B960     		str	r1, [r7, #8]
 374 000a 7A60     		str	r2, [r7, #4]
 375 000c 3B60     		str	r3, [r7]
 826:..\FreeRTOS\Source/tasks.c ****     StackType_t * pxTopOfStack;
 827:..\FreeRTOS\Source/tasks.c ****     UBaseType_t x;
 828:..\FreeRTOS\Source/tasks.c **** 
 829:..\FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 830:..\FreeRTOS\Source/tasks.c ****         /* Should the task be created in privileged mode? */
 831:..\FreeRTOS\Source/tasks.c ****         BaseType_t xRunPrivileged;
 832:..\FreeRTOS\Source/tasks.c **** 
 833:..\FreeRTOS\Source/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 834:..\FreeRTOS\Source/tasks.c ****         {
 835:..\FreeRTOS\Source/tasks.c ****             xRunPrivileged = pdTRUE;
 836:..\FreeRTOS\Source/tasks.c ****         }
 837:..\FreeRTOS\Source/tasks.c ****         else
 838:..\FreeRTOS\Source/tasks.c ****         {
 839:..\FreeRTOS\Source/tasks.c ****             xRunPrivileged = pdFALSE;
 840:..\FreeRTOS\Source/tasks.c ****         }
 841:..\FreeRTOS\Source/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 842:..\FreeRTOS\Source/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 843:..\FreeRTOS\Source/tasks.c **** 
 844:..\FreeRTOS\Source/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 845:..\FreeRTOS\Source/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 846:..\FreeRTOS\Source/tasks.c ****         {
 847:..\FreeRTOS\Source/tasks.c ****             /* Fill the stack with a known value to assist debugging. */
 848:..\FreeRTOS\Source/tasks.c ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 849:..\FreeRTOS\Source/tasks.c ****         }
 850:..\FreeRTOS\Source/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 851:..\FreeRTOS\Source/tasks.c **** 
 852:..\FreeRTOS\Source/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 853:..\FreeRTOS\Source/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 854:..\FreeRTOS\Source/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 855:..\FreeRTOS\Source/tasks.c ****      * by the port. */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 23


 856:..\FreeRTOS\Source/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 857:..\FreeRTOS\Source/tasks.c ****         {
 858:..\FreeRTOS\Source/tasks.c ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 376              		.loc 1 858 0
 377 000e BB6A     		ldr	r3, [r7, #40]
 378 0010 1A6B     		ldr	r2, [r3, #48]
 379 0012 7B68     		ldr	r3, [r7, #4]
 380 0014 3D49     		ldr	r1, .L34
 381 0016 8C46     		mov	ip, r1
 382 0018 6344     		add	r3, r3, ip
 383 001a 9B00     		lsls	r3, r3, #2
 384 001c D318     		adds	r3, r2, r3
 385 001e 3B61     		str	r3, [r7, #16]
 859:..\FreeRTOS\Source/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 386              		.loc 1 859 0
 387 0020 3B69     		ldr	r3, [r7, #16]
 388 0022 0722     		movs	r2, #7
 389 0024 9343     		bics	r3, r2
 390 0026 3B61     		str	r3, [r7, #16]
 860:..\FreeRTOS\Source/tasks.c **** 
 861:..\FreeRTOS\Source/tasks.c ****             /* Check the alignment of the calculated top of stack is correct. */
 862:..\FreeRTOS\Source/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 391              		.loc 1 862 0
 392 0028 7B69     		ldr	r3, [r7, #20]
 393 002a 002B     		cmp	r3, #0
 394 002c 01D1     		bne	.L22
 395              		.loc 1 862 0 is_stmt 0 discriminator 1
 396              		.syntax divided
 397              	@ 862 "..\FreeRTOS\Source\tasks.c" 1
 398 002e 72B6     		 cpsid i 
 399              	@ 0 "" 2
 400              		.thumb
 401              		.syntax unified
 402              	.L23:
 403 0030 FEE7     		b	.L23
 404              	.L22:
 863:..\FreeRTOS\Source/tasks.c **** 
 864:..\FreeRTOS\Source/tasks.c ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 865:..\FreeRTOS\Source/tasks.c ****                 {
 866:..\FreeRTOS\Source/tasks.c ****                     /* Also record the stack's high address, which may assist
 867:..\FreeRTOS\Source/tasks.c ****                      * debugging. */
 868:..\FreeRTOS\Source/tasks.c ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 869:..\FreeRTOS\Source/tasks.c ****                 }
 870:..\FreeRTOS\Source/tasks.c ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 871:..\FreeRTOS\Source/tasks.c ****         }
 872:..\FreeRTOS\Source/tasks.c ****     #else /* portSTACK_GROWTH */
 873:..\FreeRTOS\Source/tasks.c ****         {
 874:..\FreeRTOS\Source/tasks.c ****             pxTopOfStack = pxNewTCB->pxStack;
 875:..\FreeRTOS\Source/tasks.c **** 
 876:..\FreeRTOS\Source/tasks.c ****             /* Check the alignment of the stack buffer is correct. */
 877:..\FreeRTOS\Source/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 878:..\FreeRTOS\Source/tasks.c **** 
 879:..\FreeRTOS\Source/tasks.c ****             /* The other extreme of the stack space is required if stack checking is
 880:..\FreeRTOS\Source/tasks.c ****              * performed. */
 881:..\FreeRTOS\Source/tasks.c ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 882:..\FreeRTOS\Source/tasks.c ****         }
 883:..\FreeRTOS\Source/tasks.c ****     #endif /* portSTACK_GROWTH */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 24


 884:..\FreeRTOS\Source/tasks.c **** 
 885:..\FreeRTOS\Source/tasks.c ****     /* Store the task name in the TCB. */
 886:..\FreeRTOS\Source/tasks.c ****     if( pcName != NULL )
 405              		.loc 1 886 0 is_stmt 1 discriminator 2
 406 0032 BB68     		ldr	r3, [r7, #8]
 407 0034 002B     		cmp	r3, #0
 408 0036 20D0     		beq	.L24
 887:..\FreeRTOS\Source/tasks.c ****     {
 888:..\FreeRTOS\Source/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 409              		.loc 1 888 0
 410 0038 0023     		movs	r3, #0
 411 003a 7B61     		str	r3, [r7, #20]
 412 003c 13E0     		b	.L25
 413              	.L28:
 889:..\FreeRTOS\Source/tasks.c ****         {
 890:..\FreeRTOS\Source/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 414              		.loc 1 890 0
 415 003e BA68     		ldr	r2, [r7, #8]
 416 0040 7B69     		ldr	r3, [r7, #20]
 417 0042 D318     		adds	r3, r2, r3
 418 0044 1878     		ldrb	r0, [r3]
 419 0046 BA6A     		ldr	r2, [r7, #40]
 420 0048 3421     		movs	r1, #52
 421 004a 7B69     		ldr	r3, [r7, #20]
 422 004c D318     		adds	r3, r2, r3
 423 004e 5B18     		adds	r3, r3, r1
 424 0050 021C     		adds	r2, r0, #0
 425 0052 1A70     		strb	r2, [r3]
 891:..\FreeRTOS\Source/tasks.c **** 
 892:..\FreeRTOS\Source/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 893:..\FreeRTOS\Source/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 894:..\FreeRTOS\Source/tasks.c ****              * string is not accessible (extremely unlikely). */
 895:..\FreeRTOS\Source/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 426              		.loc 1 895 0
 427 0054 BA68     		ldr	r2, [r7, #8]
 428 0056 7B69     		ldr	r3, [r7, #20]
 429 0058 D318     		adds	r3, r2, r3
 430 005a 1B78     		ldrb	r3, [r3]
 431 005c 002B     		cmp	r3, #0
 432 005e 06D0     		beq	.L32
 888:..\FreeRTOS\Source/tasks.c ****         {
 433              		.loc 1 888 0 discriminator 2
 434 0060 7B69     		ldr	r3, [r7, #20]
 435 0062 0133     		adds	r3, r3, #1
 436 0064 7B61     		str	r3, [r7, #20]
 437              	.L25:
 888:..\FreeRTOS\Source/tasks.c ****         {
 438              		.loc 1 888 0 is_stmt 0 discriminator 1
 439 0066 7B69     		ldr	r3, [r7, #20]
 440 0068 0F2B     		cmp	r3, #15
 441 006a E8D9     		bls	.L28
 442 006c 00E0     		b	.L27
 443              	.L32:
 896:..\FreeRTOS\Source/tasks.c ****             {
 897:..\FreeRTOS\Source/tasks.c ****                 break;
 444              		.loc 1 897 0 is_stmt 1
 445 006e C046     		nop
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 25


 446              	.L27:
 898:..\FreeRTOS\Source/tasks.c ****             }
 899:..\FreeRTOS\Source/tasks.c ****             else
 900:..\FreeRTOS\Source/tasks.c ****             {
 901:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 902:..\FreeRTOS\Source/tasks.c ****             }
 903:..\FreeRTOS\Source/tasks.c ****         }
 904:..\FreeRTOS\Source/tasks.c **** 
 905:..\FreeRTOS\Source/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 906:..\FreeRTOS\Source/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 907:..\FreeRTOS\Source/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 447              		.loc 1 907 0
 448 0070 BB6A     		ldr	r3, [r7, #40]
 449 0072 4322     		movs	r2, #67
 450 0074 0021     		movs	r1, #0
 451 0076 9954     		strb	r1, [r3, r2]
 452 0078 03E0     		b	.L29
 453              	.L24:
 908:..\FreeRTOS\Source/tasks.c ****     }
 909:..\FreeRTOS\Source/tasks.c ****     else
 910:..\FreeRTOS\Source/tasks.c ****     {
 911:..\FreeRTOS\Source/tasks.c ****         /* The task has not been given a name, so just ensure there is a NULL
 912:..\FreeRTOS\Source/tasks.c ****          * terminator when it is read out. */
 913:..\FreeRTOS\Source/tasks.c ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 454              		.loc 1 913 0
 455 007a BB6A     		ldr	r3, [r7, #40]
 456 007c 3422     		movs	r2, #52
 457 007e 0021     		movs	r1, #0
 458 0080 9954     		strb	r1, [r3, r2]
 459              	.L29:
 914:..\FreeRTOS\Source/tasks.c ****     }
 915:..\FreeRTOS\Source/tasks.c **** 
 916:..\FreeRTOS\Source/tasks.c ****     /* This is used as an array index so must ensure it's not too large.  First
 917:..\FreeRTOS\Source/tasks.c ****      * remove the privilege bit if one is present. */
 918:..\FreeRTOS\Source/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 460              		.loc 1 918 0
 461 0082 3B6A     		ldr	r3, [r7, #32]
 462 0084 042B     		cmp	r3, #4
 463 0086 01D9     		bls	.L30
 919:..\FreeRTOS\Source/tasks.c ****     {
 920:..\FreeRTOS\Source/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 464              		.loc 1 920 0
 465 0088 0423     		movs	r3, #4
 466 008a 3B62     		str	r3, [r7, #32]
 467              	.L30:
 921:..\FreeRTOS\Source/tasks.c ****     }
 922:..\FreeRTOS\Source/tasks.c ****     else
 923:..\FreeRTOS\Source/tasks.c ****     {
 924:..\FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 925:..\FreeRTOS\Source/tasks.c ****     }
 926:..\FreeRTOS\Source/tasks.c **** 
 927:..\FreeRTOS\Source/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 468              		.loc 1 927 0
 469 008c BB6A     		ldr	r3, [r7, #40]
 470 008e 3A6A     		ldr	r2, [r7, #32]
 471 0090 DA62     		str	r2, [r3, #44]
 928:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 26


 929:..\FreeRTOS\Source/tasks.c ****         {
 930:..\FreeRTOS\Source/tasks.c ****             pxNewTCB->uxBasePriority = uxPriority;
 931:..\FreeRTOS\Source/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 932:..\FreeRTOS\Source/tasks.c ****         }
 933:..\FreeRTOS\Source/tasks.c ****     #endif /* configUSE_MUTEXES */
 934:..\FreeRTOS\Source/tasks.c **** 
 935:..\FreeRTOS\Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 472              		.loc 1 935 0
 473 0092 BB6A     		ldr	r3, [r7, #40]
 474 0094 0433     		adds	r3, r3, #4
 475 0096 1800     		movs	r0, r3
 476 0098 FFF7FEFF 		bl	vListInitialiseItem
 936:..\FreeRTOS\Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 477              		.loc 1 936 0
 478 009c BB6A     		ldr	r3, [r7, #40]
 479 009e 1833     		adds	r3, r3, #24
 480 00a0 1800     		movs	r0, r3
 481 00a2 FFF7FEFF 		bl	vListInitialiseItem
 937:..\FreeRTOS\Source/tasks.c **** 
 938:..\FreeRTOS\Source/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 939:..\FreeRTOS\Source/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 940:..\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 482              		.loc 1 940 0
 483 00a6 BB6A     		ldr	r3, [r7, #40]
 484 00a8 BA6A     		ldr	r2, [r7, #40]
 485 00aa 1A61     		str	r2, [r3, #16]
 941:..\FreeRTOS\Source/tasks.c **** 
 942:..\FreeRTOS\Source/tasks.c ****     /* Event lists are always in priority order. */
 943:..\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 486              		.loc 1 943 0
 487 00ac 3B6A     		ldr	r3, [r7, #32]
 488 00ae 0522     		movs	r2, #5
 489 00b0 D21A     		subs	r2, r2, r3
 490 00b2 BB6A     		ldr	r3, [r7, #40]
 491 00b4 9A61     		str	r2, [r3, #24]
 944:..\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 492              		.loc 1 944 0
 493 00b6 BB6A     		ldr	r3, [r7, #40]
 494 00b8 BA6A     		ldr	r2, [r7, #40]
 495 00ba 5A62     		str	r2, [r3, #36]
 945:..\FreeRTOS\Source/tasks.c **** 
 946:..\FreeRTOS\Source/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 947:..\FreeRTOS\Source/tasks.c ****         {
 948:..\FreeRTOS\Source/tasks.c ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 949:..\FreeRTOS\Source/tasks.c ****         }
 950:..\FreeRTOS\Source/tasks.c ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 951:..\FreeRTOS\Source/tasks.c **** 
 952:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 953:..\FreeRTOS\Source/tasks.c ****         {
 954:..\FreeRTOS\Source/tasks.c ****             pxNewTCB->pxTaskTag = NULL;
 955:..\FreeRTOS\Source/tasks.c ****         }
 956:..\FreeRTOS\Source/tasks.c ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 957:..\FreeRTOS\Source/tasks.c **** 
 958:..\FreeRTOS\Source/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 959:..\FreeRTOS\Source/tasks.c ****         {
 960:..\FreeRTOS\Source/tasks.c ****             pxNewTCB->ulRunTimeCounter = 0UL;
 961:..\FreeRTOS\Source/tasks.c ****         }
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 27


 962:..\FreeRTOS\Source/tasks.c ****     #endif /* configGENERATE_RUN_TIME_STATS */
 963:..\FreeRTOS\Source/tasks.c **** 
 964:..\FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 965:..\FreeRTOS\Source/tasks.c ****         {
 966:..\FreeRTOS\Source/tasks.c ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 967:..\FreeRTOS\Source/tasks.c ****         }
 968:..\FreeRTOS\Source/tasks.c ****     #else
 969:..\FreeRTOS\Source/tasks.c ****         {
 970:..\FreeRTOS\Source/tasks.c ****             /* Avoid compiler warning about unreferenced parameter. */
 971:..\FreeRTOS\Source/tasks.c ****             ( void ) xRegions;
 972:..\FreeRTOS\Source/tasks.c ****         }
 973:..\FreeRTOS\Source/tasks.c ****     #endif
 974:..\FreeRTOS\Source/tasks.c **** 
 975:..\FreeRTOS\Source/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 976:..\FreeRTOS\Source/tasks.c ****         {
 977:..\FreeRTOS\Source/tasks.c ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 496              		.loc 1 977 0
 497 00bc BB6A     		ldr	r3, [r7, #40]
 498 00be 4433     		adds	r3, r3, #68
 499 00c0 1422     		movs	r2, #20
 500 00c2 0021     		movs	r1, #0
 501 00c4 1800     		movs	r0, r3
 502 00c6 FFF7FEFF 		bl	memset
 978:..\FreeRTOS\Source/tasks.c ****         }
 979:..\FreeRTOS\Source/tasks.c ****     #endif
 980:..\FreeRTOS\Source/tasks.c **** 
 981:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 982:..\FreeRTOS\Source/tasks.c ****         {
 983:..\FreeRTOS\Source/tasks.c ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 503              		.loc 1 983 0
 504 00ca BB6A     		ldr	r3, [r7, #40]
 505 00cc 5833     		adds	r3, r3, #88
 506 00ce 0C22     		movs	r2, #12
 507 00d0 0021     		movs	r1, #0
 508 00d2 1800     		movs	r0, r3
 509 00d4 FFF7FEFF 		bl	memset
 984:..\FreeRTOS\Source/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 510              		.loc 1 984 0
 511 00d8 BB6A     		ldr	r3, [r7, #40]
 512 00da 6433     		adds	r3, r3, #100
 513 00dc 0322     		movs	r2, #3
 514 00de 0021     		movs	r1, #0
 515 00e0 1800     		movs	r0, r3
 516 00e2 FFF7FEFF 		bl	memset
 985:..\FreeRTOS\Source/tasks.c ****         }
 986:..\FreeRTOS\Source/tasks.c ****     #endif
 987:..\FreeRTOS\Source/tasks.c **** 
 988:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 989:..\FreeRTOS\Source/tasks.c ****         {
 990:..\FreeRTOS\Source/tasks.c ****             /* Initialise this task's Newlib reent structure.
 991:..\FreeRTOS\Source/tasks.c ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 992:..\FreeRTOS\Source/tasks.c ****              * for additional information. */
 993:..\FreeRTOS\Source/tasks.c ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 994:..\FreeRTOS\Source/tasks.c ****         }
 995:..\FreeRTOS\Source/tasks.c ****     #endif
 996:..\FreeRTOS\Source/tasks.c **** 
 997:..\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 28


 998:..\FreeRTOS\Source/tasks.c ****         {
 999:..\FreeRTOS\Source/tasks.c ****             pxNewTCB->ucDelayAborted = pdFALSE;
1000:..\FreeRTOS\Source/tasks.c ****         }
1001:..\FreeRTOS\Source/tasks.c ****     #endif
1002:..\FreeRTOS\Source/tasks.c **** 
1003:..\FreeRTOS\Source/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
1004:..\FreeRTOS\Source/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1005:..\FreeRTOS\Source/tasks.c ****      * to the start of the task function. Once the stack has been initialised
1006:..\FreeRTOS\Source/tasks.c ****      * the top of stack variable is updated. */
1007:..\FreeRTOS\Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1008:..\FreeRTOS\Source/tasks.c ****         {
1009:..\FreeRTOS\Source/tasks.c ****             /* If the port has capability to detect stack overflow,
1010:..\FreeRTOS\Source/tasks.c ****              * pass the stack end address to the stack initialization
1011:..\FreeRTOS\Source/tasks.c ****              * function as well. */
1012:..\FreeRTOS\Source/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1013:..\FreeRTOS\Source/tasks.c ****                 {
1014:..\FreeRTOS\Source/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1015:..\FreeRTOS\Source/tasks.c ****                         {
1016:..\FreeRTOS\Source/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1017:..\FreeRTOS\Source/tasks.c ****                         }
1018:..\FreeRTOS\Source/tasks.c ****                     #else /* portSTACK_GROWTH */
1019:..\FreeRTOS\Source/tasks.c ****                         {
1020:..\FreeRTOS\Source/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1021:..\FreeRTOS\Source/tasks.c ****                         }
1022:..\FreeRTOS\Source/tasks.c ****                     #endif /* portSTACK_GROWTH */
1023:..\FreeRTOS\Source/tasks.c ****                 }
1024:..\FreeRTOS\Source/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1025:..\FreeRTOS\Source/tasks.c ****                 {
1026:..\FreeRTOS\Source/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1027:..\FreeRTOS\Source/tasks.c ****                 }
1028:..\FreeRTOS\Source/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1029:..\FreeRTOS\Source/tasks.c ****         }
1030:..\FreeRTOS\Source/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1031:..\FreeRTOS\Source/tasks.c ****         {
1032:..\FreeRTOS\Source/tasks.c ****             /* If the port has capability to detect stack overflow,
1033:..\FreeRTOS\Source/tasks.c ****              * pass the stack end address to the stack initialization
1034:..\FreeRTOS\Source/tasks.c ****              * function as well. */
1035:..\FreeRTOS\Source/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1036:..\FreeRTOS\Source/tasks.c ****                 {
1037:..\FreeRTOS\Source/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1038:..\FreeRTOS\Source/tasks.c ****                         {
1039:..\FreeRTOS\Source/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1040:..\FreeRTOS\Source/tasks.c ****                         }
1041:..\FreeRTOS\Source/tasks.c ****                     #else /* portSTACK_GROWTH */
1042:..\FreeRTOS\Source/tasks.c ****                         {
1043:..\FreeRTOS\Source/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1044:..\FreeRTOS\Source/tasks.c ****                         }
1045:..\FreeRTOS\Source/tasks.c ****                     #endif /* portSTACK_GROWTH */
1046:..\FreeRTOS\Source/tasks.c ****                 }
1047:..\FreeRTOS\Source/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1048:..\FreeRTOS\Source/tasks.c ****                 {
1049:..\FreeRTOS\Source/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
 517              		.loc 1 1049 0
 518 00e6 3A68     		ldr	r2, [r7]
 519 00e8 F968     		ldr	r1, [r7, #12]
 520 00ea 3B69     		ldr	r3, [r7, #16]
 521 00ec 1800     		movs	r0, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 29


 522 00ee FFF7FEFF 		bl	pxPortInitialiseStack
 523 00f2 0200     		movs	r2, r0
 524 00f4 BB6A     		ldr	r3, [r7, #40]
 525 00f6 1A60     		str	r2, [r3]
1050:..\FreeRTOS\Source/tasks.c ****                 }
1051:..\FreeRTOS\Source/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1052:..\FreeRTOS\Source/tasks.c ****         }
1053:..\FreeRTOS\Source/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1054:..\FreeRTOS\Source/tasks.c **** 
1055:..\FreeRTOS\Source/tasks.c ****     if( pxCreatedTask != NULL )
 526              		.loc 1 1055 0
 527 00f8 7B6A     		ldr	r3, [r7, #36]
 528 00fa 002B     		cmp	r3, #0
 529 00fc 02D0     		beq	.L33
1056:..\FreeRTOS\Source/tasks.c ****     {
1057:..\FreeRTOS\Source/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1058:..\FreeRTOS\Source/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1059:..\FreeRTOS\Source/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 530              		.loc 1 1059 0
 531 00fe 7B6A     		ldr	r3, [r7, #36]
 532 0100 BA6A     		ldr	r2, [r7, #40]
 533 0102 1A60     		str	r2, [r3]
 534              	.L33:
1060:..\FreeRTOS\Source/tasks.c ****     }
1061:..\FreeRTOS\Source/tasks.c ****     else
1062:..\FreeRTOS\Source/tasks.c ****     {
1063:..\FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1064:..\FreeRTOS\Source/tasks.c ****     }
1065:..\FreeRTOS\Source/tasks.c **** }
 535              		.loc 1 1065 0
 536 0104 C046     		nop
 537 0106 BD46     		mov	sp, r7
 538 0108 06B0     		add	sp, sp, #24
 539              		@ sp needed
 540 010a 80BD     		pop	{r7, pc}
 541              	.L35:
 542              		.align	2
 543              	.L34:
 544 010c FFFFFF3F 		.word	1073741823
 545              		.cfi_endproc
 546              	.LFE2:
 547              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 548              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 549              		.align	2
 550              		.code	16
 551              		.thumb_func
 552              		.type	prvAddNewTaskToReadyList, %function
 553              	prvAddNewTaskToReadyList:
 554              	.LFB3:
1066:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1067:..\FreeRTOS\Source/tasks.c **** 
1068:..\FreeRTOS\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1069:..\FreeRTOS\Source/tasks.c **** {
 555              		.loc 1 1069 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 8
 558              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 30


 559 0000 80B5     		push	{r7, lr}
 560              		.cfi_def_cfa_offset 8
 561              		.cfi_offset 7, -8
 562              		.cfi_offset 14, -4
 563 0002 82B0     		sub	sp, sp, #8
 564              		.cfi_def_cfa_offset 16
 565 0004 00AF     		add	r7, sp, #0
 566              		.cfi_def_cfa_register 7
 567 0006 7860     		str	r0, [r7, #4]
1070:..\FreeRTOS\Source/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1071:..\FreeRTOS\Source/tasks.c ****      * updated. */
1072:..\FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
 568              		.loc 1 1072 0
 569 0008 FFF7FEFF 		bl	vPortEnterCritical
1073:..\FreeRTOS\Source/tasks.c ****     {
1074:..\FreeRTOS\Source/tasks.c ****         uxCurrentNumberOfTasks++;
 570              		.loc 1 1074 0
 571 000c 284B     		ldr	r3, .L42
 572 000e 1B68     		ldr	r3, [r3]
 573 0010 5A1C     		adds	r2, r3, #1
 574 0012 274B     		ldr	r3, .L42
 575 0014 1A60     		str	r2, [r3]
1075:..\FreeRTOS\Source/tasks.c **** 
1076:..\FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB == NULL )
 576              		.loc 1 1076 0
 577 0016 274B     		ldr	r3, .L42+4
 578 0018 1B68     		ldr	r3, [r3]
 579 001a 002B     		cmp	r3, #0
 580 001c 09D1     		bne	.L37
1077:..\FreeRTOS\Source/tasks.c ****         {
1078:..\FreeRTOS\Source/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1079:..\FreeRTOS\Source/tasks.c ****              * the suspended state - make this the current task. */
1080:..\FreeRTOS\Source/tasks.c ****             pxCurrentTCB = pxNewTCB;
 581              		.loc 1 1080 0
 582 001e 254B     		ldr	r3, .L42+4
 583 0020 7A68     		ldr	r2, [r7, #4]
 584 0022 1A60     		str	r2, [r3]
1081:..\FreeRTOS\Source/tasks.c **** 
1082:..\FreeRTOS\Source/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 585              		.loc 1 1082 0
 586 0024 224B     		ldr	r3, .L42
 587 0026 1B68     		ldr	r3, [r3]
 588 0028 012B     		cmp	r3, #1
 589 002a 10D1     		bne	.L38
1083:..\FreeRTOS\Source/tasks.c ****             {
1084:..\FreeRTOS\Source/tasks.c ****                 /* This is the first task to be created so do the preliminary
1085:..\FreeRTOS\Source/tasks.c ****                  * initialisation required.  We will not recover if this call
1086:..\FreeRTOS\Source/tasks.c ****                  * fails, but we will report the failure. */
1087:..\FreeRTOS\Source/tasks.c ****                 prvInitialiseTaskLists();
 590              		.loc 1 1087 0
 591 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 592 0030 0DE0     		b	.L38
 593              	.L37:
1088:..\FreeRTOS\Source/tasks.c ****             }
1089:..\FreeRTOS\Source/tasks.c ****             else
1090:..\FreeRTOS\Source/tasks.c ****             {
1091:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 31


1092:..\FreeRTOS\Source/tasks.c ****             }
1093:..\FreeRTOS\Source/tasks.c ****         }
1094:..\FreeRTOS\Source/tasks.c ****         else
1095:..\FreeRTOS\Source/tasks.c ****         {
1096:..\FreeRTOS\Source/tasks.c ****             /* If the scheduler is not already running, make this task the
1097:..\FreeRTOS\Source/tasks.c ****              * current task if it is the highest priority task to be created
1098:..\FreeRTOS\Source/tasks.c ****              * so far. */
1099:..\FreeRTOS\Source/tasks.c ****             if( xSchedulerRunning == pdFALSE )
 594              		.loc 1 1099 0
 595 0032 214B     		ldr	r3, .L42+8
 596 0034 1B68     		ldr	r3, [r3]
 597 0036 002B     		cmp	r3, #0
 598 0038 09D1     		bne	.L38
1100:..\FreeRTOS\Source/tasks.c ****             {
1101:..\FreeRTOS\Source/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 599              		.loc 1 1101 0
 600 003a 1E4B     		ldr	r3, .L42+4
 601 003c 1B68     		ldr	r3, [r3]
 602 003e DA6A     		ldr	r2, [r3, #44]
 603 0040 7B68     		ldr	r3, [r7, #4]
 604 0042 DB6A     		ldr	r3, [r3, #44]
 605 0044 9A42     		cmp	r2, r3
 606 0046 02D8     		bhi	.L38
1102:..\FreeRTOS\Source/tasks.c ****                 {
1103:..\FreeRTOS\Source/tasks.c ****                     pxCurrentTCB = pxNewTCB;
 607              		.loc 1 1103 0
 608 0048 1A4B     		ldr	r3, .L42+4
 609 004a 7A68     		ldr	r2, [r7, #4]
 610 004c 1A60     		str	r2, [r3]
 611              	.L38:
1104:..\FreeRTOS\Source/tasks.c ****                 }
1105:..\FreeRTOS\Source/tasks.c ****                 else
1106:..\FreeRTOS\Source/tasks.c ****                 {
1107:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1108:..\FreeRTOS\Source/tasks.c ****                 }
1109:..\FreeRTOS\Source/tasks.c ****             }
1110:..\FreeRTOS\Source/tasks.c ****             else
1111:..\FreeRTOS\Source/tasks.c ****             {
1112:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1113:..\FreeRTOS\Source/tasks.c ****             }
1114:..\FreeRTOS\Source/tasks.c ****         }
1115:..\FreeRTOS\Source/tasks.c **** 
1116:..\FreeRTOS\Source/tasks.c ****         uxTaskNumber++;
 612              		.loc 1 1116 0
 613 004e 1B4B     		ldr	r3, .L42+12
 614 0050 1B68     		ldr	r3, [r3]
 615 0052 5A1C     		adds	r2, r3, #1
 616 0054 194B     		ldr	r3, .L42+12
 617 0056 1A60     		str	r2, [r3]
1117:..\FreeRTOS\Source/tasks.c **** 
1118:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1119:..\FreeRTOS\Source/tasks.c ****             {
1120:..\FreeRTOS\Source/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
1121:..\FreeRTOS\Source/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
1122:..\FreeRTOS\Source/tasks.c ****             }
1123:..\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1124:..\FreeRTOS\Source/tasks.c ****         traceTASK_CREATE( pxNewTCB );
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 32


1125:..\FreeRTOS\Source/tasks.c **** 
1126:..\FreeRTOS\Source/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
 618              		.loc 1 1126 0
 619 0058 7B68     		ldr	r3, [r7, #4]
 620 005a DA6A     		ldr	r2, [r3, #44]
 621 005c 184B     		ldr	r3, .L42+16
 622 005e 1B68     		ldr	r3, [r3]
 623 0060 9A42     		cmp	r2, r3
 624 0062 03D9     		bls	.L39
 625              		.loc 1 1126 0 is_stmt 0 discriminator 1
 626 0064 7B68     		ldr	r3, [r7, #4]
 627 0066 DA6A     		ldr	r2, [r3, #44]
 628 0068 154B     		ldr	r3, .L42+16
 629 006a 1A60     		str	r2, [r3]
 630              	.L39:
 631              		.loc 1 1126 0 discriminator 3
 632 006c 7B68     		ldr	r3, [r7, #4]
 633 006e DA6A     		ldr	r2, [r3, #44]
 634 0070 1300     		movs	r3, r2
 635 0072 9B00     		lsls	r3, r3, #2
 636 0074 9B18     		adds	r3, r3, r2
 637 0076 9B00     		lsls	r3, r3, #2
 638 0078 124A     		ldr	r2, .L42+20
 639 007a 9A18     		adds	r2, r3, r2
 640 007c 7B68     		ldr	r3, [r7, #4]
 641 007e 0433     		adds	r3, r3, #4
 642 0080 1900     		movs	r1, r3
 643 0082 1000     		movs	r0, r2
 644 0084 FFF7FEFF 		bl	vListInsertEnd
1127:..\FreeRTOS\Source/tasks.c **** 
1128:..\FreeRTOS\Source/tasks.c ****         portSETUP_TCB( pxNewTCB );
1129:..\FreeRTOS\Source/tasks.c ****     }
1130:..\FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
 645              		.loc 1 1130 0 is_stmt 1 discriminator 3
 646 0088 FFF7FEFF 		bl	vPortExitCritical
1131:..\FreeRTOS\Source/tasks.c **** 
1132:..\FreeRTOS\Source/tasks.c ****     if( xSchedulerRunning != pdFALSE )
 647              		.loc 1 1132 0 discriminator 3
 648 008c 0A4B     		ldr	r3, .L42+8
 649 008e 1B68     		ldr	r3, [r3]
 650 0090 002B     		cmp	r3, #0
 651 0092 08D0     		beq	.L41
1133:..\FreeRTOS\Source/tasks.c ****     {
1134:..\FreeRTOS\Source/tasks.c ****         /* If the created task is of a higher priority than the current task
1135:..\FreeRTOS\Source/tasks.c ****          * then it should run now. */
1136:..\FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 652              		.loc 1 1136 0
 653 0094 074B     		ldr	r3, .L42+4
 654 0096 1B68     		ldr	r3, [r3]
 655 0098 DA6A     		ldr	r2, [r3, #44]
 656 009a 7B68     		ldr	r3, [r7, #4]
 657 009c DB6A     		ldr	r3, [r3, #44]
 658 009e 9A42     		cmp	r2, r3
 659 00a0 01D2     		bcs	.L41
1137:..\FreeRTOS\Source/tasks.c ****         {
1138:..\FreeRTOS\Source/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
 660              		.loc 1 1138 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 33


 661 00a2 FFF7FEFF 		bl	vPortYield
 662              	.L41:
1139:..\FreeRTOS\Source/tasks.c ****         }
1140:..\FreeRTOS\Source/tasks.c ****         else
1141:..\FreeRTOS\Source/tasks.c ****         {
1142:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1143:..\FreeRTOS\Source/tasks.c ****         }
1144:..\FreeRTOS\Source/tasks.c ****     }
1145:..\FreeRTOS\Source/tasks.c ****     else
1146:..\FreeRTOS\Source/tasks.c ****     {
1147:..\FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1148:..\FreeRTOS\Source/tasks.c ****     }
1149:..\FreeRTOS\Source/tasks.c **** }
 663              		.loc 1 1149 0
 664 00a6 C046     		nop
 665 00a8 BD46     		mov	sp, r7
 666 00aa 02B0     		add	sp, sp, #8
 667              		@ sp needed
 668 00ac 80BD     		pop	{r7, pc}
 669              	.L43:
 670 00ae C046     		.align	2
 671              	.L42:
 672 00b0 D8000000 		.word	uxCurrentNumberOfTasks
 673 00b4 00000000 		.word	pxCurrentTCB
 674 00b8 E4000000 		.word	xSchedulerRunning
 675 00bc F4000000 		.word	uxTaskNumber
 676 00c0 E0000000 		.word	uxTopReadyPriority
 677 00c4 04000000 		.word	pxReadyTasksLists
 678              		.cfi_endproc
 679              	.LFE3:
 680              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 681              		.section	.text.vTaskDelete,"ax",%progbits
 682              		.align	2
 683              		.global	vTaskDelete
 684              		.code	16
 685              		.thumb_func
 686              		.type	vTaskDelete, %function
 687              	vTaskDelete:
 688              	.LFB4:
1150:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1151:..\FreeRTOS\Source/tasks.c **** 
1152:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1153:..\FreeRTOS\Source/tasks.c **** 
1154:..\FreeRTOS\Source/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1155:..\FreeRTOS\Source/tasks.c ****     {
 689              		.loc 1 1155 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 16
 692              		@ frame_needed = 1, uses_anonymous_args = 0
 693 0000 80B5     		push	{r7, lr}
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 7, -8
 696              		.cfi_offset 14, -4
 697 0002 84B0     		sub	sp, sp, #16
 698              		.cfi_def_cfa_offset 24
 699 0004 00AF     		add	r7, sp, #0
 700              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 34


 701 0006 7860     		str	r0, [r7, #4]
1156:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
1157:..\FreeRTOS\Source/tasks.c **** 
1158:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 702              		.loc 1 1158 0
 703 0008 FFF7FEFF 		bl	vPortEnterCritical
1159:..\FreeRTOS\Source/tasks.c ****         {
1160:..\FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the calling task that is
1161:..\FreeRTOS\Source/tasks.c ****              * being deleted. */
1162:..\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 704              		.loc 1 1162 0
 705 000c 7B68     		ldr	r3, [r7, #4]
 706 000e 002B     		cmp	r3, #0
 707 0010 02D1     		bne	.L45
 708              		.loc 1 1162 0 is_stmt 0 discriminator 1
 709 0012 274B     		ldr	r3, .L54
 710 0014 1B68     		ldr	r3, [r3]
 711 0016 00E0     		b	.L46
 712              	.L45:
 713              		.loc 1 1162 0 discriminator 2
 714 0018 7B68     		ldr	r3, [r7, #4]
 715              	.L46:
 716              		.loc 1 1162 0 discriminator 4
 717 001a FB60     		str	r3, [r7, #12]
1163:..\FreeRTOS\Source/tasks.c **** 
1164:..\FreeRTOS\Source/tasks.c ****             /* Remove task from the ready/delayed list. */
1165:..\FreeRTOS\Source/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 718              		.loc 1 1165 0 is_stmt 1 discriminator 4
 719 001c FB68     		ldr	r3, [r7, #12]
 720 001e 0433     		adds	r3, r3, #4
 721 0020 1800     		movs	r0, r3
 722 0022 FFF7FEFF 		bl	uxListRemove
1166:..\FreeRTOS\Source/tasks.c ****             {
1167:..\FreeRTOS\Source/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1168:..\FreeRTOS\Source/tasks.c ****             }
1169:..\FreeRTOS\Source/tasks.c ****             else
1170:..\FreeRTOS\Source/tasks.c ****             {
1171:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1172:..\FreeRTOS\Source/tasks.c ****             }
1173:..\FreeRTOS\Source/tasks.c **** 
1174:..\FreeRTOS\Source/tasks.c ****             /* Is the task waiting on an event also? */
1175:..\FreeRTOS\Source/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 723              		.loc 1 1175 0 discriminator 4
 724 0026 FB68     		ldr	r3, [r7, #12]
 725 0028 9B6A     		ldr	r3, [r3, #40]
 726 002a 002B     		cmp	r3, #0
 727 002c 04D0     		beq	.L47
1176:..\FreeRTOS\Source/tasks.c ****             {
1177:..\FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 728              		.loc 1 1177 0
 729 002e FB68     		ldr	r3, [r7, #12]
 730 0030 1833     		adds	r3, r3, #24
 731 0032 1800     		movs	r0, r3
 732 0034 FFF7FEFF 		bl	uxListRemove
 733              	.L47:
1178:..\FreeRTOS\Source/tasks.c ****             }
1179:..\FreeRTOS\Source/tasks.c ****             else
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 35


1180:..\FreeRTOS\Source/tasks.c ****             {
1181:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1182:..\FreeRTOS\Source/tasks.c ****             }
1183:..\FreeRTOS\Source/tasks.c **** 
1184:..\FreeRTOS\Source/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1185:..\FreeRTOS\Source/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1186:..\FreeRTOS\Source/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1187:..\FreeRTOS\Source/tasks.c ****              * not return. */
1188:..\FreeRTOS\Source/tasks.c ****             uxTaskNumber++;
 734              		.loc 1 1188 0
 735 0038 1E4B     		ldr	r3, .L54+4
 736 003a 1B68     		ldr	r3, [r3]
 737 003c 5A1C     		adds	r2, r3, #1
 738 003e 1D4B     		ldr	r3, .L54+4
 739 0040 1A60     		str	r2, [r3]
1189:..\FreeRTOS\Source/tasks.c **** 
1190:..\FreeRTOS\Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
 740              		.loc 1 1190 0
 741 0042 1B4B     		ldr	r3, .L54
 742 0044 1B68     		ldr	r3, [r3]
 743 0046 FA68     		ldr	r2, [r7, #12]
 744 0048 9A42     		cmp	r2, r3
 745 004a 0CD1     		bne	.L48
1191:..\FreeRTOS\Source/tasks.c ****             {
1192:..\FreeRTOS\Source/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1193:..\FreeRTOS\Source/tasks.c ****                  * task itself, as a context switch to another task is required.
1194:..\FreeRTOS\Source/tasks.c ****                  * Place the task in the termination list.  The idle task will
1195:..\FreeRTOS\Source/tasks.c ****                  * check the termination list and free up any memory allocated by
1196:..\FreeRTOS\Source/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1197:..\FreeRTOS\Source/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 746              		.loc 1 1197 0
 747 004c FB68     		ldr	r3, [r7, #12]
 748 004e 1A1D     		adds	r2, r3, #4
 749 0050 194B     		ldr	r3, .L54+8
 750 0052 1100     		movs	r1, r2
 751 0054 1800     		movs	r0, r3
 752 0056 FFF7FEFF 		bl	vListInsertEnd
1198:..\FreeRTOS\Source/tasks.c **** 
1199:..\FreeRTOS\Source/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1200:..\FreeRTOS\Source/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1201:..\FreeRTOS\Source/tasks.c ****                  * check the xTasksWaitingTermination list. */
1202:..\FreeRTOS\Source/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
 753              		.loc 1 1202 0
 754 005a 184B     		ldr	r3, .L54+12
 755 005c 1B68     		ldr	r3, [r3]
 756 005e 5A1C     		adds	r2, r3, #1
 757 0060 164B     		ldr	r3, .L54+12
 758 0062 1A60     		str	r2, [r3]
 759 0064 0AE0     		b	.L49
 760              	.L48:
1203:..\FreeRTOS\Source/tasks.c **** 
1204:..\FreeRTOS\Source/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1205:..\FreeRTOS\Source/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1206:..\FreeRTOS\Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
1207:..\FreeRTOS\Source/tasks.c **** 
1208:..\FreeRTOS\Source/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1209:..\FreeRTOS\Source/tasks.c ****                  * in which Windows specific clean up operations are performed,
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 36


1210:..\FreeRTOS\Source/tasks.c ****                  * after which it is not possible to yield away from this task -
1211:..\FreeRTOS\Source/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1212:..\FreeRTOS\Source/tasks.c ****                  * required. */
1213:..\FreeRTOS\Source/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1214:..\FreeRTOS\Source/tasks.c ****             }
1215:..\FreeRTOS\Source/tasks.c ****             else
1216:..\FreeRTOS\Source/tasks.c ****             {
1217:..\FreeRTOS\Source/tasks.c ****                 --uxCurrentNumberOfTasks;
 761              		.loc 1 1217 0
 762 0066 164B     		ldr	r3, .L54+16
 763 0068 1B68     		ldr	r3, [r3]
 764 006a 5A1E     		subs	r2, r3, #1
 765 006c 144B     		ldr	r3, .L54+16
 766 006e 1A60     		str	r2, [r3]
1218:..\FreeRTOS\Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
1219:..\FreeRTOS\Source/tasks.c ****                 prvDeleteTCB( pxTCB );
 767              		.loc 1 1219 0
 768 0070 FB68     		ldr	r3, [r7, #12]
 769 0072 1800     		movs	r0, r3
 770 0074 FFF7FEFF 		bl	prvDeleteTCB
1220:..\FreeRTOS\Source/tasks.c **** 
1221:..\FreeRTOS\Source/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1222:..\FreeRTOS\Source/tasks.c ****                  * the task that has just been deleted. */
1223:..\FreeRTOS\Source/tasks.c ****                 prvResetNextTaskUnblockTime();
 771              		.loc 1 1223 0
 772 0078 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 773              	.L49:
1224:..\FreeRTOS\Source/tasks.c ****             }
1225:..\FreeRTOS\Source/tasks.c ****         }
1226:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 774              		.loc 1 1226 0
 775 007c FFF7FEFF 		bl	vPortExitCritical
1227:..\FreeRTOS\Source/tasks.c **** 
1228:..\FreeRTOS\Source/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1229:..\FreeRTOS\Source/tasks.c ****          * been deleted. */
1230:..\FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 776              		.loc 1 1230 0
 777 0080 104B     		ldr	r3, .L54+20
 778 0082 1B68     		ldr	r3, [r3]
 779 0084 002B     		cmp	r3, #0
 780 0086 0ED0     		beq	.L53
1231:..\FreeRTOS\Source/tasks.c ****         {
1232:..\FreeRTOS\Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
 781              		.loc 1 1232 0
 782 0088 094B     		ldr	r3, .L54
 783 008a 1B68     		ldr	r3, [r3]
 784 008c FA68     		ldr	r2, [r7, #12]
 785 008e 9A42     		cmp	r2, r3
 786 0090 09D1     		bne	.L53
1233:..\FreeRTOS\Source/tasks.c ****             {
1234:..\FreeRTOS\Source/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 787              		.loc 1 1234 0
 788 0092 0D4B     		ldr	r3, .L54+24
 789 0094 1B88     		ldrh	r3, [r3]
 790 0096 002B     		cmp	r3, #0
 791 0098 01D1     		bne	.L51
 792              		.loc 1 1234 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 37


 793              		.syntax divided
 794              	@ 1234 "..\FreeRTOS\Source\tasks.c" 1
 795 009a 72B6     		 cpsid i 
 796              	@ 0 "" 2
 797              		.thumb
 798              		.syntax unified
 799              	.L52:
 800 009c FEE7     		b	.L52
 801              	.L51:
 802              		.loc 1 1234 0 discriminator 2
 803 009e 0B4B     		ldr	r3, .L54+28
 804 00a0 1B68     		ldr	r3, [r3]
1235:..\FreeRTOS\Source/tasks.c ****                 portYIELD_WITHIN_API();
 805              		.loc 1 1235 0 is_stmt 1 discriminator 2
 806 00a2 FFF7FEFF 		bl	vPortYield
 807              	.L53:
1236:..\FreeRTOS\Source/tasks.c ****             }
1237:..\FreeRTOS\Source/tasks.c ****             else
1238:..\FreeRTOS\Source/tasks.c ****             {
1239:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1240:..\FreeRTOS\Source/tasks.c ****             }
1241:..\FreeRTOS\Source/tasks.c ****         }
1242:..\FreeRTOS\Source/tasks.c ****     }
 808              		.loc 1 1242 0
 809 00a6 C046     		nop
 810 00a8 BD46     		mov	sp, r7
 811 00aa 04B0     		add	sp, sp, #16
 812              		@ sp needed
 813 00ac 80BD     		pop	{r7, pc}
 814              	.L55:
 815 00ae C046     		.align	2
 816              	.L54:
 817 00b0 00000000 		.word	pxCurrentTCB
 818 00b4 F4000000 		.word	uxTaskNumber
 819 00b8 AC000000 		.word	xTasksWaitingTermination
 820 00bc C0000000 		.word	uxDeletedTasksWaitingCleanUp
 821 00c0 D8000000 		.word	uxCurrentNumberOfTasks
 822 00c4 E4000000 		.word	xSchedulerRunning
 823 00c8 00000000 		.word	x
 824 00cc 00010000 		.word	uxSchedulerSuspended
 825              		.cfi_endproc
 826              	.LFE4:
 827              		.size	vTaskDelete, .-vTaskDelete
 828              		.section	.text.xTaskDelayUntil,"ax",%progbits
 829              		.align	2
 830              		.global	xTaskDelayUntil
 831              		.code	16
 832              		.thumb_func
 833              		.type	xTaskDelayUntil, %function
 834              	xTaskDelayUntil:
 835              	.LFB5:
1243:..\FreeRTOS\Source/tasks.c **** 
1244:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1246:..\FreeRTOS\Source/tasks.c **** 
1247:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1248:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 38


1249:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1250:..\FreeRTOS\Source/tasks.c ****                                 const TickType_t xTimeIncrement )
1251:..\FreeRTOS\Source/tasks.c ****     {
 836              		.loc 1 1251 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 24
 839              		@ frame_needed = 1, uses_anonymous_args = 0
 840 0000 80B5     		push	{r7, lr}
 841              		.cfi_def_cfa_offset 8
 842              		.cfi_offset 7, -8
 843              		.cfi_offset 14, -4
 844 0002 86B0     		sub	sp, sp, #24
 845              		.cfi_def_cfa_offset 32
 846 0004 00AF     		add	r7, sp, #0
 847              		.cfi_def_cfa_register 7
 848 0006 7860     		str	r0, [r7, #4]
 849 0008 3960     		str	r1, [r7]
1252:..\FreeRTOS\Source/tasks.c ****         TickType_t xTimeToWake;
1253:..\FreeRTOS\Source/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 850              		.loc 1 1253 0
 851 000a 0023     		movs	r3, #0
 852 000c 7B61     		str	r3, [r7, #20]
1254:..\FreeRTOS\Source/tasks.c **** 
1255:..\FreeRTOS\Source/tasks.c ****         configASSERT( pxPreviousWakeTime );
 853              		.loc 1 1255 0
 854 000e 2A4B     		ldr	r3, .L69
 855 0010 1B88     		ldrh	r3, [r3]
 856 0012 002B     		cmp	r3, #0
 857 0014 01D1     		bne	.L57
 858              		.loc 1 1255 0 is_stmt 0 discriminator 1
 859              		.syntax divided
 860              	@ 1255 "..\FreeRTOS\Source\tasks.c" 1
 861 0016 72B6     		 cpsid i 
 862              	@ 0 "" 2
 863              		.thumb
 864              		.syntax unified
 865              	.L58:
 866 0018 FEE7     		b	.L58
 867              	.L57:
1256:..\FreeRTOS\Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 868              		.loc 1 1256 0 is_stmt 1
 869 001a 274B     		ldr	r3, .L69
 870 001c 1B88     		ldrh	r3, [r3]
 871 001e 002B     		cmp	r3, #0
 872 0020 01D1     		bne	.L59
 873              		.loc 1 1256 0 is_stmt 0 discriminator 1
 874              		.syntax divided
 875              	@ 1256 "..\FreeRTOS\Source\tasks.c" 1
 876 0022 72B6     		 cpsid i 
 877              	@ 0 "" 2
 878              		.thumb
 879              		.syntax unified
 880              	.L60:
 881              		.loc 1 1256 0 discriminator 2
 882 0024 FEE7     		b	.L60
 883              	.L59:
1257:..\FreeRTOS\Source/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 39


 884              		.loc 1 1257 0 is_stmt 1
 885 0026 244B     		ldr	r3, .L69
 886 0028 1B88     		ldrh	r3, [r3]
 887 002a 002B     		cmp	r3, #0
 888 002c 01D1     		bne	.L61
 889              		.loc 1 1257 0 is_stmt 0 discriminator 1
 890              		.syntax divided
 891              	@ 1257 "..\FreeRTOS\Source\tasks.c" 1
 892 002e 72B6     		 cpsid i 
 893              	@ 0 "" 2
 894              		.thumb
 895              		.syntax unified
 896              	.L62:
 897              		.loc 1 1257 0 discriminator 3
 898 0030 FEE7     		b	.L62
 899              	.L61:
 900              		.loc 1 1257 0 discriminator 2
 901 0032 224B     		ldr	r3, .L69+4
 902 0034 1B68     		ldr	r3, [r3]
1258:..\FreeRTOS\Source/tasks.c **** 
1259:..\FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
 903              		.loc 1 1259 0 is_stmt 1 discriminator 2
 904 0036 FFF7FEFF 		bl	vTaskSuspendAll
 905              	.LBB4:
1260:..\FreeRTOS\Source/tasks.c ****         {
1261:..\FreeRTOS\Source/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1262:..\FreeRTOS\Source/tasks.c ****              * block. */
1263:..\FreeRTOS\Source/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
 906              		.loc 1 1263 0 discriminator 2
 907 003a 214B     		ldr	r3, .L69+8
 908 003c 1B68     		ldr	r3, [r3]
 909 003e 3B61     		str	r3, [r7, #16]
1264:..\FreeRTOS\Source/tasks.c **** 
1265:..\FreeRTOS\Source/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1266:..\FreeRTOS\Source/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 910              		.loc 1 1266 0 discriminator 2
 911 0040 7B68     		ldr	r3, [r7, #4]
 912 0042 1A68     		ldr	r2, [r3]
 913 0044 3B68     		ldr	r3, [r7]
 914 0046 D318     		adds	r3, r2, r3
 915 0048 FB60     		str	r3, [r7, #12]
1267:..\FreeRTOS\Source/tasks.c **** 
1268:..\FreeRTOS\Source/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
 916              		.loc 1 1268 0 discriminator 2
 917 004a 7B68     		ldr	r3, [r7, #4]
 918 004c 1A68     		ldr	r2, [r3]
 919 004e 3B69     		ldr	r3, [r7, #16]
 920 0050 9A42     		cmp	r2, r3
 921 0052 0BD9     		bls	.L63
1269:..\FreeRTOS\Source/tasks.c ****             {
1270:..\FreeRTOS\Source/tasks.c ****                 /* The tick count has overflowed since this function was
1271:..\FreeRTOS\Source/tasks.c ****                  * lasted called.  In this case the only time we should ever
1272:..\FreeRTOS\Source/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1273:..\FreeRTOS\Source/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1274:..\FreeRTOS\Source/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1275:..\FreeRTOS\Source/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 922              		.loc 1 1275 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 40


 923 0054 7B68     		ldr	r3, [r7, #4]
 924 0056 1A68     		ldr	r2, [r3]
 925 0058 FB68     		ldr	r3, [r7, #12]
 926 005a 9A42     		cmp	r2, r3
 927 005c 11D9     		bls	.L64
 928              		.loc 1 1275 0 is_stmt 0 discriminator 1
 929 005e FA68     		ldr	r2, [r7, #12]
 930 0060 3B69     		ldr	r3, [r7, #16]
 931 0062 9A42     		cmp	r2, r3
 932 0064 0DD9     		bls	.L64
1276:..\FreeRTOS\Source/tasks.c ****                 {
1277:..\FreeRTOS\Source/tasks.c ****                     xShouldDelay = pdTRUE;
 933              		.loc 1 1277 0 is_stmt 1
 934 0066 0123     		movs	r3, #1
 935 0068 7B61     		str	r3, [r7, #20]
 936 006a 0AE0     		b	.L64
 937              	.L63:
1278:..\FreeRTOS\Source/tasks.c ****                 }
1279:..\FreeRTOS\Source/tasks.c ****                 else
1280:..\FreeRTOS\Source/tasks.c ****                 {
1281:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1282:..\FreeRTOS\Source/tasks.c ****                 }
1283:..\FreeRTOS\Source/tasks.c ****             }
1284:..\FreeRTOS\Source/tasks.c ****             else
1285:..\FreeRTOS\Source/tasks.c ****             {
1286:..\FreeRTOS\Source/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1287:..\FreeRTOS\Source/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1288:..\FreeRTOS\Source/tasks.c ****                  * tick time is less than the wake time. */
1289:..\FreeRTOS\Source/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 938              		.loc 1 1289 0
 939 006c 7B68     		ldr	r3, [r7, #4]
 940 006e 1A68     		ldr	r2, [r3]
 941 0070 FB68     		ldr	r3, [r7, #12]
 942 0072 9A42     		cmp	r2, r3
 943 0074 03D8     		bhi	.L65
 944              		.loc 1 1289 0 is_stmt 0 discriminator 1
 945 0076 FA68     		ldr	r2, [r7, #12]
 946 0078 3B69     		ldr	r3, [r7, #16]
 947 007a 9A42     		cmp	r2, r3
 948 007c 01D9     		bls	.L64
 949              	.L65:
1290:..\FreeRTOS\Source/tasks.c ****                 {
1291:..\FreeRTOS\Source/tasks.c ****                     xShouldDelay = pdTRUE;
 950              		.loc 1 1291 0 is_stmt 1
 951 007e 0123     		movs	r3, #1
 952 0080 7B61     		str	r3, [r7, #20]
 953              	.L64:
1292:..\FreeRTOS\Source/tasks.c ****                 }
1293:..\FreeRTOS\Source/tasks.c ****                 else
1294:..\FreeRTOS\Source/tasks.c ****                 {
1295:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1296:..\FreeRTOS\Source/tasks.c ****                 }
1297:..\FreeRTOS\Source/tasks.c ****             }
1298:..\FreeRTOS\Source/tasks.c **** 
1299:..\FreeRTOS\Source/tasks.c ****             /* Update the wake time ready for the next call. */
1300:..\FreeRTOS\Source/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
 954              		.loc 1 1300 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 41


 955 0082 7B68     		ldr	r3, [r7, #4]
 956 0084 FA68     		ldr	r2, [r7, #12]
 957 0086 1A60     		str	r2, [r3]
1301:..\FreeRTOS\Source/tasks.c **** 
1302:..\FreeRTOS\Source/tasks.c ****             if( xShouldDelay != pdFALSE )
 958              		.loc 1 1302 0
 959 0088 7B69     		ldr	r3, [r7, #20]
 960 008a 002B     		cmp	r3, #0
 961 008c 06D0     		beq	.L66
1303:..\FreeRTOS\Source/tasks.c ****             {
1304:..\FreeRTOS\Source/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1305:..\FreeRTOS\Source/tasks.c **** 
1306:..\FreeRTOS\Source/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1307:..\FreeRTOS\Source/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1308:..\FreeRTOS\Source/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 962              		.loc 1 1308 0
 963 008e FA68     		ldr	r2, [r7, #12]
 964 0090 3B69     		ldr	r3, [r7, #16]
 965 0092 D31A     		subs	r3, r2, r3
 966 0094 0021     		movs	r1, #0
 967 0096 1800     		movs	r0, r3
 968 0098 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 969              	.L66:
 970              	.LBE4:
1309:..\FreeRTOS\Source/tasks.c ****             }
1310:..\FreeRTOS\Source/tasks.c ****             else
1311:..\FreeRTOS\Source/tasks.c ****             {
1312:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1313:..\FreeRTOS\Source/tasks.c ****             }
1314:..\FreeRTOS\Source/tasks.c ****         }
1315:..\FreeRTOS\Source/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
 971              		.loc 1 1315 0
 972 009c FFF7FEFF 		bl	xTaskResumeAll
 973 00a0 0300     		movs	r3, r0
 974 00a2 BB60     		str	r3, [r7, #8]
1316:..\FreeRTOS\Source/tasks.c **** 
1317:..\FreeRTOS\Source/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1318:..\FreeRTOS\Source/tasks.c ****          * have put ourselves to sleep. */
1319:..\FreeRTOS\Source/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 975              		.loc 1 1319 0
 976 00a4 BB68     		ldr	r3, [r7, #8]
 977 00a6 002B     		cmp	r3, #0
 978 00a8 01D1     		bne	.L67
1320:..\FreeRTOS\Source/tasks.c ****         {
1321:..\FreeRTOS\Source/tasks.c ****             portYIELD_WITHIN_API();
 979              		.loc 1 1321 0
 980 00aa FFF7FEFF 		bl	vPortYield
 981              	.L67:
1322:..\FreeRTOS\Source/tasks.c ****         }
1323:..\FreeRTOS\Source/tasks.c ****         else
1324:..\FreeRTOS\Source/tasks.c ****         {
1325:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1326:..\FreeRTOS\Source/tasks.c ****         }
1327:..\FreeRTOS\Source/tasks.c **** 
1328:..\FreeRTOS\Source/tasks.c ****         return xShouldDelay;
 982              		.loc 1 1328 0
 983 00ae 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 42


1329:..\FreeRTOS\Source/tasks.c ****     }
 984              		.loc 1 1329 0
 985 00b0 1800     		movs	r0, r3
 986 00b2 BD46     		mov	sp, r7
 987 00b4 06B0     		add	sp, sp, #24
 988              		@ sp needed
 989 00b6 80BD     		pop	{r7, pc}
 990              	.L70:
 991              		.align	2
 992              	.L69:
 993 00b8 00000000 		.word	x
 994 00bc 00010000 		.word	uxSchedulerSuspended
 995 00c0 DC000000 		.word	xTickCount
 996              		.cfi_endproc
 997              	.LFE5:
 998              		.size	xTaskDelayUntil, .-xTaskDelayUntil
 999              		.section	.text.vTaskDelay,"ax",%progbits
 1000              		.align	2
 1001              		.global	vTaskDelay
 1002              		.code	16
 1003              		.thumb_func
 1004              		.type	vTaskDelay, %function
 1005              	vTaskDelay:
 1006              	.LFB6:
1330:..\FreeRTOS\Source/tasks.c **** 
1331:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1332:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1333:..\FreeRTOS\Source/tasks.c **** 
1334:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1335:..\FreeRTOS\Source/tasks.c **** 
1336:..\FreeRTOS\Source/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1337:..\FreeRTOS\Source/tasks.c ****     {
 1007              		.loc 1 1337 0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 16
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011 0000 80B5     		push	{r7, lr}
 1012              		.cfi_def_cfa_offset 8
 1013              		.cfi_offset 7, -8
 1014              		.cfi_offset 14, -4
 1015 0002 84B0     		sub	sp, sp, #16
 1016              		.cfi_def_cfa_offset 24
 1017 0004 00AF     		add	r7, sp, #0
 1018              		.cfi_def_cfa_register 7
 1019 0006 7860     		str	r0, [r7, #4]
1338:..\FreeRTOS\Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 1020              		.loc 1 1338 0
 1021 0008 0023     		movs	r3, #0
 1022 000a FB60     		str	r3, [r7, #12]
1339:..\FreeRTOS\Source/tasks.c **** 
1340:..\FreeRTOS\Source/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1341:..\FreeRTOS\Source/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
 1023              		.loc 1 1341 0
 1024 000c 7B68     		ldr	r3, [r7, #4]
 1025 000e 002B     		cmp	r3, #0
 1026 0010 12D0     		beq	.L72
1342:..\FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 43


1343:..\FreeRTOS\Source/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
 1027              		.loc 1 1343 0
 1028 0012 0E4B     		ldr	r3, .L77
 1029 0014 1B88     		ldrh	r3, [r3]
 1030 0016 002B     		cmp	r3, #0
 1031 0018 01D1     		bne	.L73
 1032              		.loc 1 1343 0 is_stmt 0 discriminator 1
 1033              		.syntax divided
 1034              	@ 1343 "..\FreeRTOS\Source\tasks.c" 1
 1035 001a 72B6     		 cpsid i 
 1036              	@ 0 "" 2
 1037              		.thumb
 1038              		.syntax unified
 1039              	.L74:
 1040 001c FEE7     		b	.L74
 1041              	.L73:
 1042              		.loc 1 1343 0 discriminator 2
 1043 001e 0C4B     		ldr	r3, .L77+4
 1044 0020 1B68     		ldr	r3, [r3]
1344:..\FreeRTOS\Source/tasks.c ****             vTaskSuspendAll();
 1045              		.loc 1 1344 0 is_stmt 1 discriminator 2
 1046 0022 FFF7FEFF 		bl	vTaskSuspendAll
1345:..\FreeRTOS\Source/tasks.c ****             {
1346:..\FreeRTOS\Source/tasks.c ****                 traceTASK_DELAY();
1347:..\FreeRTOS\Source/tasks.c **** 
1348:..\FreeRTOS\Source/tasks.c ****                 /* A task that is removed from the event list while the
1349:..\FreeRTOS\Source/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1350:..\FreeRTOS\Source/tasks.c ****                  * list or removed from the blocked list until the scheduler
1351:..\FreeRTOS\Source/tasks.c ****                  * is resumed.
1352:..\FreeRTOS\Source/tasks.c ****                  *
1353:..\FreeRTOS\Source/tasks.c ****                  * This task cannot be in an event list as it is the currently
1354:..\FreeRTOS\Source/tasks.c ****                  * executing task. */
1355:..\FreeRTOS\Source/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1047              		.loc 1 1355 0 discriminator 2
 1048 0026 7B68     		ldr	r3, [r7, #4]
 1049 0028 0021     		movs	r1, #0
 1050 002a 1800     		movs	r0, r3
 1051 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1356:..\FreeRTOS\Source/tasks.c ****             }
1357:..\FreeRTOS\Source/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
 1052              		.loc 1 1357 0 discriminator 2
 1053 0030 FFF7FEFF 		bl	xTaskResumeAll
 1054 0034 0300     		movs	r3, r0
 1055 0036 FB60     		str	r3, [r7, #12]
 1056              	.L72:
1358:..\FreeRTOS\Source/tasks.c ****         }
1359:..\FreeRTOS\Source/tasks.c ****         else
1360:..\FreeRTOS\Source/tasks.c ****         {
1361:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1362:..\FreeRTOS\Source/tasks.c ****         }
1363:..\FreeRTOS\Source/tasks.c **** 
1364:..\FreeRTOS\Source/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1365:..\FreeRTOS\Source/tasks.c ****          * have put ourselves to sleep. */
1366:..\FreeRTOS\Source/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 1057              		.loc 1 1366 0
 1058 0038 FB68     		ldr	r3, [r7, #12]
 1059 003a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 44


 1060 003c 01D1     		bne	.L76
1367:..\FreeRTOS\Source/tasks.c ****         {
1368:..\FreeRTOS\Source/tasks.c ****             portYIELD_WITHIN_API();
 1061              		.loc 1 1368 0
 1062 003e FFF7FEFF 		bl	vPortYield
 1063              	.L76:
1369:..\FreeRTOS\Source/tasks.c ****         }
1370:..\FreeRTOS\Source/tasks.c ****         else
1371:..\FreeRTOS\Source/tasks.c ****         {
1372:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1373:..\FreeRTOS\Source/tasks.c ****         }
1374:..\FreeRTOS\Source/tasks.c ****     }
 1064              		.loc 1 1374 0
 1065 0042 C046     		nop
 1066 0044 BD46     		mov	sp, r7
 1067 0046 04B0     		add	sp, sp, #16
 1068              		@ sp needed
 1069 0048 80BD     		pop	{r7, pc}
 1070              	.L78:
 1071 004a C046     		.align	2
 1072              	.L77:
 1073 004c 00000000 		.word	x
 1074 0050 00010000 		.word	uxSchedulerSuspended
 1075              		.cfi_endproc
 1076              	.LFE6:
 1077              		.size	vTaskDelay, .-vTaskDelay
 1078              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1079              		.align	2
 1080              		.global	uxTaskPriorityGet
 1081              		.code	16
 1082              		.thumb_func
 1083              		.type	uxTaskPriorityGet, %function
 1084              	uxTaskPriorityGet:
 1085              	.LFB7:
1375:..\FreeRTOS\Source/tasks.c **** 
1376:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1377:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1378:..\FreeRTOS\Source/tasks.c **** 
1379:..\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1380:..\FreeRTOS\Source/tasks.c **** 
1381:..\FreeRTOS\Source/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1382:..\FreeRTOS\Source/tasks.c ****     {
1383:..\FreeRTOS\Source/tasks.c ****         eTaskState eReturn;
1384:..\FreeRTOS\Source/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1385:..\FreeRTOS\Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
1386:..\FreeRTOS\Source/tasks.c **** 
1387:..\FreeRTOS\Source/tasks.c ****         configASSERT( pxTCB );
1388:..\FreeRTOS\Source/tasks.c **** 
1389:..\FreeRTOS\Source/tasks.c ****         if( pxTCB == pxCurrentTCB )
1390:..\FreeRTOS\Source/tasks.c ****         {
1391:..\FreeRTOS\Source/tasks.c ****             /* The task calling this function is querying its own state. */
1392:..\FreeRTOS\Source/tasks.c ****             eReturn = eRunning;
1393:..\FreeRTOS\Source/tasks.c ****         }
1394:..\FreeRTOS\Source/tasks.c ****         else
1395:..\FreeRTOS\Source/tasks.c ****         {
1396:..\FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
1397:..\FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 45


1398:..\FreeRTOS\Source/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1399:..\FreeRTOS\Source/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1400:..\FreeRTOS\Source/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1401:..\FreeRTOS\Source/tasks.c ****             }
1402:..\FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
1403:..\FreeRTOS\Source/tasks.c **** 
1404:..\FreeRTOS\Source/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1405:..\FreeRTOS\Source/tasks.c ****             {
1406:..\FreeRTOS\Source/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1407:..\FreeRTOS\Source/tasks.c ****                  * lists. */
1408:..\FreeRTOS\Source/tasks.c ****                 eReturn = eBlocked;
1409:..\FreeRTOS\Source/tasks.c ****             }
1410:..\FreeRTOS\Source/tasks.c **** 
1411:..\FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1412:..\FreeRTOS\Source/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1413:..\FreeRTOS\Source/tasks.c ****                 {
1414:..\FreeRTOS\Source/tasks.c ****                     /* The task being queried is referenced from the suspended
1415:..\FreeRTOS\Source/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1416:..\FreeRTOS\Source/tasks.c ****                      * indefinitely? */
1417:..\FreeRTOS\Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1418:..\FreeRTOS\Source/tasks.c ****                     {
1419:..\FreeRTOS\Source/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1420:..\FreeRTOS\Source/tasks.c ****                             {
1421:..\FreeRTOS\Source/tasks.c ****                                 BaseType_t x;
1422:..\FreeRTOS\Source/tasks.c **** 
1423:..\FreeRTOS\Source/tasks.c ****                                 /* The task does not appear on the event list item of
1424:..\FreeRTOS\Source/tasks.c ****                                  * and of the RTOS objects, but could still be in the
1425:..\FreeRTOS\Source/tasks.c ****                                  * blocked state if it is waiting on its notification
1426:..\FreeRTOS\Source/tasks.c ****                                  * rather than waiting on an object.  If not, is
1427:..\FreeRTOS\Source/tasks.c ****                                  * suspended. */
1428:..\FreeRTOS\Source/tasks.c ****                                 eReturn = eSuspended;
1429:..\FreeRTOS\Source/tasks.c **** 
1430:..\FreeRTOS\Source/tasks.c ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1431:..\FreeRTOS\Source/tasks.c ****                                 {
1432:..\FreeRTOS\Source/tasks.c ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1433:..\FreeRTOS\Source/tasks.c ****                                     {
1434:..\FreeRTOS\Source/tasks.c ****                                         eReturn = eBlocked;
1435:..\FreeRTOS\Source/tasks.c ****                                         break;
1436:..\FreeRTOS\Source/tasks.c ****                                     }
1437:..\FreeRTOS\Source/tasks.c ****                                 }
1438:..\FreeRTOS\Source/tasks.c ****                             }
1439:..\FreeRTOS\Source/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1440:..\FreeRTOS\Source/tasks.c ****                             {
1441:..\FreeRTOS\Source/tasks.c ****                                 eReturn = eSuspended;
1442:..\FreeRTOS\Source/tasks.c ****                             }
1443:..\FreeRTOS\Source/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1444:..\FreeRTOS\Source/tasks.c ****                     }
1445:..\FreeRTOS\Source/tasks.c ****                     else
1446:..\FreeRTOS\Source/tasks.c ****                     {
1447:..\FreeRTOS\Source/tasks.c ****                         eReturn = eBlocked;
1448:..\FreeRTOS\Source/tasks.c ****                     }
1449:..\FreeRTOS\Source/tasks.c ****                 }
1450:..\FreeRTOS\Source/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1451:..\FreeRTOS\Source/tasks.c **** 
1452:..\FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1453:..\FreeRTOS\Source/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:..\FreeRTOS\Source/tasks.c ****                 {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 46


1455:..\FreeRTOS\Source/tasks.c ****                     /* The task being queried is referenced from the deleted
1456:..\FreeRTOS\Source/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1457:..\FreeRTOS\Source/tasks.c ****                      * all. */
1458:..\FreeRTOS\Source/tasks.c ****                     eReturn = eDeleted;
1459:..\FreeRTOS\Source/tasks.c ****                 }
1460:..\FreeRTOS\Source/tasks.c ****             #endif
1461:..\FreeRTOS\Source/tasks.c **** 
1462:..\FreeRTOS\Source/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1463:..\FreeRTOS\Source/tasks.c ****             {
1464:..\FreeRTOS\Source/tasks.c ****                 /* If the task is not in any other state, it must be in the
1465:..\FreeRTOS\Source/tasks.c ****                  * Ready (including pending ready) state. */
1466:..\FreeRTOS\Source/tasks.c ****                 eReturn = eReady;
1467:..\FreeRTOS\Source/tasks.c ****             }
1468:..\FreeRTOS\Source/tasks.c ****         }
1469:..\FreeRTOS\Source/tasks.c **** 
1470:..\FreeRTOS\Source/tasks.c ****         return eReturn;
1471:..\FreeRTOS\Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:..\FreeRTOS\Source/tasks.c **** 
1473:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1475:..\FreeRTOS\Source/tasks.c **** 
1476:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:..\FreeRTOS\Source/tasks.c **** 
1478:..\FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:..\FreeRTOS\Source/tasks.c ****     {
 1086              		.loc 1 1479 0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 16
 1089              		@ frame_needed = 1, uses_anonymous_args = 0
 1090 0000 80B5     		push	{r7, lr}
 1091              		.cfi_def_cfa_offset 8
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 84B0     		sub	sp, sp, #16
 1095              		.cfi_def_cfa_offset 24
 1096 0004 00AF     		add	r7, sp, #0
 1097              		.cfi_def_cfa_register 7
 1098 0006 7860     		str	r0, [r7, #4]
1480:..\FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
1481:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn;
1482:..\FreeRTOS\Source/tasks.c **** 
1483:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 1099              		.loc 1 1483 0
 1100 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:..\FreeRTOS\Source/tasks.c ****         {
1485:..\FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the priority of the task
1486:..\FreeRTOS\Source/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1487:..\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1101              		.loc 1 1487 0
 1102 000c 7B68     		ldr	r3, [r7, #4]
 1103 000e 002B     		cmp	r3, #0
 1104 0010 02D1     		bne	.L80
 1105              		.loc 1 1487 0 is_stmt 0 discriminator 1
 1106 0012 074B     		ldr	r3, .L83
 1107 0014 1B68     		ldr	r3, [r3]
 1108 0016 00E0     		b	.L81
 1109              	.L80:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 47


 1110              		.loc 1 1487 0 discriminator 2
 1111 0018 7B68     		ldr	r3, [r7, #4]
 1112              	.L81:
 1113              		.loc 1 1487 0 discriminator 4
 1114 001a FB60     		str	r3, [r7, #12]
1488:..\FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1115              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1116 001c FB68     		ldr	r3, [r7, #12]
 1117 001e DB6A     		ldr	r3, [r3, #44]
 1118 0020 BB60     		str	r3, [r7, #8]
1489:..\FreeRTOS\Source/tasks.c ****         }
1490:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 1119              		.loc 1 1490 0 discriminator 4
 1120 0022 FFF7FEFF 		bl	vPortExitCritical
1491:..\FreeRTOS\Source/tasks.c **** 
1492:..\FreeRTOS\Source/tasks.c ****         return uxReturn;
 1121              		.loc 1 1492 0 discriminator 4
 1122 0026 BB68     		ldr	r3, [r7, #8]
1493:..\FreeRTOS\Source/tasks.c ****     }
 1123              		.loc 1 1493 0 discriminator 4
 1124 0028 1800     		movs	r0, r3
 1125 002a BD46     		mov	sp, r7
 1126 002c 04B0     		add	sp, sp, #16
 1127              		@ sp needed
 1128 002e 80BD     		pop	{r7, pc}
 1129              	.L84:
 1130              		.align	2
 1131              	.L83:
 1132 0030 00000000 		.word	pxCurrentTCB
 1133              		.cfi_endproc
 1134              	.LFE7:
 1135              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1136              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1137              		.align	2
 1138              		.global	uxTaskPriorityGetFromISR
 1139              		.code	16
 1140              		.thumb_func
 1141              		.type	uxTaskPriorityGetFromISR, %function
 1142              	uxTaskPriorityGetFromISR:
 1143              	.LFB8:
1494:..\FreeRTOS\Source/tasks.c **** 
1495:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1497:..\FreeRTOS\Source/tasks.c **** 
1498:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:..\FreeRTOS\Source/tasks.c **** 
1500:..\FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:..\FreeRTOS\Source/tasks.c ****     {
 1144              		.loc 1 1501 0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 24
 1147              		@ frame_needed = 1, uses_anonymous_args = 0
 1148 0000 80B5     		push	{r7, lr}
 1149              		.cfi_def_cfa_offset 8
 1150              		.cfi_offset 7, -8
 1151              		.cfi_offset 14, -4
 1152 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 48


 1153              		.cfi_def_cfa_offset 32
 1154 0004 00AF     		add	r7, sp, #0
 1155              		.cfi_def_cfa_register 7
 1156 0006 7860     		str	r0, [r7, #4]
1502:..\FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
1503:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1504:..\FreeRTOS\Source/tasks.c **** 
1505:..\FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1506:..\FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1507:..\FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1508:..\FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1509:..\FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:..\FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
1511:..\FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:..\FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1513:..\FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
1514:..\FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1515:..\FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1516:..\FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:..\FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1518:..\FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1519:..\FreeRTOS\Source/tasks.c ****          * provided on the following link:
1520:..\FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1521:..\FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:..\FreeRTOS\Source/tasks.c **** 
1523:..\FreeRTOS\Source/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1157              		.loc 1 1523 0
 1158 0008 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1159 000c 0300     		movs	r3, r0
 1160 000e 7B61     		str	r3, [r7, #20]
1524:..\FreeRTOS\Source/tasks.c ****         {
1525:..\FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1526:..\FreeRTOS\Source/tasks.c ****              * task that is being queried. */
1527:..\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1161              		.loc 1 1527 0
 1162 0010 7B68     		ldr	r3, [r7, #4]
 1163 0012 002B     		cmp	r3, #0
 1164 0014 02D1     		bne	.L86
 1165              		.loc 1 1527 0 is_stmt 0 discriminator 1
 1166 0016 084B     		ldr	r3, .L89
 1167 0018 1B68     		ldr	r3, [r3]
 1168 001a 00E0     		b	.L87
 1169              	.L86:
 1170              		.loc 1 1527 0 discriminator 2
 1171 001c 7B68     		ldr	r3, [r7, #4]
 1172              	.L87:
 1173              		.loc 1 1527 0 discriminator 4
 1174 001e 3B61     		str	r3, [r7, #16]
1528:..\FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1175              		.loc 1 1528 0 is_stmt 1 discriminator 4
 1176 0020 3B69     		ldr	r3, [r7, #16]
 1177 0022 DB6A     		ldr	r3, [r3, #44]
 1178 0024 FB60     		str	r3, [r7, #12]
1529:..\FreeRTOS\Source/tasks.c ****         }
1530:..\FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
 1179              		.loc 1 1530 0 discriminator 4
 1180 0026 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 49


 1181 0028 1800     		movs	r0, r3
 1182 002a FFF7FEFF 		bl	vClearInterruptMaskFromISR
1531:..\FreeRTOS\Source/tasks.c **** 
1532:..\FreeRTOS\Source/tasks.c ****         return uxReturn;
 1183              		.loc 1 1532 0 discriminator 4
 1184 002e FB68     		ldr	r3, [r7, #12]
1533:..\FreeRTOS\Source/tasks.c ****     }
 1185              		.loc 1 1533 0 discriminator 4
 1186 0030 1800     		movs	r0, r3
 1187 0032 BD46     		mov	sp, r7
 1188 0034 06B0     		add	sp, sp, #24
 1189              		@ sp needed
 1190 0036 80BD     		pop	{r7, pc}
 1191              	.L90:
 1192              		.align	2
 1193              	.L89:
 1194 0038 00000000 		.word	pxCurrentTCB
 1195              		.cfi_endproc
 1196              	.LFE8:
 1197              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1198              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1199              		.align	2
 1200              		.global	vTaskPrioritySet
 1201              		.code	16
 1202              		.thumb_func
 1203              		.type	vTaskPrioritySet, %function
 1204              	vTaskPrioritySet:
 1205              	.LFB9:
1534:..\FreeRTOS\Source/tasks.c **** 
1535:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1537:..\FreeRTOS\Source/tasks.c **** 
1538:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:..\FreeRTOS\Source/tasks.c **** 
1540:..\FreeRTOS\Source/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1541:..\FreeRTOS\Source/tasks.c ****                            UBaseType_t uxNewPriority )
1542:..\FreeRTOS\Source/tasks.c ****     {
 1206              		.loc 1 1542 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 24
 1209              		@ frame_needed = 1, uses_anonymous_args = 0
 1210 0000 80B5     		push	{r7, lr}
 1211              		.cfi_def_cfa_offset 8
 1212              		.cfi_offset 7, -8
 1213              		.cfi_offset 14, -4
 1214 0002 86B0     		sub	sp, sp, #24
 1215              		.cfi_def_cfa_offset 32
 1216 0004 00AF     		add	r7, sp, #0
 1217              		.cfi_def_cfa_register 7
 1218 0006 7860     		str	r0, [r7, #4]
 1219 0008 3960     		str	r1, [r7]
1543:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
1544:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1545:..\FreeRTOS\Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1220              		.loc 1 1545 0
 1221 000a 0023     		movs	r3, #0
 1222 000c 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 50


1546:..\FreeRTOS\Source/tasks.c **** 
1547:..\FreeRTOS\Source/tasks.c ****         configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1223              		.loc 1 1547 0
 1224 000e 3B4B     		ldr	r3, .L103
 1225 0010 1B88     		ldrh	r3, [r3]
 1226 0012 002B     		cmp	r3, #0
 1227 0014 01D1     		bne	.L92
 1228              		.loc 1 1547 0 is_stmt 0 discriminator 1
 1229              		.syntax divided
 1230              	@ 1547 "..\FreeRTOS\Source\tasks.c" 1
 1231 0016 72B6     		 cpsid i 
 1232              	@ 0 "" 2
 1233              		.thumb
 1234              		.syntax unified
 1235              	.L93:
 1236 0018 FEE7     		b	.L93
 1237              	.L92:
1548:..\FreeRTOS\Source/tasks.c **** 
1549:..\FreeRTOS\Source/tasks.c ****         /* Ensure the new priority is valid. */
1550:..\FreeRTOS\Source/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1238              		.loc 1 1550 0 is_stmt 1
 1239 001a 3B68     		ldr	r3, [r7]
 1240 001c 042B     		cmp	r3, #4
 1241 001e 01D9     		bls	.L94
1551:..\FreeRTOS\Source/tasks.c ****         {
1552:..\FreeRTOS\Source/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1242              		.loc 1 1552 0
 1243 0020 0423     		movs	r3, #4
 1244 0022 3B60     		str	r3, [r7]
 1245              	.L94:
1553:..\FreeRTOS\Source/tasks.c ****         }
1554:..\FreeRTOS\Source/tasks.c ****         else
1555:..\FreeRTOS\Source/tasks.c ****         {
1556:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1557:..\FreeRTOS\Source/tasks.c ****         }
1558:..\FreeRTOS\Source/tasks.c **** 
1559:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 1246              		.loc 1 1559 0
 1247 0024 FFF7FEFF 		bl	vPortEnterCritical
1560:..\FreeRTOS\Source/tasks.c ****         {
1561:..\FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1562:..\FreeRTOS\Source/tasks.c ****              * task that is being changed. */
1563:..\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1248              		.loc 1 1563 0
 1249 0028 7B68     		ldr	r3, [r7, #4]
 1250 002a 002B     		cmp	r3, #0
 1251 002c 02D1     		bne	.L95
 1252              		.loc 1 1563 0 is_stmt 0 discriminator 1
 1253 002e 344B     		ldr	r3, .L103+4
 1254 0030 1B68     		ldr	r3, [r3]
 1255 0032 00E0     		b	.L96
 1256              	.L95:
 1257              		.loc 1 1563 0 discriminator 2
 1258 0034 7B68     		ldr	r3, [r7, #4]
 1259              	.L96:
 1260              		.loc 1 1563 0 discriminator 4
 1261 0036 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 51


1564:..\FreeRTOS\Source/tasks.c **** 
1565:..\FreeRTOS\Source/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1566:..\FreeRTOS\Source/tasks.c **** 
1567:..\FreeRTOS\Source/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1568:..\FreeRTOS\Source/tasks.c ****                 {
1569:..\FreeRTOS\Source/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
1570:..\FreeRTOS\Source/tasks.c ****                 }
1571:..\FreeRTOS\Source/tasks.c ****             #else
1572:..\FreeRTOS\Source/tasks.c ****                 {
1573:..\FreeRTOS\Source/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxPriority;
 1262              		.loc 1 1573 0 is_stmt 1 discriminator 4
 1263 0038 3B69     		ldr	r3, [r7, #16]
 1264 003a DB6A     		ldr	r3, [r3, #44]
 1265 003c FB60     		str	r3, [r7, #12]
1574:..\FreeRTOS\Source/tasks.c ****                 }
1575:..\FreeRTOS\Source/tasks.c ****             #endif
1576:..\FreeRTOS\Source/tasks.c **** 
1577:..\FreeRTOS\Source/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
 1266              		.loc 1 1577 0 discriminator 4
 1267 003e FA68     		ldr	r2, [r7, #12]
 1268 0040 3B68     		ldr	r3, [r7]
 1269 0042 9A42     		cmp	r2, r3
 1270 0044 54D0     		beq	.L97
1578:..\FreeRTOS\Source/tasks.c ****             {
1579:..\FreeRTOS\Source/tasks.c ****                 /* The priority change may have readied a task of higher
1580:..\FreeRTOS\Source/tasks.c ****                  * priority than the calling task. */
1581:..\FreeRTOS\Source/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
 1271              		.loc 1 1581 0
 1272 0046 3A68     		ldr	r2, [r7]
 1273 0048 FB68     		ldr	r3, [r7, #12]
 1274 004a 9A42     		cmp	r2, r3
 1275 004c 0DD9     		bls	.L98
1582:..\FreeRTOS\Source/tasks.c ****                 {
1583:..\FreeRTOS\Source/tasks.c ****                     if( pxTCB != pxCurrentTCB )
 1276              		.loc 1 1583 0
 1277 004e 2C4B     		ldr	r3, .L103+4
 1278 0050 1B68     		ldr	r3, [r3]
 1279 0052 3A69     		ldr	r2, [r7, #16]
 1280 0054 9A42     		cmp	r2, r3
 1281 0056 0FD0     		beq	.L99
1584:..\FreeRTOS\Source/tasks.c ****                     {
1585:..\FreeRTOS\Source/tasks.c ****                         /* The priority of a task other than the currently
1586:..\FreeRTOS\Source/tasks.c ****                          * running task is being raised.  Is the priority being
1587:..\FreeRTOS\Source/tasks.c ****                          * raised above that of the running task? */
1588:..\FreeRTOS\Source/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1282              		.loc 1 1588 0
 1283 0058 294B     		ldr	r3, .L103+4
 1284 005a 1B68     		ldr	r3, [r3]
 1285 005c DA6A     		ldr	r2, [r3, #44]
 1286 005e 3B68     		ldr	r3, [r7]
 1287 0060 9A42     		cmp	r2, r3
 1288 0062 09D8     		bhi	.L99
1589:..\FreeRTOS\Source/tasks.c ****                         {
1590:..\FreeRTOS\Source/tasks.c ****                             xYieldRequired = pdTRUE;
 1289              		.loc 1 1590 0
 1290 0064 0123     		movs	r3, #1
 1291 0066 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 52


 1292 0068 06E0     		b	.L99
 1293              	.L98:
1591:..\FreeRTOS\Source/tasks.c ****                         }
1592:..\FreeRTOS\Source/tasks.c ****                         else
1593:..\FreeRTOS\Source/tasks.c ****                         {
1594:..\FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1595:..\FreeRTOS\Source/tasks.c ****                         }
1596:..\FreeRTOS\Source/tasks.c ****                     }
1597:..\FreeRTOS\Source/tasks.c ****                     else
1598:..\FreeRTOS\Source/tasks.c ****                     {
1599:..\FreeRTOS\Source/tasks.c ****                         /* The priority of the running task is being raised,
1600:..\FreeRTOS\Source/tasks.c ****                          * but the running task must already be the highest
1601:..\FreeRTOS\Source/tasks.c ****                          * priority task able to run so no yield is required. */
1602:..\FreeRTOS\Source/tasks.c ****                     }
1603:..\FreeRTOS\Source/tasks.c ****                 }
1604:..\FreeRTOS\Source/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
 1294              		.loc 1 1604 0
 1295 006a 254B     		ldr	r3, .L103+4
 1296 006c 1B68     		ldr	r3, [r3]
 1297 006e 3A69     		ldr	r2, [r7, #16]
 1298 0070 9A42     		cmp	r2, r3
 1299 0072 01D1     		bne	.L99
1605:..\FreeRTOS\Source/tasks.c ****                 {
1606:..\FreeRTOS\Source/tasks.c ****                     /* Setting the priority of the running task down means
1607:..\FreeRTOS\Source/tasks.c ****                      * there may now be another task of higher priority that
1608:..\FreeRTOS\Source/tasks.c ****                      * is ready to execute. */
1609:..\FreeRTOS\Source/tasks.c ****                     xYieldRequired = pdTRUE;
 1300              		.loc 1 1609 0
 1301 0074 0123     		movs	r3, #1
 1302 0076 7B61     		str	r3, [r7, #20]
 1303              	.L99:
1610:..\FreeRTOS\Source/tasks.c ****                 }
1611:..\FreeRTOS\Source/tasks.c ****                 else
1612:..\FreeRTOS\Source/tasks.c ****                 {
1613:..\FreeRTOS\Source/tasks.c ****                     /* Setting the priority of any other task down does not
1614:..\FreeRTOS\Source/tasks.c ****                      * require a yield as the running task must be above the
1615:..\FreeRTOS\Source/tasks.c ****                      * new priority of the task being modified. */
1616:..\FreeRTOS\Source/tasks.c ****                 }
1617:..\FreeRTOS\Source/tasks.c **** 
1618:..\FreeRTOS\Source/tasks.c ****                 /* Remember the ready list the task might be referenced from
1619:..\FreeRTOS\Source/tasks.c ****                  * before its uxPriority member is changed so the
1620:..\FreeRTOS\Source/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1621:..\FreeRTOS\Source/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1304              		.loc 1 1621 0
 1305 0078 3B69     		ldr	r3, [r7, #16]
 1306 007a DB6A     		ldr	r3, [r3, #44]
 1307 007c BB60     		str	r3, [r7, #8]
1622:..\FreeRTOS\Source/tasks.c **** 
1623:..\FreeRTOS\Source/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1624:..\FreeRTOS\Source/tasks.c ****                     {
1625:..\FreeRTOS\Source/tasks.c ****                         /* Only change the priority being used if the task is not
1626:..\FreeRTOS\Source/tasks.c ****                          * currently using an inherited priority. */
1627:..\FreeRTOS\Source/tasks.c ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1628:..\FreeRTOS\Source/tasks.c ****                         {
1629:..\FreeRTOS\Source/tasks.c ****                             pxTCB->uxPriority = uxNewPriority;
1630:..\FreeRTOS\Source/tasks.c ****                         }
1631:..\FreeRTOS\Source/tasks.c ****                         else
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 53


1632:..\FreeRTOS\Source/tasks.c ****                         {
1633:..\FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1634:..\FreeRTOS\Source/tasks.c ****                         }
1635:..\FreeRTOS\Source/tasks.c **** 
1636:..\FreeRTOS\Source/tasks.c ****                         /* The base priority gets set whatever. */
1637:..\FreeRTOS\Source/tasks.c ****                         pxTCB->uxBasePriority = uxNewPriority;
1638:..\FreeRTOS\Source/tasks.c ****                     }
1639:..\FreeRTOS\Source/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1640:..\FreeRTOS\Source/tasks.c ****                     {
1641:..\FreeRTOS\Source/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
 1308              		.loc 1 1641 0
 1309 007e 3B69     		ldr	r3, [r7, #16]
 1310 0080 3A68     		ldr	r2, [r7]
 1311 0082 DA62     		str	r2, [r3, #44]
1642:..\FreeRTOS\Source/tasks.c ****                     }
1643:..\FreeRTOS\Source/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1644:..\FreeRTOS\Source/tasks.c **** 
1645:..\FreeRTOS\Source/tasks.c ****                 /* Only reset the event list item value if the value is not
1646:..\FreeRTOS\Source/tasks.c ****                  * being used for anything else. */
1647:..\FreeRTOS\Source/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
 1312              		.loc 1 1647 0
 1313 0084 3B69     		ldr	r3, [r7, #16]
 1314 0086 9B69     		ldr	r3, [r3, #24]
 1315 0088 002B     		cmp	r3, #0
 1316 008a 04DB     		blt	.L100
1648:..\FreeRTOS\Source/tasks.c ****                 {
1649:..\FreeRTOS\Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
 1317              		.loc 1 1649 0
 1318 008c 3B68     		ldr	r3, [r7]
 1319 008e 0522     		movs	r2, #5
 1320 0090 D21A     		subs	r2, r2, r3
 1321 0092 3B69     		ldr	r3, [r7, #16]
 1322 0094 9A61     		str	r2, [r3, #24]
 1323              	.L100:
1650:..\FreeRTOS\Source/tasks.c ****                 }
1651:..\FreeRTOS\Source/tasks.c ****                 else
1652:..\FreeRTOS\Source/tasks.c ****                 {
1653:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1654:..\FreeRTOS\Source/tasks.c ****                 }
1655:..\FreeRTOS\Source/tasks.c **** 
1656:..\FreeRTOS\Source/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1657:..\FreeRTOS\Source/tasks.c ****                  * nothing more than change its priority variable. However, if
1658:..\FreeRTOS\Source/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1659:..\FreeRTOS\Source/tasks.c ****                  * in the list appropriate to its new priority. */
1660:..\FreeRTOS\Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
 1324              		.loc 1 1660 0
 1325 0096 3B69     		ldr	r3, [r7, #16]
 1326 0098 5969     		ldr	r1, [r3, #20]
 1327 009a BA68     		ldr	r2, [r7, #8]
 1328 009c 1300     		movs	r3, r2
 1329 009e 9B00     		lsls	r3, r3, #2
 1330 00a0 9B18     		adds	r3, r3, r2
 1331 00a2 9B00     		lsls	r3, r3, #2
 1332 00a4 174A     		ldr	r2, .L103+8
 1333 00a6 9B18     		adds	r3, r3, r2
 1334 00a8 9942     		cmp	r1, r3
 1335 00aa 1CD1     		bne	.L101
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 54


1661:..\FreeRTOS\Source/tasks.c ****                 {
1662:..\FreeRTOS\Source/tasks.c ****                     /* The task is currently in its ready list - remove before
1663:..\FreeRTOS\Source/tasks.c ****                      * adding it to it's new ready list.  As we are in a critical
1664:..\FreeRTOS\Source/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1665:..\FreeRTOS\Source/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1336              		.loc 1 1665 0
 1337 00ac 3B69     		ldr	r3, [r7, #16]
 1338 00ae 0433     		adds	r3, r3, #4
 1339 00b0 1800     		movs	r0, r3
 1340 00b2 FFF7FEFF 		bl	uxListRemove
1666:..\FreeRTOS\Source/tasks.c ****                     {
1667:..\FreeRTOS\Source/tasks.c ****                         /* It is known that the task is in its ready list so
1668:..\FreeRTOS\Source/tasks.c ****                          * there is no need to check again and the port level
1669:..\FreeRTOS\Source/tasks.c ****                          * reset macro can be called directly. */
1670:..\FreeRTOS\Source/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1671:..\FreeRTOS\Source/tasks.c ****                     }
1672:..\FreeRTOS\Source/tasks.c ****                     else
1673:..\FreeRTOS\Source/tasks.c ****                     {
1674:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1675:..\FreeRTOS\Source/tasks.c ****                     }
1676:..\FreeRTOS\Source/tasks.c **** 
1677:..\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1341              		.loc 1 1677 0
 1342 00b6 3B69     		ldr	r3, [r7, #16]
 1343 00b8 DA6A     		ldr	r2, [r3, #44]
 1344 00ba 134B     		ldr	r3, .L103+12
 1345 00bc 1B68     		ldr	r3, [r3]
 1346 00be 9A42     		cmp	r2, r3
 1347 00c0 03D9     		bls	.L102
 1348              		.loc 1 1677 0 is_stmt 0 discriminator 1
 1349 00c2 3B69     		ldr	r3, [r7, #16]
 1350 00c4 DA6A     		ldr	r2, [r3, #44]
 1351 00c6 104B     		ldr	r3, .L103+12
 1352 00c8 1A60     		str	r2, [r3]
 1353              	.L102:
 1354              		.loc 1 1677 0 discriminator 3
 1355 00ca 3B69     		ldr	r3, [r7, #16]
 1356 00cc DA6A     		ldr	r2, [r3, #44]
 1357 00ce 1300     		movs	r3, r2
 1358 00d0 9B00     		lsls	r3, r3, #2
 1359 00d2 9B18     		adds	r3, r3, r2
 1360 00d4 9B00     		lsls	r3, r3, #2
 1361 00d6 0B4A     		ldr	r2, .L103+8
 1362 00d8 9A18     		adds	r2, r3, r2
 1363 00da 3B69     		ldr	r3, [r7, #16]
 1364 00dc 0433     		adds	r3, r3, #4
 1365 00de 1900     		movs	r1, r3
 1366 00e0 1000     		movs	r0, r2
 1367 00e2 FFF7FEFF 		bl	vListInsertEnd
 1368              	.L101:
1678:..\FreeRTOS\Source/tasks.c ****                 }
1679:..\FreeRTOS\Source/tasks.c ****                 else
1680:..\FreeRTOS\Source/tasks.c ****                 {
1681:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1682:..\FreeRTOS\Source/tasks.c ****                 }
1683:..\FreeRTOS\Source/tasks.c **** 
1684:..\FreeRTOS\Source/tasks.c ****                 if( xYieldRequired != pdFALSE )
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 55


 1369              		.loc 1 1684 0 is_stmt 1
 1370 00e6 7B69     		ldr	r3, [r7, #20]
 1371 00e8 002B     		cmp	r3, #0
 1372 00ea 01D0     		beq	.L97
1685:..\FreeRTOS\Source/tasks.c ****                 {
1686:..\FreeRTOS\Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 1373              		.loc 1 1686 0
 1374 00ec FFF7FEFF 		bl	vPortYield
 1375              	.L97:
1687:..\FreeRTOS\Source/tasks.c ****                 }
1688:..\FreeRTOS\Source/tasks.c ****                 else
1689:..\FreeRTOS\Source/tasks.c ****                 {
1690:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1691:..\FreeRTOS\Source/tasks.c ****                 }
1692:..\FreeRTOS\Source/tasks.c **** 
1693:..\FreeRTOS\Source/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1694:..\FreeRTOS\Source/tasks.c ****                  * optimised task selection is not being used. */
1695:..\FreeRTOS\Source/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1696:..\FreeRTOS\Source/tasks.c ****             }
1697:..\FreeRTOS\Source/tasks.c ****         }
1698:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 1376              		.loc 1 1698 0
 1377 00f0 FFF7FEFF 		bl	vPortExitCritical
1699:..\FreeRTOS\Source/tasks.c ****     }
 1378              		.loc 1 1699 0
 1379 00f4 C046     		nop
 1380 00f6 BD46     		mov	sp, r7
 1381 00f8 06B0     		add	sp, sp, #24
 1382              		@ sp needed
 1383 00fa 80BD     		pop	{r7, pc}
 1384              	.L104:
 1385              		.align	2
 1386              	.L103:
 1387 00fc 00000000 		.word	x
 1388 0100 00000000 		.word	pxCurrentTCB
 1389 0104 04000000 		.word	pxReadyTasksLists
 1390 0108 E0000000 		.word	uxTopReadyPriority
 1391              		.cfi_endproc
 1392              	.LFE9:
 1393              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1394              		.section	.text.vTaskSuspend,"ax",%progbits
 1395              		.align	2
 1396              		.global	vTaskSuspend
 1397              		.code	16
 1398              		.thumb_func
 1399              		.type	vTaskSuspend, %function
 1400              	vTaskSuspend:
 1401              	.LFB10:
1700:..\FreeRTOS\Source/tasks.c **** 
1701:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1702:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1703:..\FreeRTOS\Source/tasks.c **** 
1704:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1705:..\FreeRTOS\Source/tasks.c **** 
1706:..\FreeRTOS\Source/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1707:..\FreeRTOS\Source/tasks.c ****     {
 1402              		.loc 1 1707 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 56


 1403              		.cfi_startproc
 1404              		@ args = 0, pretend = 0, frame = 16
 1405              		@ frame_needed = 1, uses_anonymous_args = 0
 1406 0000 80B5     		push	{r7, lr}
 1407              		.cfi_def_cfa_offset 8
 1408              		.cfi_offset 7, -8
 1409              		.cfi_offset 14, -4
 1410 0002 84B0     		sub	sp, sp, #16
 1411              		.cfi_def_cfa_offset 24
 1412 0004 00AF     		add	r7, sp, #0
 1413              		.cfi_def_cfa_register 7
 1414 0006 7860     		str	r0, [r7, #4]
1708:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
1709:..\FreeRTOS\Source/tasks.c **** 
1710:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 1415              		.loc 1 1710 0
 1416 0008 FFF7FEFF 		bl	vPortEnterCritical
1711:..\FreeRTOS\Source/tasks.c ****         {
1712:..\FreeRTOS\Source/tasks.c ****             /* If null is passed in here then it is the running task that is
1713:..\FreeRTOS\Source/tasks.c ****              * being suspended. */
1714:..\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1417              		.loc 1 1714 0
 1418 000c 7B68     		ldr	r3, [r7, #4]
 1419 000e 002B     		cmp	r3, #0
 1420 0010 02D1     		bne	.L106
 1421              		.loc 1 1714 0 is_stmt 0 discriminator 1
 1422 0012 314B     		ldr	r3, .L120
 1423 0014 1B68     		ldr	r3, [r3]
 1424 0016 00E0     		b	.L107
 1425              	.L106:
 1426              		.loc 1 1714 0 discriminator 2
 1427 0018 7B68     		ldr	r3, [r7, #4]
 1428              	.L107:
 1429              		.loc 1 1714 0 discriminator 4
 1430 001a BB60     		str	r3, [r7, #8]
1715:..\FreeRTOS\Source/tasks.c **** 
1716:..\FreeRTOS\Source/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1717:..\FreeRTOS\Source/tasks.c **** 
1718:..\FreeRTOS\Source/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1719:..\FreeRTOS\Source/tasks.c ****              * suspended list. */
1720:..\FreeRTOS\Source/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1431              		.loc 1 1720 0 is_stmt 1 discriminator 4
 1432 001c BB68     		ldr	r3, [r7, #8]
 1433 001e 0433     		adds	r3, r3, #4
 1434 0020 1800     		movs	r0, r3
 1435 0022 FFF7FEFF 		bl	uxListRemove
1721:..\FreeRTOS\Source/tasks.c ****             {
1722:..\FreeRTOS\Source/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1723:..\FreeRTOS\Source/tasks.c ****             }
1724:..\FreeRTOS\Source/tasks.c ****             else
1725:..\FreeRTOS\Source/tasks.c ****             {
1726:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1727:..\FreeRTOS\Source/tasks.c ****             }
1728:..\FreeRTOS\Source/tasks.c **** 
1729:..\FreeRTOS\Source/tasks.c ****             /* Is the task waiting on an event also? */
1730:..\FreeRTOS\Source/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1436              		.loc 1 1730 0 discriminator 4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 57


 1437 0026 BB68     		ldr	r3, [r7, #8]
 1438 0028 9B6A     		ldr	r3, [r3, #40]
 1439 002a 002B     		cmp	r3, #0
 1440 002c 04D0     		beq	.L108
1731:..\FreeRTOS\Source/tasks.c ****             {
1732:..\FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1441              		.loc 1 1732 0
 1442 002e BB68     		ldr	r3, [r7, #8]
 1443 0030 1833     		adds	r3, r3, #24
 1444 0032 1800     		movs	r0, r3
 1445 0034 FFF7FEFF 		bl	uxListRemove
 1446              	.L108:
1733:..\FreeRTOS\Source/tasks.c ****             }
1734:..\FreeRTOS\Source/tasks.c ****             else
1735:..\FreeRTOS\Source/tasks.c ****             {
1736:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1737:..\FreeRTOS\Source/tasks.c ****             }
1738:..\FreeRTOS\Source/tasks.c **** 
1739:..\FreeRTOS\Source/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1447              		.loc 1 1739 0
 1448 0038 BB68     		ldr	r3, [r7, #8]
 1449 003a 1A1D     		adds	r2, r3, #4
 1450 003c 274B     		ldr	r3, .L120+4
 1451 003e 1100     		movs	r1, r2
 1452 0040 1800     		movs	r0, r3
 1453 0042 FFF7FEFF 		bl	vListInsertEnd
 1454              	.LBB5:
1740:..\FreeRTOS\Source/tasks.c **** 
1741:..\FreeRTOS\Source/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1742:..\FreeRTOS\Source/tasks.c ****                 {
1743:..\FreeRTOS\Source/tasks.c ****                     BaseType_t x;
1744:..\FreeRTOS\Source/tasks.c **** 
1745:..\FreeRTOS\Source/tasks.c ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 1455              		.loc 1 1745 0
 1456 0046 0023     		movs	r3, #0
 1457 0048 FB60     		str	r3, [r7, #12]
 1458 004a 12E0     		b	.L109
 1459              	.L111:
1746:..\FreeRTOS\Source/tasks.c ****                     {
1747:..\FreeRTOS\Source/tasks.c ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 1460              		.loc 1 1747 0
 1461 004c BA68     		ldr	r2, [r7, #8]
 1462 004e 6421     		movs	r1, #100
 1463 0050 FB68     		ldr	r3, [r7, #12]
 1464 0052 D318     		adds	r3, r2, r3
 1465 0054 5B18     		adds	r3, r3, r1
 1466 0056 1B78     		ldrb	r3, [r3]
 1467 0058 DBB2     		uxtb	r3, r3
 1468 005a 012B     		cmp	r3, #1
 1469 005c 06D1     		bne	.L110
1748:..\FreeRTOS\Source/tasks.c ****                         {
1749:..\FreeRTOS\Source/tasks.c ****                             /* The task was blocked to wait for a notification, but is
1750:..\FreeRTOS\Source/tasks.c ****                              * now suspended, so no notification was received. */
1751:..\FreeRTOS\Source/tasks.c ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 1470              		.loc 1 1751 0
 1471 005e BA68     		ldr	r2, [r7, #8]
 1472 0060 6421     		movs	r1, #100
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 58


 1473 0062 FB68     		ldr	r3, [r7, #12]
 1474 0064 D318     		adds	r3, r2, r3
 1475 0066 5B18     		adds	r3, r3, r1
 1476 0068 0022     		movs	r2, #0
 1477 006a 1A70     		strb	r2, [r3]
 1478              	.L110:
1745:..\FreeRTOS\Source/tasks.c ****                     {
 1479              		.loc 1 1745 0 discriminator 2
 1480 006c FB68     		ldr	r3, [r7, #12]
 1481 006e 0133     		adds	r3, r3, #1
 1482 0070 FB60     		str	r3, [r7, #12]
 1483              	.L109:
1745:..\FreeRTOS\Source/tasks.c ****                     {
 1484              		.loc 1 1745 0 is_stmt 0 discriminator 1
 1485 0072 FB68     		ldr	r3, [r7, #12]
 1486 0074 022B     		cmp	r3, #2
 1487 0076 E9DD     		ble	.L111
 1488              	.LBE5:
1752:..\FreeRTOS\Source/tasks.c ****                         }
1753:..\FreeRTOS\Source/tasks.c ****                     }
1754:..\FreeRTOS\Source/tasks.c ****                 }
1755:..\FreeRTOS\Source/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1756:..\FreeRTOS\Source/tasks.c ****         }
1757:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 1489              		.loc 1 1757 0 is_stmt 1
 1490 0078 FFF7FEFF 		bl	vPortExitCritical
1758:..\FreeRTOS\Source/tasks.c **** 
1759:..\FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 1491              		.loc 1 1759 0
 1492 007c 184B     		ldr	r3, .L120+8
 1493 007e 1B68     		ldr	r3, [r3]
 1494 0080 002B     		cmp	r3, #0
 1495 0082 05D0     		beq	.L112
1760:..\FreeRTOS\Source/tasks.c ****         {
1761:..\FreeRTOS\Source/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1762:..\FreeRTOS\Source/tasks.c ****              * task that is now in the Suspended state. */
1763:..\FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
 1496              		.loc 1 1763 0
 1497 0084 FFF7FEFF 		bl	vPortEnterCritical
1764:..\FreeRTOS\Source/tasks.c ****             {
1765:..\FreeRTOS\Source/tasks.c ****                 prvResetNextTaskUnblockTime();
 1498              		.loc 1 1765 0
 1499 0088 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1766:..\FreeRTOS\Source/tasks.c ****             }
1767:..\FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
 1500              		.loc 1 1767 0
 1501 008c FFF7FEFF 		bl	vPortExitCritical
 1502              	.L112:
1768:..\FreeRTOS\Source/tasks.c ****         }
1769:..\FreeRTOS\Source/tasks.c ****         else
1770:..\FreeRTOS\Source/tasks.c ****         {
1771:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1772:..\FreeRTOS\Source/tasks.c ****         }
1773:..\FreeRTOS\Source/tasks.c **** 
1774:..\FreeRTOS\Source/tasks.c ****         if( pxTCB == pxCurrentTCB )
 1503              		.loc 1 1774 0
 1504 0090 114B     		ldr	r3, .L120
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 59


 1505 0092 1B68     		ldr	r3, [r3]
 1506 0094 BA68     		ldr	r2, [r7, #8]
 1507 0096 9A42     		cmp	r2, r3
 1508 0098 1AD1     		bne	.L119
1775:..\FreeRTOS\Source/tasks.c ****         {
1776:..\FreeRTOS\Source/tasks.c ****             if( xSchedulerRunning != pdFALSE )
 1509              		.loc 1 1776 0
 1510 009a 114B     		ldr	r3, .L120+8
 1511 009c 1B68     		ldr	r3, [r3]
 1512 009e 002B     		cmp	r3, #0
 1513 00a0 0AD0     		beq	.L114
1777:..\FreeRTOS\Source/tasks.c ****             {
1778:..\FreeRTOS\Source/tasks.c ****                 /* The current task has just been suspended. */
1779:..\FreeRTOS\Source/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 1514              		.loc 1 1779 0
 1515 00a2 104B     		ldr	r3, .L120+12
 1516 00a4 1B88     		ldrh	r3, [r3]
 1517 00a6 002B     		cmp	r3, #0
 1518 00a8 01D1     		bne	.L115
 1519              		.loc 1 1779 0 is_stmt 0 discriminator 1
 1520              		.syntax divided
 1521              	@ 1779 "..\FreeRTOS\Source\tasks.c" 1
 1522 00aa 72B6     		 cpsid i 
 1523              	@ 0 "" 2
 1524              		.thumb
 1525              		.syntax unified
 1526              	.L116:
 1527 00ac FEE7     		b	.L116
 1528              	.L115:
 1529              		.loc 1 1779 0 discriminator 2
 1530 00ae 0E4B     		ldr	r3, .L120+16
 1531 00b0 1B68     		ldr	r3, [r3]
1780:..\FreeRTOS\Source/tasks.c ****                 portYIELD_WITHIN_API();
 1532              		.loc 1 1780 0 is_stmt 1 discriminator 2
 1533 00b2 FFF7FEFF 		bl	vPortYield
1781:..\FreeRTOS\Source/tasks.c ****             }
1782:..\FreeRTOS\Source/tasks.c ****             else
1783:..\FreeRTOS\Source/tasks.c ****             {
1784:..\FreeRTOS\Source/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1785:..\FreeRTOS\Source/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1786:..\FreeRTOS\Source/tasks.c ****                  * must be adjusted to point to a different task. */
1787:..\FreeRTOS\Source/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1788:..\FreeRTOS\Source/tasks.c ****                 {
1789:..\FreeRTOS\Source/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1790:..\FreeRTOS\Source/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1791:..\FreeRTOS\Source/tasks.c ****                      * be set to point to it no matter what its relative priority
1792:..\FreeRTOS\Source/tasks.c ****                      * is. */
1793:..\FreeRTOS\Source/tasks.c ****                     pxCurrentTCB = NULL;
1794:..\FreeRTOS\Source/tasks.c ****                 }
1795:..\FreeRTOS\Source/tasks.c ****                 else
1796:..\FreeRTOS\Source/tasks.c ****                 {
1797:..\FreeRTOS\Source/tasks.c ****                     vTaskSwitchContext();
1798:..\FreeRTOS\Source/tasks.c ****                 }
1799:..\FreeRTOS\Source/tasks.c ****             }
1800:..\FreeRTOS\Source/tasks.c ****         }
1801:..\FreeRTOS\Source/tasks.c ****         else
1802:..\FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 60


1803:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1804:..\FreeRTOS\Source/tasks.c ****         }
1805:..\FreeRTOS\Source/tasks.c ****     }
 1534              		.loc 1 1805 0 discriminator 2
 1535 00b6 0BE0     		b	.L119
 1536              	.L114:
1787:..\FreeRTOS\Source/tasks.c ****                 {
 1537              		.loc 1 1787 0
 1538 00b8 084B     		ldr	r3, .L120+4
 1539 00ba 1A68     		ldr	r2, [r3]
 1540 00bc 0B4B     		ldr	r3, .L120+20
 1541 00be 1B68     		ldr	r3, [r3]
 1542 00c0 9A42     		cmp	r2, r3
 1543 00c2 03D1     		bne	.L118
1793:..\FreeRTOS\Source/tasks.c ****                 }
 1544              		.loc 1 1793 0
 1545 00c4 044B     		ldr	r3, .L120
 1546 00c6 0022     		movs	r2, #0
 1547 00c8 1A60     		str	r2, [r3]
 1548              		.loc 1 1805 0
 1549 00ca 01E0     		b	.L119
 1550              	.L118:
1797:..\FreeRTOS\Source/tasks.c ****                 }
 1551              		.loc 1 1797 0
 1552 00cc FFF7FEFF 		bl	vTaskSwitchContext
 1553              	.L119:
 1554              		.loc 1 1805 0
 1555 00d0 C046     		nop
 1556 00d2 BD46     		mov	sp, r7
 1557 00d4 04B0     		add	sp, sp, #16
 1558              		@ sp needed
 1559 00d6 80BD     		pop	{r7, pc}
 1560              	.L121:
 1561              		.align	2
 1562              	.L120:
 1563 00d8 00000000 		.word	pxCurrentTCB
 1564 00dc C4000000 		.word	xSuspendedTaskList
 1565 00e0 E4000000 		.word	xSchedulerRunning
 1566 00e4 00000000 		.word	x
 1567 00e8 00010000 		.word	uxSchedulerSuspended
 1568 00ec D8000000 		.word	uxCurrentNumberOfTasks
 1569              		.cfi_endproc
 1570              	.LFE10:
 1571              		.size	vTaskSuspend, .-vTaskSuspend
 1572              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1573              		.align	2
 1574              		.code	16
 1575              		.thumb_func
 1576              		.type	prvTaskIsTaskSuspended, %function
 1577              	prvTaskIsTaskSuspended:
 1578              	.LFB11:
1806:..\FreeRTOS\Source/tasks.c **** 
1807:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1808:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1809:..\FreeRTOS\Source/tasks.c **** 
1810:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1811:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 61


1812:..\FreeRTOS\Source/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1813:..\FreeRTOS\Source/tasks.c ****     {
 1579              		.loc 1 1813 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 16
 1582              		@ frame_needed = 1, uses_anonymous_args = 0
 1583 0000 80B5     		push	{r7, lr}
 1584              		.cfi_def_cfa_offset 8
 1585              		.cfi_offset 7, -8
 1586              		.cfi_offset 14, -4
 1587 0002 84B0     		sub	sp, sp, #16
 1588              		.cfi_def_cfa_offset 24
 1589 0004 00AF     		add	r7, sp, #0
 1590              		.cfi_def_cfa_register 7
 1591 0006 7860     		str	r0, [r7, #4]
1814:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
 1592              		.loc 1 1814 0
 1593 0008 0023     		movs	r3, #0
 1594 000a FB60     		str	r3, [r7, #12]
1815:..\FreeRTOS\Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1595              		.loc 1 1815 0
 1596 000c 7B68     		ldr	r3, [r7, #4]
 1597 000e BB60     		str	r3, [r7, #8]
1816:..\FreeRTOS\Source/tasks.c **** 
1817:..\FreeRTOS\Source/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1818:..\FreeRTOS\Source/tasks.c ****          * section. */
1819:..\FreeRTOS\Source/tasks.c **** 
1820:..\FreeRTOS\Source/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1821:..\FreeRTOS\Source/tasks.c ****         configASSERT( xTask );
 1598              		.loc 1 1821 0
 1599 0010 0D4B     		ldr	r3, .L127
 1600 0012 1B88     		ldrh	r3, [r3]
 1601 0014 002B     		cmp	r3, #0
 1602 0016 01D1     		bne	.L123
 1603              		.loc 1 1821 0 is_stmt 0 discriminator 1
 1604              		.syntax divided
 1605              	@ 1821 "..\FreeRTOS\Source\tasks.c" 1
 1606 0018 72B6     		 cpsid i 
 1607              	@ 0 "" 2
 1608              		.thumb
 1609              		.syntax unified
 1610              	.L124:
 1611 001a FEE7     		b	.L124
 1612              	.L123:
1822:..\FreeRTOS\Source/tasks.c **** 
1823:..\FreeRTOS\Source/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1824:..\FreeRTOS\Source/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1613              		.loc 1 1824 0 is_stmt 1
 1614 001c BB68     		ldr	r3, [r7, #8]
 1615 001e 5A69     		ldr	r2, [r3, #20]
 1616 0020 0A4B     		ldr	r3, .L127+4
 1617 0022 9A42     		cmp	r2, r3
 1618 0024 0AD1     		bne	.L125
1825:..\FreeRTOS\Source/tasks.c ****         {
1826:..\FreeRTOS\Source/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1827:..\FreeRTOS\Source/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
 1619              		.loc 1 1827 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 62


 1620 0026 BB68     		ldr	r3, [r7, #8]
 1621 0028 9A6A     		ldr	r2, [r3, #40]
 1622 002a 094B     		ldr	r3, .L127+8
 1623 002c 9A42     		cmp	r2, r3
 1624 002e 05D0     		beq	.L125
1828:..\FreeRTOS\Source/tasks.c ****             {
1829:..\FreeRTOS\Source/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1830:..\FreeRTOS\Source/tasks.c ****                  * state, or because is is blocked with no timeout? */
1831:..\FreeRTOS\Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
 1625              		.loc 1 1831 0
 1626 0030 BB68     		ldr	r3, [r7, #8]
 1627 0032 9B6A     		ldr	r3, [r3, #40]
 1628 0034 002B     		cmp	r3, #0
 1629 0036 01D1     		bne	.L125
1832:..\FreeRTOS\Source/tasks.c ****                 {
1833:..\FreeRTOS\Source/tasks.c ****                     xReturn = pdTRUE;
 1630              		.loc 1 1833 0
 1631 0038 0123     		movs	r3, #1
 1632 003a FB60     		str	r3, [r7, #12]
 1633              	.L125:
1834:..\FreeRTOS\Source/tasks.c ****                 }
1835:..\FreeRTOS\Source/tasks.c ****                 else
1836:..\FreeRTOS\Source/tasks.c ****                 {
1837:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1838:..\FreeRTOS\Source/tasks.c ****                 }
1839:..\FreeRTOS\Source/tasks.c ****             }
1840:..\FreeRTOS\Source/tasks.c ****             else
1841:..\FreeRTOS\Source/tasks.c ****             {
1842:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1843:..\FreeRTOS\Source/tasks.c ****             }
1844:..\FreeRTOS\Source/tasks.c ****         }
1845:..\FreeRTOS\Source/tasks.c ****         else
1846:..\FreeRTOS\Source/tasks.c ****         {
1847:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1848:..\FreeRTOS\Source/tasks.c ****         }
1849:..\FreeRTOS\Source/tasks.c **** 
1850:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 1634              		.loc 1 1850 0
 1635 003c FB68     		ldr	r3, [r7, #12]
1851:..\FreeRTOS\Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1636              		.loc 1 1851 0
 1637 003e 1800     		movs	r0, r3
 1638 0040 BD46     		mov	sp, r7
 1639 0042 04B0     		add	sp, sp, #16
 1640              		@ sp needed
 1641 0044 80BD     		pop	{r7, pc}
 1642              	.L128:
 1643 0046 C046     		.align	2
 1644              	.L127:
 1645 0048 00000000 		.word	x
 1646 004c C4000000 		.word	xSuspendedTaskList
 1647 0050 98000000 		.word	xPendingReadyList
 1648              		.cfi_endproc
 1649              	.LFE11:
 1650              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1651              		.section	.text.vTaskResume,"ax",%progbits
 1652              		.align	2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 63


 1653              		.global	vTaskResume
 1654              		.code	16
 1655              		.thumb_func
 1656              		.type	vTaskResume, %function
 1657              	vTaskResume:
 1658              	.LFB12:
1852:..\FreeRTOS\Source/tasks.c **** 
1853:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1854:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1855:..\FreeRTOS\Source/tasks.c **** 
1856:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1857:..\FreeRTOS\Source/tasks.c **** 
1858:..\FreeRTOS\Source/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1859:..\FreeRTOS\Source/tasks.c ****     {
 1659              		.loc 1 1859 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 16
 1662              		@ frame_needed = 1, uses_anonymous_args = 0
 1663 0000 80B5     		push	{r7, lr}
 1664              		.cfi_def_cfa_offset 8
 1665              		.cfi_offset 7, -8
 1666              		.cfi_offset 14, -4
 1667 0002 84B0     		sub	sp, sp, #16
 1668              		.cfi_def_cfa_offset 24
 1669 0004 00AF     		add	r7, sp, #0
 1670              		.cfi_def_cfa_register 7
 1671 0006 7860     		str	r0, [r7, #4]
1860:..\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1672              		.loc 1 1860 0
 1673 0008 7B68     		ldr	r3, [r7, #4]
 1674 000a FB60     		str	r3, [r7, #12]
1861:..\FreeRTOS\Source/tasks.c **** 
1862:..\FreeRTOS\Source/tasks.c ****         /* It does not make sense to resume the calling task. */
1863:..\FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToResume );
 1675              		.loc 1 1863 0
 1676 000c 204B     		ldr	r3, .L136
 1677 000e 1B88     		ldrh	r3, [r3]
 1678 0010 002B     		cmp	r3, #0
 1679 0012 01D1     		bne	.L130
 1680              		.loc 1 1863 0 is_stmt 0 discriminator 1
 1681              		.syntax divided
 1682              	@ 1863 "..\FreeRTOS\Source\tasks.c" 1
 1683 0014 72B6     		 cpsid i 
 1684              	@ 0 "" 2
 1685              		.thumb
 1686              		.syntax unified
 1687              	.L131:
 1688 0016 FEE7     		b	.L131
 1689              	.L130:
1864:..\FreeRTOS\Source/tasks.c **** 
1865:..\FreeRTOS\Source/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1866:..\FreeRTOS\Source/tasks.c ****          * currently executing task. */
1867:..\FreeRTOS\Source/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1690              		.loc 1 1867 0 is_stmt 1
 1691 0018 1E4B     		ldr	r3, .L136+4
 1692 001a 1B68     		ldr	r3, [r3]
 1693 001c FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 64


 1694 001e 9A42     		cmp	r2, r3
 1695 0020 32D0     		beq	.L135
 1696              		.loc 1 1867 0 is_stmt 0 discriminator 1
 1697 0022 FB68     		ldr	r3, [r7, #12]
 1698 0024 002B     		cmp	r3, #0
 1699 0026 2FD0     		beq	.L135
1868:..\FreeRTOS\Source/tasks.c ****         {
1869:..\FreeRTOS\Source/tasks.c ****             taskENTER_CRITICAL();
 1700              		.loc 1 1869 0 is_stmt 1
 1701 0028 FFF7FEFF 		bl	vPortEnterCritical
1870:..\FreeRTOS\Source/tasks.c ****             {
1871:..\FreeRTOS\Source/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1702              		.loc 1 1871 0
 1703 002c FB68     		ldr	r3, [r7, #12]
 1704 002e 1800     		movs	r0, r3
 1705 0030 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1706 0034 031E     		subs	r3, r0, #0
 1707 0036 25D0     		beq	.L133
1872:..\FreeRTOS\Source/tasks.c ****                 {
1873:..\FreeRTOS\Source/tasks.c ****                     traceTASK_RESUME( pxTCB );
1874:..\FreeRTOS\Source/tasks.c **** 
1875:..\FreeRTOS\Source/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1876:..\FreeRTOS\Source/tasks.c ****                      * suspended because this is inside a critical section. */
1877:..\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1708              		.loc 1 1877 0
 1709 0038 FB68     		ldr	r3, [r7, #12]
 1710 003a 0433     		adds	r3, r3, #4
 1711 003c 1800     		movs	r0, r3
 1712 003e FFF7FEFF 		bl	uxListRemove
1878:..\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1713              		.loc 1 1878 0
 1714 0042 FB68     		ldr	r3, [r7, #12]
 1715 0044 DA6A     		ldr	r2, [r3, #44]
 1716 0046 144B     		ldr	r3, .L136+8
 1717 0048 1B68     		ldr	r3, [r3]
 1718 004a 9A42     		cmp	r2, r3
 1719 004c 03D9     		bls	.L134
 1720              		.loc 1 1878 0 is_stmt 0 discriminator 1
 1721 004e FB68     		ldr	r3, [r7, #12]
 1722 0050 DA6A     		ldr	r2, [r3, #44]
 1723 0052 114B     		ldr	r3, .L136+8
 1724 0054 1A60     		str	r2, [r3]
 1725              	.L134:
 1726              		.loc 1 1878 0 discriminator 3
 1727 0056 FB68     		ldr	r3, [r7, #12]
 1728 0058 DA6A     		ldr	r2, [r3, #44]
 1729 005a 1300     		movs	r3, r2
 1730 005c 9B00     		lsls	r3, r3, #2
 1731 005e 9B18     		adds	r3, r3, r2
 1732 0060 9B00     		lsls	r3, r3, #2
 1733 0062 0E4A     		ldr	r2, .L136+12
 1734 0064 9A18     		adds	r2, r3, r2
 1735 0066 FB68     		ldr	r3, [r7, #12]
 1736 0068 0433     		adds	r3, r3, #4
 1737 006a 1900     		movs	r1, r3
 1738 006c 1000     		movs	r0, r2
 1739 006e FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 65


1879:..\FreeRTOS\Source/tasks.c **** 
1880:..\FreeRTOS\Source/tasks.c ****                     /* A higher priority task may have just been resumed. */
1881:..\FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1740              		.loc 1 1881 0 is_stmt 1 discriminator 3
 1741 0072 FB68     		ldr	r3, [r7, #12]
 1742 0074 DA6A     		ldr	r2, [r3, #44]
 1743 0076 074B     		ldr	r3, .L136+4
 1744 0078 1B68     		ldr	r3, [r3]
 1745 007a DB6A     		ldr	r3, [r3, #44]
 1746 007c 9A42     		cmp	r2, r3
 1747 007e 01D3     		bcc	.L133
1882:..\FreeRTOS\Source/tasks.c ****                     {
1883:..\FreeRTOS\Source/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1884:..\FreeRTOS\Source/tasks.c ****                          * but will leave the lists in the correct state for the
1885:..\FreeRTOS\Source/tasks.c ****                          * next yield. */
1886:..\FreeRTOS\Source/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
 1748              		.loc 1 1886 0
 1749 0080 FFF7FEFF 		bl	vPortYield
 1750              	.L133:
1887:..\FreeRTOS\Source/tasks.c ****                     }
1888:..\FreeRTOS\Source/tasks.c ****                     else
1889:..\FreeRTOS\Source/tasks.c ****                     {
1890:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1891:..\FreeRTOS\Source/tasks.c ****                     }
1892:..\FreeRTOS\Source/tasks.c ****                 }
1893:..\FreeRTOS\Source/tasks.c ****                 else
1894:..\FreeRTOS\Source/tasks.c ****                 {
1895:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1896:..\FreeRTOS\Source/tasks.c ****                 }
1897:..\FreeRTOS\Source/tasks.c ****             }
1898:..\FreeRTOS\Source/tasks.c ****             taskEXIT_CRITICAL();
 1751              		.loc 1 1898 0
 1752 0084 FFF7FEFF 		bl	vPortExitCritical
 1753              	.L135:
1899:..\FreeRTOS\Source/tasks.c ****         }
1900:..\FreeRTOS\Source/tasks.c ****         else
1901:..\FreeRTOS\Source/tasks.c ****         {
1902:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1903:..\FreeRTOS\Source/tasks.c ****         }
1904:..\FreeRTOS\Source/tasks.c ****     }
 1754              		.loc 1 1904 0
 1755 0088 C046     		nop
 1756 008a BD46     		mov	sp, r7
 1757 008c 04B0     		add	sp, sp, #16
 1758              		@ sp needed
 1759 008e 80BD     		pop	{r7, pc}
 1760              	.L137:
 1761              		.align	2
 1762              	.L136:
 1763 0090 00000000 		.word	x
 1764 0094 00000000 		.word	pxCurrentTCB
 1765 0098 E0000000 		.word	uxTopReadyPriority
 1766 009c 04000000 		.word	pxReadyTasksLists
 1767              		.cfi_endproc
 1768              	.LFE12:
 1769              		.size	vTaskResume, .-vTaskResume
 1770              		.section	.text.xTaskResumeFromISR,"ax",%progbits
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 66


 1771              		.align	2
 1772              		.global	xTaskResumeFromISR
 1773              		.code	16
 1774              		.thumb_func
 1775              		.type	xTaskResumeFromISR, %function
 1776              	xTaskResumeFromISR:
 1777              	.LFB13:
1905:..\FreeRTOS\Source/tasks.c **** 
1906:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1907:..\FreeRTOS\Source/tasks.c **** 
1908:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1909:..\FreeRTOS\Source/tasks.c **** 
1910:..\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1911:..\FreeRTOS\Source/tasks.c **** 
1912:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1913:..\FreeRTOS\Source/tasks.c ****     {
 1778              		.loc 1 1913 0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 24
 1781              		@ frame_needed = 1, uses_anonymous_args = 0
 1782 0000 80B5     		push	{r7, lr}
 1783              		.cfi_def_cfa_offset 8
 1784              		.cfi_offset 7, -8
 1785              		.cfi_offset 14, -4
 1786 0002 86B0     		sub	sp, sp, #24
 1787              		.cfi_def_cfa_offset 32
 1788 0004 00AF     		add	r7, sp, #0
 1789              		.cfi_def_cfa_register 7
 1790 0006 7860     		str	r0, [r7, #4]
1914:..\FreeRTOS\Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1791              		.loc 1 1914 0
 1792 0008 0023     		movs	r3, #0
 1793 000a 7B61     		str	r3, [r7, #20]
1915:..\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1794              		.loc 1 1915 0
 1795 000c 7B68     		ldr	r3, [r7, #4]
 1796 000e 3B61     		str	r3, [r7, #16]
1916:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1917:..\FreeRTOS\Source/tasks.c **** 
1918:..\FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToResume );
 1797              		.loc 1 1918 0
 1798 0010 274B     		ldr	r3, .L147
 1799 0012 1B88     		ldrh	r3, [r3]
 1800 0014 002B     		cmp	r3, #0
 1801 0016 01D1     		bne	.L139
 1802              		.loc 1 1918 0 is_stmt 0 discriminator 1
 1803              		.syntax divided
 1804              	@ 1918 "..\FreeRTOS\Source\tasks.c" 1
 1805 0018 72B6     		 cpsid i 
 1806              	@ 0 "" 2
 1807              		.thumb
 1808              		.syntax unified
 1809              	.L140:
 1810 001a FEE7     		b	.L140
 1811              	.L139:
1919:..\FreeRTOS\Source/tasks.c **** 
1920:..\FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 67


1921:..\FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1922:..\FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1923:..\FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1924:..\FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1925:..\FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
1926:..\FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1927:..\FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1928:..\FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
1929:..\FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1930:..\FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1931:..\FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1932:..\FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1933:..\FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1934:..\FreeRTOS\Source/tasks.c ****          * provided on the following link:
1935:..\FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1936:..\FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1937:..\FreeRTOS\Source/tasks.c **** 
1938:..\FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1812              		.loc 1 1938 0 is_stmt 1
 1813 001c FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1814 0020 0300     		movs	r3, r0
 1815 0022 FB60     		str	r3, [r7, #12]
1939:..\FreeRTOS\Source/tasks.c ****         {
1940:..\FreeRTOS\Source/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1816              		.loc 1 1940 0
 1817 0024 3B69     		ldr	r3, [r7, #16]
 1818 0026 1800     		movs	r0, r3
 1819 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1820 002c 031E     		subs	r3, r0, #0
 1821 002e 35D0     		beq	.L141
1941:..\FreeRTOS\Source/tasks.c ****             {
1942:..\FreeRTOS\Source/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1943:..\FreeRTOS\Source/tasks.c **** 
1944:..\FreeRTOS\Source/tasks.c ****                 /* Check the ready lists can be accessed. */
1945:..\FreeRTOS\Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1822              		.loc 1 1945 0
 1823 0030 204B     		ldr	r3, .L147+4
 1824 0032 1B68     		ldr	r3, [r3]
 1825 0034 002B     		cmp	r3, #0
 1826 0036 29D1     		bne	.L142
1946:..\FreeRTOS\Source/tasks.c ****                 {
1947:..\FreeRTOS\Source/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1948:..\FreeRTOS\Source/tasks.c ****                      * suspended list to the ready list directly. */
1949:..\FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1827              		.loc 1 1949 0
 1828 0038 3B69     		ldr	r3, [r7, #16]
 1829 003a DA6A     		ldr	r2, [r3, #44]
 1830 003c 1E4B     		ldr	r3, .L147+8
 1831 003e 1B68     		ldr	r3, [r3]
 1832 0040 DB6A     		ldr	r3, [r3, #44]
 1833 0042 9A42     		cmp	r2, r3
 1834 0044 04D3     		bcc	.L143
1950:..\FreeRTOS\Source/tasks.c ****                     {
1951:..\FreeRTOS\Source/tasks.c ****                         xYieldRequired = pdTRUE;
 1835              		.loc 1 1951 0
 1836 0046 0123     		movs	r3, #1
 1837 0048 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 68


1952:..\FreeRTOS\Source/tasks.c **** 
1953:..\FreeRTOS\Source/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1954:..\FreeRTOS\Source/tasks.c ****                          * using the return value to initiate a context switch
1955:..\FreeRTOS\Source/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1956:..\FreeRTOS\Source/tasks.c ****                         xYieldPending = pdTRUE;
 1838              		.loc 1 1956 0
 1839 004a 1C4B     		ldr	r3, .L147+12
 1840 004c 0122     		movs	r2, #1
 1841 004e 1A60     		str	r2, [r3]
 1842              	.L143:
1957:..\FreeRTOS\Source/tasks.c ****                     }
1958:..\FreeRTOS\Source/tasks.c ****                     else
1959:..\FreeRTOS\Source/tasks.c ****                     {
1960:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1961:..\FreeRTOS\Source/tasks.c ****                     }
1962:..\FreeRTOS\Source/tasks.c **** 
1963:..\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1843              		.loc 1 1963 0
 1844 0050 3B69     		ldr	r3, [r7, #16]
 1845 0052 0433     		adds	r3, r3, #4
 1846 0054 1800     		movs	r0, r3
 1847 0056 FFF7FEFF 		bl	uxListRemove
1964:..\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1848              		.loc 1 1964 0
 1849 005a 3B69     		ldr	r3, [r7, #16]
 1850 005c DA6A     		ldr	r2, [r3, #44]
 1851 005e 184B     		ldr	r3, .L147+16
 1852 0060 1B68     		ldr	r3, [r3]
 1853 0062 9A42     		cmp	r2, r3
 1854 0064 03D9     		bls	.L144
 1855              		.loc 1 1964 0 is_stmt 0 discriminator 1
 1856 0066 3B69     		ldr	r3, [r7, #16]
 1857 0068 DA6A     		ldr	r2, [r3, #44]
 1858 006a 154B     		ldr	r3, .L147+16
 1859 006c 1A60     		str	r2, [r3]
 1860              	.L144:
 1861              		.loc 1 1964 0 discriminator 3
 1862 006e 3B69     		ldr	r3, [r7, #16]
 1863 0070 DA6A     		ldr	r2, [r3, #44]
 1864 0072 1300     		movs	r3, r2
 1865 0074 9B00     		lsls	r3, r3, #2
 1866 0076 9B18     		adds	r3, r3, r2
 1867 0078 9B00     		lsls	r3, r3, #2
 1868 007a 124A     		ldr	r2, .L147+20
 1869 007c 9A18     		adds	r2, r3, r2
 1870 007e 3B69     		ldr	r3, [r7, #16]
 1871 0080 0433     		adds	r3, r3, #4
 1872 0082 1900     		movs	r1, r3
 1873 0084 1000     		movs	r0, r2
 1874 0086 FFF7FEFF 		bl	vListInsertEnd
 1875 008a 07E0     		b	.L141
 1876              	.L142:
1965:..\FreeRTOS\Source/tasks.c ****                 }
1966:..\FreeRTOS\Source/tasks.c ****                 else
1967:..\FreeRTOS\Source/tasks.c ****                 {
1968:..\FreeRTOS\Source/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1969:..\FreeRTOS\Source/tasks.c ****                      * is held in the pending ready list until the scheduler is
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 69


1970:..\FreeRTOS\Source/tasks.c ****                      * unsuspended. */
1971:..\FreeRTOS\Source/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1877              		.loc 1 1971 0 is_stmt 1
 1878 008c 3B69     		ldr	r3, [r7, #16]
 1879 008e 1833     		adds	r3, r3, #24
 1880 0090 1A00     		movs	r2, r3
 1881 0092 0D4B     		ldr	r3, .L147+24
 1882 0094 1100     		movs	r1, r2
 1883 0096 1800     		movs	r0, r3
 1884 0098 FFF7FEFF 		bl	vListInsertEnd
 1885              	.L141:
1972:..\FreeRTOS\Source/tasks.c ****                 }
1973:..\FreeRTOS\Source/tasks.c ****             }
1974:..\FreeRTOS\Source/tasks.c ****             else
1975:..\FreeRTOS\Source/tasks.c ****             {
1976:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1977:..\FreeRTOS\Source/tasks.c ****             }
1978:..\FreeRTOS\Source/tasks.c ****         }
1979:..\FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1886              		.loc 1 1979 0
 1887 009c FB68     		ldr	r3, [r7, #12]
 1888 009e 1800     		movs	r0, r3
 1889 00a0 FFF7FEFF 		bl	vClearInterruptMaskFromISR
1980:..\FreeRTOS\Source/tasks.c **** 
1981:..\FreeRTOS\Source/tasks.c ****         return xYieldRequired;
 1890              		.loc 1 1981 0
 1891 00a4 7B69     		ldr	r3, [r7, #20]
1982:..\FreeRTOS\Source/tasks.c ****     }
 1892              		.loc 1 1982 0
 1893 00a6 1800     		movs	r0, r3
 1894 00a8 BD46     		mov	sp, r7
 1895 00aa 06B0     		add	sp, sp, #24
 1896              		@ sp needed
 1897 00ac 80BD     		pop	{r7, pc}
 1898              	.L148:
 1899 00ae C046     		.align	2
 1900              	.L147:
 1901 00b0 00000000 		.word	x
 1902 00b4 00010000 		.word	uxSchedulerSuspended
 1903 00b8 00000000 		.word	pxCurrentTCB
 1904 00bc EC000000 		.word	xYieldPending
 1905 00c0 E0000000 		.word	uxTopReadyPriority
 1906 00c4 04000000 		.word	pxReadyTasksLists
 1907 00c8 98000000 		.word	xPendingReadyList
 1908              		.cfi_endproc
 1909              	.LFE13:
 1910              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1911              		.section	.rodata
 1912              		.align	2
 1913              	.LC46:
 1914 0000 49444C45 		.ascii	"IDLE\000"
 1914      00
 1915              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1916              		.align	2
 1917              		.global	vTaskStartScheduler
 1918              		.code	16
 1919              		.thumb_func
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 70


 1920              		.type	vTaskStartScheduler, %function
 1921              	vTaskStartScheduler:
 1922              	.LFB14:
1983:..\FreeRTOS\Source/tasks.c **** 
1984:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1985:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1986:..\FreeRTOS\Source/tasks.c **** 
1987:..\FreeRTOS\Source/tasks.c **** void vTaskStartScheduler( void )
1988:..\FreeRTOS\Source/tasks.c **** {
 1923              		.loc 1 1988 0
 1924              		.cfi_startproc
 1925              		@ args = 0, pretend = 0, frame = 16
 1926              		@ frame_needed = 1, uses_anonymous_args = 0
 1927 0000 90B5     		push	{r4, r7, lr}
 1928              		.cfi_def_cfa_offset 12
 1929              		.cfi_offset 4, -12
 1930              		.cfi_offset 7, -8
 1931              		.cfi_offset 14, -4
 1932 0002 89B0     		sub	sp, sp, #36
 1933              		.cfi_def_cfa_offset 48
 1934 0004 04AF     		add	r7, sp, #16
 1935              		.cfi_def_cfa 7, 32
 1936              	.LBB6:
1989:..\FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
1990:..\FreeRTOS\Source/tasks.c **** 
1991:..\FreeRTOS\Source/tasks.c ****     /* Add the idle task at the lowest priority. */
1992:..\FreeRTOS\Source/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1993:..\FreeRTOS\Source/tasks.c ****         {
1994:..\FreeRTOS\Source/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 1937              		.loc 1 1994 0
 1938 0006 0023     		movs	r3, #0
 1939 0008 BB60     		str	r3, [r7, #8]
1995:..\FreeRTOS\Source/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
 1940              		.loc 1 1995 0
 1941 000a 0023     		movs	r3, #0
 1942 000c 7B60     		str	r3, [r7, #4]
1996:..\FreeRTOS\Source/tasks.c ****             uint32_t ulIdleTaskStackSize;
1997:..\FreeRTOS\Source/tasks.c **** 
1998:..\FreeRTOS\Source/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
1999:..\FreeRTOS\Source/tasks.c ****              * address of the RAM then create the idle task. */
2000:..\FreeRTOS\Source/tasks.c ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
 1943              		.loc 1 2000 0
 1944 000e 3A00     		movs	r2, r7
 1945 0010 391D     		adds	r1, r7, #4
 1946 0012 0823     		movs	r3, #8
 1947 0014 FB18     		adds	r3, r7, r3
 1948 0016 1800     		movs	r0, r3
 1949 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
2001:..\FreeRTOS\Source/tasks.c ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 1950              		.loc 1 2001 0
 1951 001c 3C68     		ldr	r4, [r7]
 1952 001e 7B68     		ldr	r3, [r7, #4]
 1953 0020 BA68     		ldr	r2, [r7, #8]
 1954 0022 1D49     		ldr	r1, .L156
 1955 0024 1D48     		ldr	r0, .L156+4
 1956 0026 0292     		str	r2, [sp, #8]
 1957 0028 0193     		str	r3, [sp, #4]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 71


 1958 002a 0023     		movs	r3, #0
 1959 002c 0093     		str	r3, [sp]
 1960 002e 0023     		movs	r3, #0
 1961 0030 2200     		movs	r2, r4
 1962 0032 FFF7FEFF 		bl	xTaskCreateStatic
 1963 0036 0200     		movs	r2, r0
 1964 0038 194B     		ldr	r3, .L156+8
 1965 003a 1A60     		str	r2, [r3]
2002:..\FreeRTOS\Source/tasks.c ****                                                  configIDLE_TASK_NAME,
2003:..\FreeRTOS\Source/tasks.c ****                                                  ulIdleTaskStackSize,
2004:..\FreeRTOS\Source/tasks.c ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
2005:..\FreeRTOS\Source/tasks.c ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
2006:..\FreeRTOS\Source/tasks.c ****                                                  pxIdleTaskStackBuffer,
2007:..\FreeRTOS\Source/tasks.c ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
2008:..\FreeRTOS\Source/tasks.c **** 
2009:..\FreeRTOS\Source/tasks.c ****             if( xIdleTaskHandle != NULL )
 1966              		.loc 1 2009 0
 1967 003c 184B     		ldr	r3, .L156+8
 1968 003e 1B68     		ldr	r3, [r3]
 1969 0040 002B     		cmp	r3, #0
 1970 0042 02D0     		beq	.L150
2010:..\FreeRTOS\Source/tasks.c ****             {
2011:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
 1971              		.loc 1 2011 0
 1972 0044 0123     		movs	r3, #1
 1973 0046 FB60     		str	r3, [r7, #12]
 1974 0048 01E0     		b	.L151
 1975              	.L150:
2012:..\FreeRTOS\Source/tasks.c ****             }
2013:..\FreeRTOS\Source/tasks.c ****             else
2014:..\FreeRTOS\Source/tasks.c ****             {
2015:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdFAIL;
 1976              		.loc 1 2015 0
 1977 004a 0023     		movs	r3, #0
 1978 004c FB60     		str	r3, [r7, #12]
 1979              	.L151:
 1980              	.LBE6:
2016:..\FreeRTOS\Source/tasks.c ****             }
2017:..\FreeRTOS\Source/tasks.c ****         }
2018:..\FreeRTOS\Source/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2019:..\FreeRTOS\Source/tasks.c ****         {
2020:..\FreeRTOS\Source/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
2021:..\FreeRTOS\Source/tasks.c ****             xReturn = xTaskCreate( prvIdleTask,
2022:..\FreeRTOS\Source/tasks.c ****                                    configIDLE_TASK_NAME,
2023:..\FreeRTOS\Source/tasks.c ****                                    configMINIMAL_STACK_SIZE,
2024:..\FreeRTOS\Source/tasks.c ****                                    ( void * ) NULL,
2025:..\FreeRTOS\Source/tasks.c ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2026:..\FreeRTOS\Source/tasks.c ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2027:..\FreeRTOS\Source/tasks.c ****         }
2028:..\FreeRTOS\Source/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2029:..\FreeRTOS\Source/tasks.c **** 
2030:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2031:..\FreeRTOS\Source/tasks.c ****         {
2032:..\FreeRTOS\Source/tasks.c ****             if( xReturn == pdPASS )
 1981              		.loc 1 2032 0
 1982 004e FB68     		ldr	r3, [r7, #12]
 1983 0050 012B     		cmp	r3, #1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 72


 1984 0052 03D1     		bne	.L152
2033:..\FreeRTOS\Source/tasks.c ****             {
2034:..\FreeRTOS\Source/tasks.c ****                 xReturn = xTimerCreateTimerTask();
 1985              		.loc 1 2034 0
 1986 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 1987 0058 0300     		movs	r3, r0
 1988 005a FB60     		str	r3, [r7, #12]
 1989              	.L152:
2035:..\FreeRTOS\Source/tasks.c ****             }
2036:..\FreeRTOS\Source/tasks.c ****             else
2037:..\FreeRTOS\Source/tasks.c ****             {
2038:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2039:..\FreeRTOS\Source/tasks.c ****             }
2040:..\FreeRTOS\Source/tasks.c ****         }
2041:..\FreeRTOS\Source/tasks.c ****     #endif /* configUSE_TIMERS */
2042:..\FreeRTOS\Source/tasks.c **** 
2043:..\FreeRTOS\Source/tasks.c ****     if( xReturn == pdPASS )
 1990              		.loc 1 2043 0
 1991 005c FB68     		ldr	r3, [r7, #12]
 1992 005e 012B     		cmp	r3, #1
 1993 0060 0DD1     		bne	.L153
2044:..\FreeRTOS\Source/tasks.c ****     {
2045:..\FreeRTOS\Source/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2046:..\FreeRTOS\Source/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2047:..\FreeRTOS\Source/tasks.c ****          * the only macro called by the function. */
2048:..\FreeRTOS\Source/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2049:..\FreeRTOS\Source/tasks.c ****             {
2050:..\FreeRTOS\Source/tasks.c ****                 freertos_tasks_c_additions_init();
2051:..\FreeRTOS\Source/tasks.c ****             }
2052:..\FreeRTOS\Source/tasks.c ****         #endif
2053:..\FreeRTOS\Source/tasks.c **** 
2054:..\FreeRTOS\Source/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2055:..\FreeRTOS\Source/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2056:..\FreeRTOS\Source/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2057:..\FreeRTOS\Source/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2058:..\FreeRTOS\Source/tasks.c ****          * starts to run. */
2059:..\FreeRTOS\Source/tasks.c ****         portDISABLE_INTERRUPTS();
 1994              		.loc 1 2059 0
 1995              		.syntax divided
 1996              	@ 2059 "..\FreeRTOS\Source\tasks.c" 1
 1997 0062 72B6     		 cpsid i 
 1998              	@ 0 "" 2
2060:..\FreeRTOS\Source/tasks.c **** 
2061:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2062:..\FreeRTOS\Source/tasks.c ****             {
2063:..\FreeRTOS\Source/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2064:..\FreeRTOS\Source/tasks.c ****                  * structure specific to the task that will run first.
2065:..\FreeRTOS\Source/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2066:..\FreeRTOS\Source/tasks.c ****                  * for additional information. */
2067:..\FreeRTOS\Source/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2068:..\FreeRTOS\Source/tasks.c ****             }
2069:..\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
2070:..\FreeRTOS\Source/tasks.c **** 
2071:..\FreeRTOS\Source/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 1999              		.loc 1 2071 0
 2000              		.thumb
 2001              		.syntax unified
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 73


 2002 0064 0F4B     		ldr	r3, .L156+12
 2003 0066 0122     		movs	r2, #1
 2004 0068 5242     		rsbs	r2, r2, #0
 2005 006a 1A60     		str	r2, [r3]
2072:..\FreeRTOS\Source/tasks.c ****         xSchedulerRunning = pdTRUE;
 2006              		.loc 1 2072 0
 2007 006c 0E4B     		ldr	r3, .L156+16
 2008 006e 0122     		movs	r2, #1
 2009 0070 1A60     		str	r2, [r3]
2073:..\FreeRTOS\Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2010              		.loc 1 2073 0
 2011 0072 0E4B     		ldr	r3, .L156+20
 2012 0074 0022     		movs	r2, #0
 2013 0076 1A60     		str	r2, [r3]
2074:..\FreeRTOS\Source/tasks.c **** 
2075:..\FreeRTOS\Source/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2076:..\FreeRTOS\Source/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2077:..\FreeRTOS\Source/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2078:..\FreeRTOS\Source/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2079:..\FreeRTOS\Source/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2080:..\FreeRTOS\Source/tasks.c ****          * FreeRTOSConfig.h file. */
2081:..\FreeRTOS\Source/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2082:..\FreeRTOS\Source/tasks.c **** 
2083:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
2084:..\FreeRTOS\Source/tasks.c **** 
2085:..\FreeRTOS\Source/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2086:..\FreeRTOS\Source/tasks.c ****          * portable interface. */
2087:..\FreeRTOS\Source/tasks.c ****         if( xPortStartScheduler() != pdFALSE )
 2014              		.loc 1 2087 0
 2015 0078 FFF7FEFF 		bl	xPortStartScheduler
 2016 007c 05E0     		b	.L154
 2017              	.L153:
2088:..\FreeRTOS\Source/tasks.c ****         {
2089:..\FreeRTOS\Source/tasks.c ****             /* Should not reach here as if the scheduler is running the
2090:..\FreeRTOS\Source/tasks.c ****              * function will not return. */
2091:..\FreeRTOS\Source/tasks.c ****         }
2092:..\FreeRTOS\Source/tasks.c ****         else
2093:..\FreeRTOS\Source/tasks.c ****         {
2094:..\FreeRTOS\Source/tasks.c ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2095:..\FreeRTOS\Source/tasks.c ****         }
2096:..\FreeRTOS\Source/tasks.c ****     }
2097:..\FreeRTOS\Source/tasks.c ****     else
2098:..\FreeRTOS\Source/tasks.c ****     {
2099:..\FreeRTOS\Source/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2100:..\FreeRTOS\Source/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2101:..\FreeRTOS\Source/tasks.c ****          * or the timer task. */
2102:..\FreeRTOS\Source/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2018              		.loc 1 2102 0
 2019 007e 0C4B     		ldr	r3, .L156+24
 2020 0080 1B88     		ldrh	r3, [r3]
 2021 0082 002B     		cmp	r3, #0
 2022 0084 01D1     		bne	.L154
 2023              		.loc 1 2102 0 is_stmt 0 discriminator 1
 2024              		.syntax divided
 2025              	@ 2102 "..\FreeRTOS\Source\tasks.c" 1
 2026 0086 72B6     		 cpsid i 
 2027              	@ 0 "" 2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 74


 2028              		.thumb
 2029              		.syntax unified
 2030              	.L155:
 2031              		.loc 1 2102 0 discriminator 2
 2032 0088 FEE7     		b	.L155
 2033              	.L154:
2103:..\FreeRTOS\Source/tasks.c ****     }
2104:..\FreeRTOS\Source/tasks.c **** 
2105:..\FreeRTOS\Source/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2106:..\FreeRTOS\Source/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2107:..\FreeRTOS\Source/tasks.c ****     ( void ) xIdleTaskHandle;
2108:..\FreeRTOS\Source/tasks.c **** 
2109:..\FreeRTOS\Source/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2110:..\FreeRTOS\Source/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2111:..\FreeRTOS\Source/tasks.c ****     ( void ) uxTopUsedPriority;
 2034              		.loc 1 2111 0 is_stmt 1
 2035 008a 0A4B     		ldr	r3, .L156+28
 2036 008c 1B68     		ldr	r3, [r3]
2112:..\FreeRTOS\Source/tasks.c **** }
 2037              		.loc 1 2112 0
 2038 008e C046     		nop
 2039 0090 BD46     		mov	sp, r7
 2040 0092 05B0     		add	sp, sp, #20
 2041              		@ sp needed
 2042 0094 90BD     		pop	{r4, r7, pc}
 2043              	.L157:
 2044 0096 C046     		.align	2
 2045              	.L156:
 2046 0098 00000000 		.word	.LC46
 2047 009c 00000000 		.word	prvIdleTask
 2048 00a0 FC000000 		.word	xIdleTaskHandle
 2049 00a4 F8000000 		.word	xNextTaskUnblockTime
 2050 00a8 E4000000 		.word	xSchedulerRunning
 2051 00ac DC000000 		.word	xTickCount
 2052 00b0 00000000 		.word	x
 2053 00b4 00000000 		.word	uxTopUsedPriority
 2054              		.cfi_endproc
 2055              	.LFE14:
 2056              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 2057              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2058              		.align	2
 2059              		.global	vTaskEndScheduler
 2060              		.code	16
 2061              		.thumb_func
 2062              		.type	vTaskEndScheduler, %function
 2063              	vTaskEndScheduler:
 2064              	.LFB15:
2113:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2114:..\FreeRTOS\Source/tasks.c **** 
2115:..\FreeRTOS\Source/tasks.c **** void vTaskEndScheduler( void )
2116:..\FreeRTOS\Source/tasks.c **** {
 2065              		.loc 1 2116 0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 0
 2068              		@ frame_needed = 1, uses_anonymous_args = 0
 2069 0000 80B5     		push	{r7, lr}
 2070              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 75


 2071              		.cfi_offset 7, -8
 2072              		.cfi_offset 14, -4
 2073 0002 00AF     		add	r7, sp, #0
 2074              		.cfi_def_cfa_register 7
2117:..\FreeRTOS\Source/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2118:..\FreeRTOS\Source/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2119:..\FreeRTOS\Source/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2120:..\FreeRTOS\Source/tasks.c ****     portDISABLE_INTERRUPTS();
 2075              		.loc 1 2120 0
 2076              		.syntax divided
 2077              	@ 2120 "..\FreeRTOS\Source\tasks.c" 1
 2078 0004 72B6     		 cpsid i 
 2079              	@ 0 "" 2
2121:..\FreeRTOS\Source/tasks.c ****     xSchedulerRunning = pdFALSE;
 2080              		.loc 1 2121 0
 2081              		.thumb
 2082              		.syntax unified
 2083 0006 044B     		ldr	r3, .L159
 2084 0008 0022     		movs	r2, #0
 2085 000a 1A60     		str	r2, [r3]
2122:..\FreeRTOS\Source/tasks.c ****     vPortEndScheduler();
 2086              		.loc 1 2122 0
 2087 000c FFF7FEFF 		bl	vPortEndScheduler
2123:..\FreeRTOS\Source/tasks.c **** }
 2088              		.loc 1 2123 0
 2089 0010 C046     		nop
 2090 0012 BD46     		mov	sp, r7
 2091              		@ sp needed
 2092 0014 80BD     		pop	{r7, pc}
 2093              	.L160:
 2094 0016 C046     		.align	2
 2095              	.L159:
 2096 0018 E4000000 		.word	xSchedulerRunning
 2097              		.cfi_endproc
 2098              	.LFE15:
 2099              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 2100              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2101              		.align	2
 2102              		.global	vTaskSuspendAll
 2103              		.code	16
 2104              		.thumb_func
 2105              		.type	vTaskSuspendAll, %function
 2106              	vTaskSuspendAll:
 2107              	.LFB16:
2124:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2125:..\FreeRTOS\Source/tasks.c **** 
2126:..\FreeRTOS\Source/tasks.c **** void vTaskSuspendAll( void )
2127:..\FreeRTOS\Source/tasks.c **** {
 2108              		.loc 1 2127 0
 2109              		.cfi_startproc
 2110              		@ args = 0, pretend = 0, frame = 0
 2111              		@ frame_needed = 1, uses_anonymous_args = 0
 2112 0000 80B5     		push	{r7, lr}
 2113              		.cfi_def_cfa_offset 8
 2114              		.cfi_offset 7, -8
 2115              		.cfi_offset 14, -4
 2116 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 76


 2117              		.cfi_def_cfa_register 7
2128:..\FreeRTOS\Source/tasks.c ****     /* A critical section is not required as the variable is of type
2129:..\FreeRTOS\Source/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2130:..\FreeRTOS\Source/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2131:..\FreeRTOS\Source/tasks.c ****      * https://goo.gl/wu4acr */
2132:..\FreeRTOS\Source/tasks.c **** 
2133:..\FreeRTOS\Source/tasks.c ****     /* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2134:..\FreeRTOS\Source/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2135:..\FreeRTOS\Source/tasks.c ****     portSOFTWARE_BARRIER();
2136:..\FreeRTOS\Source/tasks.c **** 
2137:..\FreeRTOS\Source/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2138:..\FreeRTOS\Source/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2139:..\FreeRTOS\Source/tasks.c ****     ++uxSchedulerSuspended;
 2118              		.loc 1 2139 0
 2119 0004 034B     		ldr	r3, .L162
 2120 0006 1B68     		ldr	r3, [r3]
 2121 0008 5A1C     		adds	r2, r3, #1
 2122 000a 024B     		ldr	r3, .L162
 2123 000c 1A60     		str	r2, [r3]
2140:..\FreeRTOS\Source/tasks.c **** 
2141:..\FreeRTOS\Source/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2142:..\FreeRTOS\Source/tasks.c ****      * the above increment elsewhere. */
2143:..\FreeRTOS\Source/tasks.c ****     portMEMORY_BARRIER();
 2124              		.loc 1 2143 0
2144:..\FreeRTOS\Source/tasks.c **** }
 2125              		.loc 1 2144 0
 2126 000e C046     		nop
 2127 0010 BD46     		mov	sp, r7
 2128              		@ sp needed
 2129 0012 80BD     		pop	{r7, pc}
 2130              	.L163:
 2131              		.align	2
 2132              	.L162:
 2133 0014 00010000 		.word	uxSchedulerSuspended
 2134              		.cfi_endproc
 2135              	.LFE16:
 2136              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 2137              		.section	.text.xTaskResumeAll,"ax",%progbits
 2138              		.align	2
 2139              		.global	xTaskResumeAll
 2140              		.code	16
 2141              		.thumb_func
 2142              		.type	xTaskResumeAll, %function
 2143              	xTaskResumeAll:
 2144              	.LFB17:
2145:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2146:..\FreeRTOS\Source/tasks.c **** 
2147:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2148:..\FreeRTOS\Source/tasks.c **** 
2149:..\FreeRTOS\Source/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2150:..\FreeRTOS\Source/tasks.c ****     {
2151:..\FreeRTOS\Source/tasks.c ****         TickType_t xReturn;
2152:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2153:..\FreeRTOS\Source/tasks.c **** 
2154:..\FreeRTOS\Source/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2155:..\FreeRTOS\Source/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2156:..\FreeRTOS\Source/tasks.c ****          * task that are in the Ready state, even though the idle task is
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 77


2157:..\FreeRTOS\Source/tasks.c ****          * running. */
2158:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2159:..\FreeRTOS\Source/tasks.c ****             {
2160:..\FreeRTOS\Source/tasks.c ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2161:..\FreeRTOS\Source/tasks.c ****                 {
2162:..\FreeRTOS\Source/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2163:..\FreeRTOS\Source/tasks.c ****                 }
2164:..\FreeRTOS\Source/tasks.c ****             }
2165:..\FreeRTOS\Source/tasks.c ****         #else
2166:..\FreeRTOS\Source/tasks.c ****             {
2167:..\FreeRTOS\Source/tasks.c ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2168:..\FreeRTOS\Source/tasks.c **** 
2169:..\FreeRTOS\Source/tasks.c ****                 /* When port optimised task selection is used the uxTopReadyPriority
2170:..\FreeRTOS\Source/tasks.c ****                  * variable is used as a bit map.  If bits other than the least
2171:..\FreeRTOS\Source/tasks.c ****                  * significant bit are set then there are tasks that have a priority
2172:..\FreeRTOS\Source/tasks.c ****                  * above the idle priority that are in the Ready state.  This takes
2173:..\FreeRTOS\Source/tasks.c ****                  * care of the case where the co-operative scheduler is in use. */
2174:..\FreeRTOS\Source/tasks.c ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
2175:..\FreeRTOS\Source/tasks.c ****                 {
2176:..\FreeRTOS\Source/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2177:..\FreeRTOS\Source/tasks.c ****                 }
2178:..\FreeRTOS\Source/tasks.c ****             }
2179:..\FreeRTOS\Source/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2180:..\FreeRTOS\Source/tasks.c **** 
2181:..\FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2182:..\FreeRTOS\Source/tasks.c ****         {
2183:..\FreeRTOS\Source/tasks.c ****             xReturn = 0;
2184:..\FreeRTOS\Source/tasks.c ****         }
2185:..\FreeRTOS\Source/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2186:..\FreeRTOS\Source/tasks.c ****         {
2187:..\FreeRTOS\Source/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2188:..\FreeRTOS\Source/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2189:..\FreeRTOS\Source/tasks.c ****              * processed. */
2190:..\FreeRTOS\Source/tasks.c ****             xReturn = 0;
2191:..\FreeRTOS\Source/tasks.c ****         }
2192:..\FreeRTOS\Source/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2193:..\FreeRTOS\Source/tasks.c ****         {
2194:..\FreeRTOS\Source/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2195:..\FreeRTOS\Source/tasks.c ****              * idle priority.  This path can only be reached if
2196:..\FreeRTOS\Source/tasks.c ****              * configUSE_PREEMPTION is 0. */
2197:..\FreeRTOS\Source/tasks.c ****             xReturn = 0;
2198:..\FreeRTOS\Source/tasks.c ****         }
2199:..\FreeRTOS\Source/tasks.c ****         else
2200:..\FreeRTOS\Source/tasks.c ****         {
2201:..\FreeRTOS\Source/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2202:..\FreeRTOS\Source/tasks.c ****         }
2203:..\FreeRTOS\Source/tasks.c **** 
2204:..\FreeRTOS\Source/tasks.c ****         return xReturn;
2205:..\FreeRTOS\Source/tasks.c ****     }
2206:..\FreeRTOS\Source/tasks.c **** 
2207:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2208:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2209:..\FreeRTOS\Source/tasks.c **** 
2210:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2211:..\FreeRTOS\Source/tasks.c **** {
 2145              		.loc 1 2211 0
 2146              		.cfi_startproc
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 78


 2147              		@ args = 0, pretend = 0, frame = 16
 2148              		@ frame_needed = 1, uses_anonymous_args = 0
 2149 0000 80B5     		push	{r7, lr}
 2150              		.cfi_def_cfa_offset 8
 2151              		.cfi_offset 7, -8
 2152              		.cfi_offset 14, -4
 2153 0002 84B0     		sub	sp, sp, #16
 2154              		.cfi_def_cfa_offset 24
 2155 0004 00AF     		add	r7, sp, #0
 2156              		.cfi_def_cfa_register 7
2212:..\FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB = NULL;
 2157              		.loc 1 2212 0
 2158 0006 0023     		movs	r3, #0
 2159 0008 FB60     		str	r3, [r7, #12]
2213:..\FreeRTOS\Source/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2160              		.loc 1 2213 0
 2161 000a 0023     		movs	r3, #0
 2162 000c BB60     		str	r3, [r7, #8]
2214:..\FreeRTOS\Source/tasks.c **** 
2215:..\FreeRTOS\Source/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2216:..\FreeRTOS\Source/tasks.c ****      * previous call to vTaskSuspendAll(). */
2217:..\FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended );
 2163              		.loc 1 2217 0
 2164 000e 3B4B     		ldr	r3, .L176
 2165 0010 1B88     		ldrh	r3, [r3]
 2166 0012 002B     		cmp	r3, #0
 2167 0014 01D1     		bne	.L165
 2168              		.loc 1 2217 0 is_stmt 0 discriminator 1
 2169              		.syntax divided
 2170              	@ 2217 "..\FreeRTOS\Source\tasks.c" 1
 2171 0016 72B6     		 cpsid i 
 2172              	@ 0 "" 2
 2173              		.thumb
 2174              		.syntax unified
 2175              	.L166:
 2176 0018 FEE7     		b	.L166
 2177              	.L165:
 2178              		.loc 1 2217 0 discriminator 2
 2179 001a 394B     		ldr	r3, .L176+4
 2180 001c 1B68     		ldr	r3, [r3]
2218:..\FreeRTOS\Source/tasks.c **** 
2219:..\FreeRTOS\Source/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2220:..\FreeRTOS\Source/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2221:..\FreeRTOS\Source/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2222:..\FreeRTOS\Source/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2223:..\FreeRTOS\Source/tasks.c ****      * tasks from this list into their appropriate ready list. */
2224:..\FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
 2181              		.loc 1 2224 0 is_stmt 1 discriminator 2
 2182 001e FFF7FEFF 		bl	vPortEnterCritical
2225:..\FreeRTOS\Source/tasks.c ****     {
2226:..\FreeRTOS\Source/tasks.c ****         --uxSchedulerSuspended;
 2183              		.loc 1 2226 0 discriminator 2
 2184 0022 374B     		ldr	r3, .L176+4
 2185 0024 1B68     		ldr	r3, [r3]
 2186 0026 5A1E     		subs	r2, r3, #1
 2187 0028 354B     		ldr	r3, .L176+4
 2188 002a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 79


2227:..\FreeRTOS\Source/tasks.c **** 
2228:..\FreeRTOS\Source/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2189              		.loc 1 2228 0 discriminator 2
 2190 002c 344B     		ldr	r3, .L176+4
 2191 002e 1B68     		ldr	r3, [r3]
 2192 0030 002B     		cmp	r3, #0
 2193 0032 5BD1     		bne	.L167
2229:..\FreeRTOS\Source/tasks.c ****         {
2230:..\FreeRTOS\Source/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2194              		.loc 1 2230 0
 2195 0034 334B     		ldr	r3, .L176+8
 2196 0036 1B68     		ldr	r3, [r3]
 2197 0038 002B     		cmp	r3, #0
 2198 003a 57D0     		beq	.L167
2231:..\FreeRTOS\Source/tasks.c ****             {
2232:..\FreeRTOS\Source/tasks.c ****                 /* Move any readied tasks from the pending list into the
2233:..\FreeRTOS\Source/tasks.c ****                  * appropriate ready list. */
2234:..\FreeRTOS\Source/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2199              		.loc 1 2234 0
 2200 003c 2FE0     		b	.L168
 2201              	.L170:
2235:..\FreeRTOS\Source/tasks.c ****                 {
2236:..\FreeRTOS\Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
 2202              		.loc 1 2236 0
 2203 003e 324B     		ldr	r3, .L176+12
 2204 0040 DB68     		ldr	r3, [r3, #12]
 2205 0042 DB68     		ldr	r3, [r3, #12]
 2206 0044 FB60     		str	r3, [r7, #12]
2237:..\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2207              		.loc 1 2237 0
 2208 0046 FB68     		ldr	r3, [r7, #12]
 2209 0048 1833     		adds	r3, r3, #24
 2210 004a 1800     		movs	r0, r3
 2211 004c FFF7FEFF 		bl	uxListRemove
2238:..\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2212              		.loc 1 2238 0
 2213 0050 FB68     		ldr	r3, [r7, #12]
 2214 0052 0433     		adds	r3, r3, #4
 2215 0054 1800     		movs	r0, r3
 2216 0056 FFF7FEFF 		bl	uxListRemove
2239:..\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2217              		.loc 1 2239 0
 2218 005a FB68     		ldr	r3, [r7, #12]
 2219 005c DA6A     		ldr	r2, [r3, #44]
 2220 005e 2B4B     		ldr	r3, .L176+16
 2221 0060 1B68     		ldr	r3, [r3]
 2222 0062 9A42     		cmp	r2, r3
 2223 0064 03D9     		bls	.L169
 2224              		.loc 1 2239 0 is_stmt 0 discriminator 1
 2225 0066 FB68     		ldr	r3, [r7, #12]
 2226 0068 DA6A     		ldr	r2, [r3, #44]
 2227 006a 284B     		ldr	r3, .L176+16
 2228 006c 1A60     		str	r2, [r3]
 2229              	.L169:
 2230              		.loc 1 2239 0 discriminator 3
 2231 006e FB68     		ldr	r3, [r7, #12]
 2232 0070 DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 80


 2233 0072 1300     		movs	r3, r2
 2234 0074 9B00     		lsls	r3, r3, #2
 2235 0076 9B18     		adds	r3, r3, r2
 2236 0078 9B00     		lsls	r3, r3, #2
 2237 007a 254A     		ldr	r2, .L176+20
 2238 007c 9A18     		adds	r2, r3, r2
 2239 007e FB68     		ldr	r3, [r7, #12]
 2240 0080 0433     		adds	r3, r3, #4
 2241 0082 1900     		movs	r1, r3
 2242 0084 1000     		movs	r0, r2
 2243 0086 FFF7FEFF 		bl	vListInsertEnd
2240:..\FreeRTOS\Source/tasks.c **** 
2241:..\FreeRTOS\Source/tasks.c ****                     /* If the moved task has a priority higher than the current
2242:..\FreeRTOS\Source/tasks.c ****                      * task then a yield must be performed. */
2243:..\FreeRTOS\Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2244              		.loc 1 2243 0 is_stmt 1 discriminator 3
 2245 008a FB68     		ldr	r3, [r7, #12]
 2246 008c DA6A     		ldr	r2, [r3, #44]
 2247 008e 214B     		ldr	r3, .L176+24
 2248 0090 1B68     		ldr	r3, [r3]
 2249 0092 DB6A     		ldr	r3, [r3, #44]
 2250 0094 9A42     		cmp	r2, r3
 2251 0096 02D3     		bcc	.L168
2244:..\FreeRTOS\Source/tasks.c ****                     {
2245:..\FreeRTOS\Source/tasks.c ****                         xYieldPending = pdTRUE;
 2252              		.loc 1 2245 0
 2253 0098 1F4B     		ldr	r3, .L176+28
 2254 009a 0122     		movs	r2, #1
 2255 009c 1A60     		str	r2, [r3]
 2256              	.L168:
2234:..\FreeRTOS\Source/tasks.c ****                 {
 2257              		.loc 1 2234 0
 2258 009e 1A4B     		ldr	r3, .L176+12
 2259 00a0 1B68     		ldr	r3, [r3]
 2260 00a2 002B     		cmp	r3, #0
 2261 00a4 CBD1     		bne	.L170
2246:..\FreeRTOS\Source/tasks.c ****                     }
2247:..\FreeRTOS\Source/tasks.c ****                     else
2248:..\FreeRTOS\Source/tasks.c ****                     {
2249:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2250:..\FreeRTOS\Source/tasks.c ****                     }
2251:..\FreeRTOS\Source/tasks.c ****                 }
2252:..\FreeRTOS\Source/tasks.c **** 
2253:..\FreeRTOS\Source/tasks.c ****                 if( pxTCB != NULL )
 2262              		.loc 1 2253 0
 2263 00a6 FB68     		ldr	r3, [r7, #12]
 2264 00a8 002B     		cmp	r3, #0
 2265 00aa 01D0     		beq	.L171
2254:..\FreeRTOS\Source/tasks.c ****                 {
2255:..\FreeRTOS\Source/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2256:..\FreeRTOS\Source/tasks.c ****                      * which may have prevented the next unblock time from being
2257:..\FreeRTOS\Source/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2258:..\FreeRTOS\Source/tasks.c ****                      * important for low power tickless implementations, where
2259:..\FreeRTOS\Source/tasks.c ****                      * this can prevent an unnecessary exit from low power
2260:..\FreeRTOS\Source/tasks.c ****                      * state. */
2261:..\FreeRTOS\Source/tasks.c ****                     prvResetNextTaskUnblockTime();
 2266              		.loc 1 2261 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 81


 2267 00ac FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2268              	.L171:
 2269              	.LBB7:
2262:..\FreeRTOS\Source/tasks.c ****                 }
2263:..\FreeRTOS\Source/tasks.c **** 
2264:..\FreeRTOS\Source/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2265:..\FreeRTOS\Source/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2266:..\FreeRTOS\Source/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2267:..\FreeRTOS\Source/tasks.c ****                  * time. */
2268:..\FreeRTOS\Source/tasks.c ****                 {
2269:..\FreeRTOS\Source/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2270              		.loc 1 2269 0
 2271 00b0 1A4B     		ldr	r3, .L176+32
 2272 00b2 1B68     		ldr	r3, [r3]
 2273 00b4 7B60     		str	r3, [r7, #4]
2270:..\FreeRTOS\Source/tasks.c **** 
2271:..\FreeRTOS\Source/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
 2274              		.loc 1 2271 0
 2275 00b6 7B68     		ldr	r3, [r7, #4]
 2276 00b8 002B     		cmp	r3, #0
 2277 00ba 0FD0     		beq	.L172
 2278              	.L174:
2272:..\FreeRTOS\Source/tasks.c ****                     {
2273:..\FreeRTOS\Source/tasks.c ****                         do
2274:..\FreeRTOS\Source/tasks.c ****                         {
2275:..\FreeRTOS\Source/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
 2279              		.loc 1 2275 0
 2280 00bc FFF7FEFF 		bl	xTaskIncrementTick
 2281 00c0 031E     		subs	r3, r0, #0
 2282 00c2 02D0     		beq	.L173
2276:..\FreeRTOS\Source/tasks.c ****                             {
2277:..\FreeRTOS\Source/tasks.c ****                                 xYieldPending = pdTRUE;
 2283              		.loc 1 2277 0
 2284 00c4 144B     		ldr	r3, .L176+28
 2285 00c6 0122     		movs	r2, #1
 2286 00c8 1A60     		str	r2, [r3]
 2287              	.L173:
2278:..\FreeRTOS\Source/tasks.c ****                             }
2279:..\FreeRTOS\Source/tasks.c ****                             else
2280:..\FreeRTOS\Source/tasks.c ****                             {
2281:..\FreeRTOS\Source/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2282:..\FreeRTOS\Source/tasks.c ****                             }
2283:..\FreeRTOS\Source/tasks.c **** 
2284:..\FreeRTOS\Source/tasks.c ****                             --xPendedCounts;
 2288              		.loc 1 2284 0
 2289 00ca 7B68     		ldr	r3, [r7, #4]
 2290 00cc 013B     		subs	r3, r3, #1
 2291 00ce 7B60     		str	r3, [r7, #4]
2285:..\FreeRTOS\Source/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 2292              		.loc 1 2285 0
 2293 00d0 7B68     		ldr	r3, [r7, #4]
 2294 00d2 002B     		cmp	r3, #0
 2295 00d4 F2D1     		bne	.L174
2286:..\FreeRTOS\Source/tasks.c **** 
2287:..\FreeRTOS\Source/tasks.c ****                         xPendedTicks = 0;
 2296              		.loc 1 2287 0
 2297 00d6 114B     		ldr	r3, .L176+32
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 82


 2298 00d8 0022     		movs	r2, #0
 2299 00da 1A60     		str	r2, [r3]
 2300              	.L172:
 2301              	.LBE7:
2288:..\FreeRTOS\Source/tasks.c ****                     }
2289:..\FreeRTOS\Source/tasks.c ****                     else
2290:..\FreeRTOS\Source/tasks.c ****                     {
2291:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2292:..\FreeRTOS\Source/tasks.c ****                     }
2293:..\FreeRTOS\Source/tasks.c ****                 }
2294:..\FreeRTOS\Source/tasks.c **** 
2295:..\FreeRTOS\Source/tasks.c ****                 if( xYieldPending != pdFALSE )
 2302              		.loc 1 2295 0
 2303 00dc 0E4B     		ldr	r3, .L176+28
 2304 00de 1B68     		ldr	r3, [r3]
 2305 00e0 002B     		cmp	r3, #0
 2306 00e2 03D0     		beq	.L167
2296:..\FreeRTOS\Source/tasks.c ****                 {
2297:..\FreeRTOS\Source/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2298:..\FreeRTOS\Source/tasks.c ****                         {
2299:..\FreeRTOS\Source/tasks.c ****                             xAlreadyYielded = pdTRUE;
 2307              		.loc 1 2299 0
 2308 00e4 0123     		movs	r3, #1
 2309 00e6 BB60     		str	r3, [r7, #8]
2300:..\FreeRTOS\Source/tasks.c ****                         }
2301:..\FreeRTOS\Source/tasks.c ****                     #endif
2302:..\FreeRTOS\Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 2310              		.loc 1 2302 0
 2311 00e8 FFF7FEFF 		bl	vPortYield
 2312              	.L167:
2303:..\FreeRTOS\Source/tasks.c ****                 }
2304:..\FreeRTOS\Source/tasks.c ****                 else
2305:..\FreeRTOS\Source/tasks.c ****                 {
2306:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2307:..\FreeRTOS\Source/tasks.c ****                 }
2308:..\FreeRTOS\Source/tasks.c ****             }
2309:..\FreeRTOS\Source/tasks.c ****         }
2310:..\FreeRTOS\Source/tasks.c ****         else
2311:..\FreeRTOS\Source/tasks.c ****         {
2312:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2313:..\FreeRTOS\Source/tasks.c ****         }
2314:..\FreeRTOS\Source/tasks.c ****     }
2315:..\FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
 2313              		.loc 1 2315 0
 2314 00ec FFF7FEFF 		bl	vPortExitCritical
2316:..\FreeRTOS\Source/tasks.c **** 
2317:..\FreeRTOS\Source/tasks.c ****     return xAlreadyYielded;
 2315              		.loc 1 2317 0
 2316 00f0 BB68     		ldr	r3, [r7, #8]
2318:..\FreeRTOS\Source/tasks.c **** }
 2317              		.loc 1 2318 0
 2318 00f2 1800     		movs	r0, r3
 2319 00f4 BD46     		mov	sp, r7
 2320 00f6 04B0     		add	sp, sp, #16
 2321              		@ sp needed
 2322 00f8 80BD     		pop	{r7, pc}
 2323              	.L177:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 83


 2324 00fa C046     		.align	2
 2325              	.L176:
 2326 00fc 00000000 		.word	x
 2327 0100 00010000 		.word	uxSchedulerSuspended
 2328 0104 D8000000 		.word	uxCurrentNumberOfTasks
 2329 0108 98000000 		.word	xPendingReadyList
 2330 010c E0000000 		.word	uxTopReadyPriority
 2331 0110 04000000 		.word	pxReadyTasksLists
 2332 0114 00000000 		.word	pxCurrentTCB
 2333 0118 EC000000 		.word	xYieldPending
 2334 011c E8000000 		.word	xPendedTicks
 2335              		.cfi_endproc
 2336              	.LFE17:
 2337              		.size	xTaskResumeAll, .-xTaskResumeAll
 2338              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2339              		.align	2
 2340              		.global	xTaskGetTickCount
 2341              		.code	16
 2342              		.thumb_func
 2343              		.type	xTaskGetTickCount, %function
 2344              	xTaskGetTickCount:
 2345              	.LFB18:
2319:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2320:..\FreeRTOS\Source/tasks.c **** 
2321:..\FreeRTOS\Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2322:..\FreeRTOS\Source/tasks.c **** {
 2346              		.loc 1 2322 0
 2347              		.cfi_startproc
 2348              		@ args = 0, pretend = 0, frame = 8
 2349              		@ frame_needed = 1, uses_anonymous_args = 0
 2350 0000 80B5     		push	{r7, lr}
 2351              		.cfi_def_cfa_offset 8
 2352              		.cfi_offset 7, -8
 2353              		.cfi_offset 14, -4
 2354 0002 82B0     		sub	sp, sp, #8
 2355              		.cfi_def_cfa_offset 16
 2356 0004 00AF     		add	r7, sp, #0
 2357              		.cfi_def_cfa_register 7
2323:..\FreeRTOS\Source/tasks.c ****     TickType_t xTicks;
2324:..\FreeRTOS\Source/tasks.c **** 
2325:..\FreeRTOS\Source/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2326:..\FreeRTOS\Source/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2327:..\FreeRTOS\Source/tasks.c ****     {
2328:..\FreeRTOS\Source/tasks.c ****         xTicks = xTickCount;
 2358              		.loc 1 2328 0
 2359 0006 044B     		ldr	r3, .L180
 2360 0008 1B68     		ldr	r3, [r3]
 2361 000a 7B60     		str	r3, [r7, #4]
2329:..\FreeRTOS\Source/tasks.c ****     }
2330:..\FreeRTOS\Source/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2331:..\FreeRTOS\Source/tasks.c **** 
2332:..\FreeRTOS\Source/tasks.c ****     return xTicks;
 2362              		.loc 1 2332 0
 2363 000c 7B68     		ldr	r3, [r7, #4]
2333:..\FreeRTOS\Source/tasks.c **** }
 2364              		.loc 1 2333 0
 2365 000e 1800     		movs	r0, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 84


 2366 0010 BD46     		mov	sp, r7
 2367 0012 02B0     		add	sp, sp, #8
 2368              		@ sp needed
 2369 0014 80BD     		pop	{r7, pc}
 2370              	.L181:
 2371 0016 C046     		.align	2
 2372              	.L180:
 2373 0018 DC000000 		.word	xTickCount
 2374              		.cfi_endproc
 2375              	.LFE18:
 2376              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2377              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2378              		.align	2
 2379              		.global	xTaskGetTickCountFromISR
 2380              		.code	16
 2381              		.thumb_func
 2382              		.type	xTaskGetTickCountFromISR, %function
 2383              	xTaskGetTickCountFromISR:
 2384              	.LFB19:
2334:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2335:..\FreeRTOS\Source/tasks.c **** 
2336:..\FreeRTOS\Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2337:..\FreeRTOS\Source/tasks.c **** {
 2385              		.loc 1 2337 0
 2386              		.cfi_startproc
 2387              		@ args = 0, pretend = 0, frame = 8
 2388              		@ frame_needed = 1, uses_anonymous_args = 0
 2389 0000 80B5     		push	{r7, lr}
 2390              		.cfi_def_cfa_offset 8
 2391              		.cfi_offset 7, -8
 2392              		.cfi_offset 14, -4
 2393 0002 82B0     		sub	sp, sp, #8
 2394              		.cfi_def_cfa_offset 16
 2395 0004 00AF     		add	r7, sp, #0
 2396              		.cfi_def_cfa_register 7
2338:..\FreeRTOS\Source/tasks.c ****     TickType_t xReturn;
2339:..\FreeRTOS\Source/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2340:..\FreeRTOS\Source/tasks.c **** 
2341:..\FreeRTOS\Source/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2342:..\FreeRTOS\Source/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2343:..\FreeRTOS\Source/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2344:..\FreeRTOS\Source/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2345:..\FreeRTOS\Source/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2346:..\FreeRTOS\Source/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2347:..\FreeRTOS\Source/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2348:..\FreeRTOS\Source/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2349:..\FreeRTOS\Source/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2350:..\FreeRTOS\Source/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2351:..\FreeRTOS\Source/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2352:..\FreeRTOS\Source/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2353:..\FreeRTOS\Source/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2354:..\FreeRTOS\Source/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2355:..\FreeRTOS\Source/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2356:..\FreeRTOS\Source/tasks.c **** 
2357:..\FreeRTOS\Source/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2397              		.loc 1 2357 0
 2398 0006 0023     		movs	r3, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 85


 2399 0008 7B60     		str	r3, [r7, #4]
2358:..\FreeRTOS\Source/tasks.c ****     {
2359:..\FreeRTOS\Source/tasks.c ****         xReturn = xTickCount;
 2400              		.loc 1 2359 0
 2401 000a 044B     		ldr	r3, .L184
 2402 000c 1B68     		ldr	r3, [r3]
 2403 000e 3B60     		str	r3, [r7]
2360:..\FreeRTOS\Source/tasks.c ****     }
2361:..\FreeRTOS\Source/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2362:..\FreeRTOS\Source/tasks.c **** 
2363:..\FreeRTOS\Source/tasks.c ****     return xReturn;
 2404              		.loc 1 2363 0
 2405 0010 3B68     		ldr	r3, [r7]
2364:..\FreeRTOS\Source/tasks.c **** }
 2406              		.loc 1 2364 0
 2407 0012 1800     		movs	r0, r3
 2408 0014 BD46     		mov	sp, r7
 2409 0016 02B0     		add	sp, sp, #8
 2410              		@ sp needed
 2411 0018 80BD     		pop	{r7, pc}
 2412              	.L185:
 2413 001a C046     		.align	2
 2414              	.L184:
 2415 001c DC000000 		.word	xTickCount
 2416              		.cfi_endproc
 2417              	.LFE19:
 2418              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2419              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2420              		.align	2
 2421              		.global	uxTaskGetNumberOfTasks
 2422              		.code	16
 2423              		.thumb_func
 2424              		.type	uxTaskGetNumberOfTasks, %function
 2425              	uxTaskGetNumberOfTasks:
 2426              	.LFB20:
2365:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2366:..\FreeRTOS\Source/tasks.c **** 
2367:..\FreeRTOS\Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2368:..\FreeRTOS\Source/tasks.c **** {
 2427              		.loc 1 2368 0
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 0
 2430              		@ frame_needed = 1, uses_anonymous_args = 0
 2431 0000 80B5     		push	{r7, lr}
 2432              		.cfi_def_cfa_offset 8
 2433              		.cfi_offset 7, -8
 2434              		.cfi_offset 14, -4
 2435 0002 00AF     		add	r7, sp, #0
 2436              		.cfi_def_cfa_register 7
2369:..\FreeRTOS\Source/tasks.c ****     /* A critical section is not required because the variables are of type
2370:..\FreeRTOS\Source/tasks.c ****      * BaseType_t. */
2371:..\FreeRTOS\Source/tasks.c ****     return uxCurrentNumberOfTasks;
 2437              		.loc 1 2371 0
 2438 0004 024B     		ldr	r3, .L188
 2439 0006 1B68     		ldr	r3, [r3]
2372:..\FreeRTOS\Source/tasks.c **** }
 2440              		.loc 1 2372 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 86


 2441 0008 1800     		movs	r0, r3
 2442 000a BD46     		mov	sp, r7
 2443              		@ sp needed
 2444 000c 80BD     		pop	{r7, pc}
 2445              	.L189:
 2446 000e C046     		.align	2
 2447              	.L188:
 2448 0010 D8000000 		.word	uxCurrentNumberOfTasks
 2449              		.cfi_endproc
 2450              	.LFE20:
 2451              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2452              		.section	.text.pcTaskGetName,"ax",%progbits
 2453              		.align	2
 2454              		.global	pcTaskGetName
 2455              		.code	16
 2456              		.thumb_func
 2457              		.type	pcTaskGetName, %function
 2458              	pcTaskGetName:
 2459              	.LFB21:
2373:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2374:..\FreeRTOS\Source/tasks.c **** 
2375:..\FreeRTOS\Source/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2376:..\FreeRTOS\Source/tasks.c **** {
 2460              		.loc 1 2376 0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 16
 2463              		@ frame_needed = 1, uses_anonymous_args = 0
 2464 0000 80B5     		push	{r7, lr}
 2465              		.cfi_def_cfa_offset 8
 2466              		.cfi_offset 7, -8
 2467              		.cfi_offset 14, -4
 2468 0002 84B0     		sub	sp, sp, #16
 2469              		.cfi_def_cfa_offset 24
 2470 0004 00AF     		add	r7, sp, #0
 2471              		.cfi_def_cfa_register 7
 2472 0006 7860     		str	r0, [r7, #4]
2377:..\FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB;
2378:..\FreeRTOS\Source/tasks.c **** 
2379:..\FreeRTOS\Source/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2380:..\FreeRTOS\Source/tasks.c ****      * queried. */
2381:..\FreeRTOS\Source/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2473              		.loc 1 2381 0
 2474 0008 7B68     		ldr	r3, [r7, #4]
 2475 000a 002B     		cmp	r3, #0
 2476 000c 02D1     		bne	.L191
 2477              		.loc 1 2381 0 is_stmt 0 discriminator 1
 2478 000e 084B     		ldr	r3, .L196
 2479 0010 1B68     		ldr	r3, [r3]
 2480 0012 00E0     		b	.L192
 2481              	.L191:
 2482              		.loc 1 2381 0 discriminator 2
 2483 0014 7B68     		ldr	r3, [r7, #4]
 2484              	.L192:
 2485              		.loc 1 2381 0 discriminator 4
 2486 0016 FB60     		str	r3, [r7, #12]
2382:..\FreeRTOS\Source/tasks.c ****     configASSERT( pxTCB );
 2487              		.loc 1 2382 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 87


 2488 0018 064B     		ldr	r3, .L196+4
 2489 001a 1B88     		ldrh	r3, [r3]
 2490 001c 002B     		cmp	r3, #0
 2491 001e 01D1     		bne	.L193
 2492              		.loc 1 2382 0 is_stmt 0 discriminator 1
 2493              		.syntax divided
 2494              	@ 2382 "..\FreeRTOS\Source\tasks.c" 1
 2495 0020 72B6     		 cpsid i 
 2496              	@ 0 "" 2
 2497              		.thumb
 2498              		.syntax unified
 2499              	.L194:
 2500 0022 FEE7     		b	.L194
 2501              	.L193:
2383:..\FreeRTOS\Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2502              		.loc 1 2383 0 is_stmt 1
 2503 0024 FB68     		ldr	r3, [r7, #12]
 2504 0026 3433     		adds	r3, r3, #52
2384:..\FreeRTOS\Source/tasks.c **** }
 2505              		.loc 1 2384 0
 2506 0028 1800     		movs	r0, r3
 2507 002a BD46     		mov	sp, r7
 2508 002c 04B0     		add	sp, sp, #16
 2509              		@ sp needed
 2510 002e 80BD     		pop	{r7, pc}
 2511              	.L197:
 2512              		.align	2
 2513              	.L196:
 2514 0030 00000000 		.word	pxCurrentTCB
 2515 0034 00000000 		.word	x
 2516              		.cfi_endproc
 2517              	.LFE21:
 2518              		.size	pcTaskGetName, .-pcTaskGetName
 2519              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2520              		.align	2
 2521              		.global	xTaskCatchUpTicks
 2522              		.code	16
 2523              		.thumb_func
 2524              		.type	xTaskCatchUpTicks, %function
 2525              	xTaskCatchUpTicks:
 2526              	.LFB22:
2385:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2386:..\FreeRTOS\Source/tasks.c **** 
2387:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2388:..\FreeRTOS\Source/tasks.c **** 
2389:..\FreeRTOS\Source/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2390:..\FreeRTOS\Source/tasks.c ****                                                      const char pcNameToQuery[] )
2391:..\FreeRTOS\Source/tasks.c ****     {
2392:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
2393:..\FreeRTOS\Source/tasks.c ****         UBaseType_t x;
2394:..\FreeRTOS\Source/tasks.c ****         char cNextChar;
2395:..\FreeRTOS\Source/tasks.c ****         BaseType_t xBreakLoop;
2396:..\FreeRTOS\Source/tasks.c **** 
2397:..\FreeRTOS\Source/tasks.c ****         /* This function is called with the scheduler suspended. */
2398:..\FreeRTOS\Source/tasks.c **** 
2399:..\FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2400:..\FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 88


2401:..\FreeRTOS\Source/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2402:..\FreeRTOS\Source/tasks.c **** 
2403:..\FreeRTOS\Source/tasks.c ****             do
2404:..\FreeRTOS\Source/tasks.c ****             {
2405:..\FreeRTOS\Source/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2406:..\FreeRTOS\Source/tasks.c **** 
2407:..\FreeRTOS\Source/tasks.c ****                 /* Check each character in the name looking for a match or
2408:..\FreeRTOS\Source/tasks.c ****                  * mismatch. */
2409:..\FreeRTOS\Source/tasks.c ****                 xBreakLoop = pdFALSE;
2410:..\FreeRTOS\Source/tasks.c **** 
2411:..\FreeRTOS\Source/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2412:..\FreeRTOS\Source/tasks.c ****                 {
2413:..\FreeRTOS\Source/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2414:..\FreeRTOS\Source/tasks.c **** 
2415:..\FreeRTOS\Source/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2416:..\FreeRTOS\Source/tasks.c ****                     {
2417:..\FreeRTOS\Source/tasks.c ****                         /* Characters didn't match. */
2418:..\FreeRTOS\Source/tasks.c ****                         xBreakLoop = pdTRUE;
2419:..\FreeRTOS\Source/tasks.c ****                     }
2420:..\FreeRTOS\Source/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2421:..\FreeRTOS\Source/tasks.c ****                     {
2422:..\FreeRTOS\Source/tasks.c ****                         /* Both strings terminated, a match must have been
2423:..\FreeRTOS\Source/tasks.c ****                          * found. */
2424:..\FreeRTOS\Source/tasks.c ****                         pxReturn = pxNextTCB;
2425:..\FreeRTOS\Source/tasks.c ****                         xBreakLoop = pdTRUE;
2426:..\FreeRTOS\Source/tasks.c ****                     }
2427:..\FreeRTOS\Source/tasks.c ****                     else
2428:..\FreeRTOS\Source/tasks.c ****                     {
2429:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2430:..\FreeRTOS\Source/tasks.c ****                     }
2431:..\FreeRTOS\Source/tasks.c **** 
2432:..\FreeRTOS\Source/tasks.c ****                     if( xBreakLoop != pdFALSE )
2433:..\FreeRTOS\Source/tasks.c ****                     {
2434:..\FreeRTOS\Source/tasks.c ****                         break;
2435:..\FreeRTOS\Source/tasks.c ****                     }
2436:..\FreeRTOS\Source/tasks.c ****                 }
2437:..\FreeRTOS\Source/tasks.c **** 
2438:..\FreeRTOS\Source/tasks.c ****                 if( pxReturn != NULL )
2439:..\FreeRTOS\Source/tasks.c ****                 {
2440:..\FreeRTOS\Source/tasks.c ****                     /* The handle has been found. */
2441:..\FreeRTOS\Source/tasks.c ****                     break;
2442:..\FreeRTOS\Source/tasks.c ****                 }
2443:..\FreeRTOS\Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
2444:..\FreeRTOS\Source/tasks.c ****         }
2445:..\FreeRTOS\Source/tasks.c ****         else
2446:..\FreeRTOS\Source/tasks.c ****         {
2447:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2448:..\FreeRTOS\Source/tasks.c ****         }
2449:..\FreeRTOS\Source/tasks.c **** 
2450:..\FreeRTOS\Source/tasks.c ****         return pxReturn;
2451:..\FreeRTOS\Source/tasks.c ****     }
2452:..\FreeRTOS\Source/tasks.c **** 
2453:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2454:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2455:..\FreeRTOS\Source/tasks.c **** 
2456:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2457:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 89


2458:..\FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2459:..\FreeRTOS\Source/tasks.c ****     {
2460:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2461:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
2462:..\FreeRTOS\Source/tasks.c **** 
2463:..\FreeRTOS\Source/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2464:..\FreeRTOS\Source/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2465:..\FreeRTOS\Source/tasks.c **** 
2466:..\FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
2467:..\FreeRTOS\Source/tasks.c ****         {
2468:..\FreeRTOS\Source/tasks.c ****             /* Search the ready lists. */
2469:..\FreeRTOS\Source/tasks.c ****             do
2470:..\FreeRTOS\Source/tasks.c ****             {
2471:..\FreeRTOS\Source/tasks.c ****                 uxQueue--;
2472:..\FreeRTOS\Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2473:..\FreeRTOS\Source/tasks.c **** 
2474:..\FreeRTOS\Source/tasks.c ****                 if( pxTCB != NULL )
2475:..\FreeRTOS\Source/tasks.c ****                 {
2476:..\FreeRTOS\Source/tasks.c ****                     /* Found the handle. */
2477:..\FreeRTOS\Source/tasks.c ****                     break;
2478:..\FreeRTOS\Source/tasks.c ****                 }
2479:..\FreeRTOS\Source/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2480:..\FreeRTOS\Source/tasks.c **** 
2481:..\FreeRTOS\Source/tasks.c ****             /* Search the delayed lists. */
2482:..\FreeRTOS\Source/tasks.c ****             if( pxTCB == NULL )
2483:..\FreeRTOS\Source/tasks.c ****             {
2484:..\FreeRTOS\Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2485:..\FreeRTOS\Source/tasks.c ****             }
2486:..\FreeRTOS\Source/tasks.c **** 
2487:..\FreeRTOS\Source/tasks.c ****             if( pxTCB == NULL )
2488:..\FreeRTOS\Source/tasks.c ****             {
2489:..\FreeRTOS\Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2490:..\FreeRTOS\Source/tasks.c ****             }
2491:..\FreeRTOS\Source/tasks.c **** 
2492:..\FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2493:..\FreeRTOS\Source/tasks.c ****                 {
2494:..\FreeRTOS\Source/tasks.c ****                     if( pxTCB == NULL )
2495:..\FreeRTOS\Source/tasks.c ****                     {
2496:..\FreeRTOS\Source/tasks.c ****                         /* Search the suspended list. */
2497:..\FreeRTOS\Source/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
2498:..\FreeRTOS\Source/tasks.c ****                     }
2499:..\FreeRTOS\Source/tasks.c ****                 }
2500:..\FreeRTOS\Source/tasks.c ****             #endif
2501:..\FreeRTOS\Source/tasks.c **** 
2502:..\FreeRTOS\Source/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2503:..\FreeRTOS\Source/tasks.c ****                 {
2504:..\FreeRTOS\Source/tasks.c ****                     if( pxTCB == NULL )
2505:..\FreeRTOS\Source/tasks.c ****                     {
2506:..\FreeRTOS\Source/tasks.c ****                         /* Search the deleted list. */
2507:..\FreeRTOS\Source/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
2508:..\FreeRTOS\Source/tasks.c ****                     }
2509:..\FreeRTOS\Source/tasks.c ****                 }
2510:..\FreeRTOS\Source/tasks.c ****             #endif
2511:..\FreeRTOS\Source/tasks.c ****         }
2512:..\FreeRTOS\Source/tasks.c ****         ( void ) xTaskResumeAll();
2513:..\FreeRTOS\Source/tasks.c **** 
2514:..\FreeRTOS\Source/tasks.c ****         return pxTCB;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 90


2515:..\FreeRTOS\Source/tasks.c ****     }
2516:..\FreeRTOS\Source/tasks.c **** 
2517:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2518:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2519:..\FreeRTOS\Source/tasks.c **** 
2520:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2521:..\FreeRTOS\Source/tasks.c **** 
2522:..\FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2523:..\FreeRTOS\Source/tasks.c ****                                       const UBaseType_t uxArraySize,
2524:..\FreeRTOS\Source/tasks.c ****                                       uint32_t * const pulTotalRunTime )
2525:..\FreeRTOS\Source/tasks.c ****     {
2526:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2527:..\FreeRTOS\Source/tasks.c **** 
2528:..\FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
2529:..\FreeRTOS\Source/tasks.c ****         {
2530:..\FreeRTOS\Source/tasks.c ****             /* Is there a space in the array for each task in the system? */
2531:..\FreeRTOS\Source/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2532:..\FreeRTOS\Source/tasks.c ****             {
2533:..\FreeRTOS\Source/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2534:..\FreeRTOS\Source/tasks.c ****                  * task in the Ready state. */
2535:..\FreeRTOS\Source/tasks.c ****                 do
2536:..\FreeRTOS\Source/tasks.c ****                 {
2537:..\FreeRTOS\Source/tasks.c ****                     uxQueue--;
2538:..\FreeRTOS\Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2539:..\FreeRTOS\Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2540:..\FreeRTOS\Source/tasks.c **** 
2541:..\FreeRTOS\Source/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2542:..\FreeRTOS\Source/tasks.c ****                  * task in the Blocked state. */
2543:..\FreeRTOS\Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2544:..\FreeRTOS\Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2545:..\FreeRTOS\Source/tasks.c **** 
2546:..\FreeRTOS\Source/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2547:..\FreeRTOS\Source/tasks.c ****                     {
2548:..\FreeRTOS\Source/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2549:..\FreeRTOS\Source/tasks.c ****                          * each task that has been deleted but not yet cleaned up. */
2550:..\FreeRTOS\Source/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2551:..\FreeRTOS\Source/tasks.c ****                     }
2552:..\FreeRTOS\Source/tasks.c ****                 #endif
2553:..\FreeRTOS\Source/tasks.c **** 
2554:..\FreeRTOS\Source/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2555:..\FreeRTOS\Source/tasks.c ****                     {
2556:..\FreeRTOS\Source/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2557:..\FreeRTOS\Source/tasks.c ****                          * each task in the Suspended state. */
2558:..\FreeRTOS\Source/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2559:..\FreeRTOS\Source/tasks.c ****                     }
2560:..\FreeRTOS\Source/tasks.c ****                 #endif
2561:..\FreeRTOS\Source/tasks.c **** 
2562:..\FreeRTOS\Source/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2563:..\FreeRTOS\Source/tasks.c ****                     {
2564:..\FreeRTOS\Source/tasks.c ****                         if( pulTotalRunTime != NULL )
2565:..\FreeRTOS\Source/tasks.c ****                         {
2566:..\FreeRTOS\Source/tasks.c ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2567:..\FreeRTOS\Source/tasks.c ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2568:..\FreeRTOS\Source/tasks.c ****                             #else
2569:..\FreeRTOS\Source/tasks.c ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2570:..\FreeRTOS\Source/tasks.c ****                             #endif
2571:..\FreeRTOS\Source/tasks.c ****                         }
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 91


2572:..\FreeRTOS\Source/tasks.c ****                     }
2573:..\FreeRTOS\Source/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2574:..\FreeRTOS\Source/tasks.c ****                     {
2575:..\FreeRTOS\Source/tasks.c ****                         if( pulTotalRunTime != NULL )
2576:..\FreeRTOS\Source/tasks.c ****                         {
2577:..\FreeRTOS\Source/tasks.c ****                             *pulTotalRunTime = 0;
2578:..\FreeRTOS\Source/tasks.c ****                         }
2579:..\FreeRTOS\Source/tasks.c ****                     }
2580:..\FreeRTOS\Source/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2581:..\FreeRTOS\Source/tasks.c ****             }
2582:..\FreeRTOS\Source/tasks.c ****             else
2583:..\FreeRTOS\Source/tasks.c ****             {
2584:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2585:..\FreeRTOS\Source/tasks.c ****             }
2586:..\FreeRTOS\Source/tasks.c ****         }
2587:..\FreeRTOS\Source/tasks.c ****         ( void ) xTaskResumeAll();
2588:..\FreeRTOS\Source/tasks.c **** 
2589:..\FreeRTOS\Source/tasks.c ****         return uxTask;
2590:..\FreeRTOS\Source/tasks.c ****     }
2591:..\FreeRTOS\Source/tasks.c **** 
2592:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2593:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2594:..\FreeRTOS\Source/tasks.c **** 
2595:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2596:..\FreeRTOS\Source/tasks.c **** 
2597:..\FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2598:..\FreeRTOS\Source/tasks.c ****     {
2599:..\FreeRTOS\Source/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2600:..\FreeRTOS\Source/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2601:..\FreeRTOS\Source/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2602:..\FreeRTOS\Source/tasks.c ****         return xIdleTaskHandle;
2603:..\FreeRTOS\Source/tasks.c ****     }
2604:..\FreeRTOS\Source/tasks.c **** 
2605:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2606:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2607:..\FreeRTOS\Source/tasks.c **** 
2608:..\FreeRTOS\Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2609:..\FreeRTOS\Source/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2610:..\FreeRTOS\Source/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2611:..\FreeRTOS\Source/tasks.c ****  * 1. */
2612:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2613:..\FreeRTOS\Source/tasks.c **** 
2614:..\FreeRTOS\Source/tasks.c ****     void vTaskStepTick( const TickType_t xTicksToJump )
2615:..\FreeRTOS\Source/tasks.c ****     {
2616:..\FreeRTOS\Source/tasks.c ****         /* Correct the tick count value after a period during which the tick
2617:..\FreeRTOS\Source/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2618:..\FreeRTOS\Source/tasks.c ****          * each stepped tick. */
2619:..\FreeRTOS\Source/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2620:..\FreeRTOS\Source/tasks.c ****         xTickCount += xTicksToJump;
2621:..\FreeRTOS\Source/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2622:..\FreeRTOS\Source/tasks.c ****     }
2623:..\FreeRTOS\Source/tasks.c **** 
2624:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2625:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2626:..\FreeRTOS\Source/tasks.c **** 
2627:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2628:..\FreeRTOS\Source/tasks.c **** {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 92


 2527              		.loc 1 2628 0
 2528              		.cfi_startproc
 2529              		@ args = 0, pretend = 0, frame = 16
 2530              		@ frame_needed = 1, uses_anonymous_args = 0
 2531 0000 80B5     		push	{r7, lr}
 2532              		.cfi_def_cfa_offset 8
 2533              		.cfi_offset 7, -8
 2534              		.cfi_offset 14, -4
 2535 0002 84B0     		sub	sp, sp, #16
 2536              		.cfi_def_cfa_offset 24
 2537 0004 00AF     		add	r7, sp, #0
 2538              		.cfi_def_cfa_register 7
 2539 0006 7860     		str	r0, [r7, #4]
2629:..\FreeRTOS\Source/tasks.c ****     BaseType_t xYieldOccurred;
2630:..\FreeRTOS\Source/tasks.c **** 
2631:..\FreeRTOS\Source/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2632:..\FreeRTOS\Source/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2633:..\FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
 2540              		.loc 1 2633 0
 2541 0008 0C4B     		ldr	r3, .L202
 2542 000a 1B88     		ldrh	r3, [r3]
 2543 000c 002B     		cmp	r3, #0
 2544 000e 01D1     		bne	.L199
 2545              		.loc 1 2633 0 is_stmt 0 discriminator 1
 2546              		.syntax divided
 2547              	@ 2633 "..\FreeRTOS\Source\tasks.c" 1
 2548 0010 72B6     		 cpsid i 
 2549              	@ 0 "" 2
 2550              		.thumb
 2551              		.syntax unified
 2552              	.L200:
 2553 0012 FEE7     		b	.L200
 2554              	.L199:
 2555              		.loc 1 2633 0 discriminator 2
 2556 0014 0A4B     		ldr	r3, .L202+4
 2557 0016 1B68     		ldr	r3, [r3]
2634:..\FreeRTOS\Source/tasks.c **** 
2635:..\FreeRTOS\Source/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2636:..\FreeRTOS\Source/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2637:..\FreeRTOS\Source/tasks.c ****     vTaskSuspendAll();
 2558              		.loc 1 2637 0 is_stmt 1 discriminator 2
 2559 0018 FFF7FEFF 		bl	vTaskSuspendAll
2638:..\FreeRTOS\Source/tasks.c ****     xPendedTicks += xTicksToCatchUp;
 2560              		.loc 1 2638 0 discriminator 2
 2561 001c 094B     		ldr	r3, .L202+8
 2562 001e 1A68     		ldr	r2, [r3]
 2563 0020 7B68     		ldr	r3, [r7, #4]
 2564 0022 D218     		adds	r2, r2, r3
 2565 0024 074B     		ldr	r3, .L202+8
 2566 0026 1A60     		str	r2, [r3]
2639:..\FreeRTOS\Source/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 2567              		.loc 1 2639 0 discriminator 2
 2568 0028 FFF7FEFF 		bl	xTaskResumeAll
 2569 002c 0300     		movs	r3, r0
 2570 002e FB60     		str	r3, [r7, #12]
2640:..\FreeRTOS\Source/tasks.c **** 
2641:..\FreeRTOS\Source/tasks.c ****     return xYieldOccurred;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 93


 2571              		.loc 1 2641 0 discriminator 2
 2572 0030 FB68     		ldr	r3, [r7, #12]
2642:..\FreeRTOS\Source/tasks.c **** }
 2573              		.loc 1 2642 0 discriminator 2
 2574 0032 1800     		movs	r0, r3
 2575 0034 BD46     		mov	sp, r7
 2576 0036 04B0     		add	sp, sp, #16
 2577              		@ sp needed
 2578 0038 80BD     		pop	{r7, pc}
 2579              	.L203:
 2580 003a C046     		.align	2
 2581              	.L202:
 2582 003c 00000000 		.word	x
 2583 0040 00010000 		.word	uxSchedulerSuspended
 2584 0044 E8000000 		.word	xPendedTicks
 2585              		.cfi_endproc
 2586              	.LFE22:
 2587              		.size	xTaskCatchUpTicks, .-xTaskCatchUpTicks
 2588              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2589              		.align	2
 2590              		.global	xTaskIncrementTick
 2591              		.code	16
 2592              		.thumb_func
 2593              		.type	xTaskIncrementTick, %function
 2594              	xTaskIncrementTick:
 2595              	.LFB23:
2643:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2644:..\FreeRTOS\Source/tasks.c **** 
2645:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2646:..\FreeRTOS\Source/tasks.c **** 
2647:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2648:..\FreeRTOS\Source/tasks.c ****     {
2649:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB = xTask;
2650:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
2651:..\FreeRTOS\Source/tasks.c **** 
2652:..\FreeRTOS\Source/tasks.c ****         configASSERT( pxTCB );
2653:..\FreeRTOS\Source/tasks.c **** 
2654:..\FreeRTOS\Source/tasks.c ****         vTaskSuspendAll();
2655:..\FreeRTOS\Source/tasks.c ****         {
2656:..\FreeRTOS\Source/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2657:..\FreeRTOS\Source/tasks.c ****              * it is actually in the Blocked state. */
2658:..\FreeRTOS\Source/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2659:..\FreeRTOS\Source/tasks.c ****             {
2660:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
2661:..\FreeRTOS\Source/tasks.c **** 
2662:..\FreeRTOS\Source/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2663:..\FreeRTOS\Source/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2664:..\FreeRTOS\Source/tasks.c ****                  * scheduler is suspended. */
2665:..\FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2666:..\FreeRTOS\Source/tasks.c **** 
2667:..\FreeRTOS\Source/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2668:..\FreeRTOS\Source/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2669:..\FreeRTOS\Source/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2670:..\FreeRTOS\Source/tasks.c ****                  * is used. */
2671:..\FreeRTOS\Source/tasks.c ****                 taskENTER_CRITICAL();
2672:..\FreeRTOS\Source/tasks.c ****                 {
2673:..\FreeRTOS\Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 94


2674:..\FreeRTOS\Source/tasks.c ****                     {
2675:..\FreeRTOS\Source/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2676:..\FreeRTOS\Source/tasks.c **** 
2677:..\FreeRTOS\Source/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2678:..\FreeRTOS\Source/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2679:..\FreeRTOS\Source/tasks.c ****                          * then block again. */
2680:..\FreeRTOS\Source/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2681:..\FreeRTOS\Source/tasks.c ****                     }
2682:..\FreeRTOS\Source/tasks.c ****                     else
2683:..\FreeRTOS\Source/tasks.c ****                     {
2684:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2685:..\FreeRTOS\Source/tasks.c ****                     }
2686:..\FreeRTOS\Source/tasks.c ****                 }
2687:..\FreeRTOS\Source/tasks.c ****                 taskEXIT_CRITICAL();
2688:..\FreeRTOS\Source/tasks.c **** 
2689:..\FreeRTOS\Source/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2690:..\FreeRTOS\Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2691:..\FreeRTOS\Source/tasks.c **** 
2692:..\FreeRTOS\Source/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2693:..\FreeRTOS\Source/tasks.c ****                  * switch if preemption is turned off. */
2694:..\FreeRTOS\Source/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2695:..\FreeRTOS\Source/tasks.c ****                     {
2696:..\FreeRTOS\Source/tasks.c ****                         /* Preemption is on, but a context switch should only be
2697:..\FreeRTOS\Source/tasks.c ****                          *  performed if the unblocked task has a priority that is
2698:..\FreeRTOS\Source/tasks.c ****                          *  equal to or higher than the currently executing task. */
2699:..\FreeRTOS\Source/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2700:..\FreeRTOS\Source/tasks.c ****                         {
2701:..\FreeRTOS\Source/tasks.c ****                             /* Pend the yield to be performed when the scheduler
2702:..\FreeRTOS\Source/tasks.c ****                              * is unsuspended. */
2703:..\FreeRTOS\Source/tasks.c ****                             xYieldPending = pdTRUE;
2704:..\FreeRTOS\Source/tasks.c ****                         }
2705:..\FreeRTOS\Source/tasks.c ****                         else
2706:..\FreeRTOS\Source/tasks.c ****                         {
2707:..\FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2708:..\FreeRTOS\Source/tasks.c ****                         }
2709:..\FreeRTOS\Source/tasks.c ****                     }
2710:..\FreeRTOS\Source/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2711:..\FreeRTOS\Source/tasks.c ****             }
2712:..\FreeRTOS\Source/tasks.c ****             else
2713:..\FreeRTOS\Source/tasks.c ****             {
2714:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdFAIL;
2715:..\FreeRTOS\Source/tasks.c ****             }
2716:..\FreeRTOS\Source/tasks.c ****         }
2717:..\FreeRTOS\Source/tasks.c ****         ( void ) xTaskResumeAll();
2718:..\FreeRTOS\Source/tasks.c **** 
2719:..\FreeRTOS\Source/tasks.c ****         return xReturn;
2720:..\FreeRTOS\Source/tasks.c ****     }
2721:..\FreeRTOS\Source/tasks.c **** 
2722:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2723:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2724:..\FreeRTOS\Source/tasks.c **** 
2725:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2726:..\FreeRTOS\Source/tasks.c **** {
 2596              		.loc 1 2726 0
 2597              		.cfi_startproc
 2598              		@ args = 0, pretend = 0, frame = 24
 2599              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 95


 2600 0000 80B5     		push	{r7, lr}
 2601              		.cfi_def_cfa_offset 8
 2602              		.cfi_offset 7, -8
 2603              		.cfi_offset 14, -4
 2604 0002 86B0     		sub	sp, sp, #24
 2605              		.cfi_def_cfa_offset 32
 2606 0004 00AF     		add	r7, sp, #0
 2607              		.cfi_def_cfa_register 7
2727:..\FreeRTOS\Source/tasks.c ****     TCB_t * pxTCB;
2728:..\FreeRTOS\Source/tasks.c ****     TickType_t xItemValue;
2729:..\FreeRTOS\Source/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 2608              		.loc 1 2729 0
 2609 0006 0023     		movs	r3, #0
 2610 0008 7B61     		str	r3, [r7, #20]
2730:..\FreeRTOS\Source/tasks.c **** 
2731:..\FreeRTOS\Source/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2732:..\FreeRTOS\Source/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2733:..\FreeRTOS\Source/tasks.c ****      * tasks to be unblocked. */
2734:..\FreeRTOS\Source/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2735:..\FreeRTOS\Source/tasks.c **** 
2736:..\FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2611              		.loc 1 2736 0
 2612 000a 444B     		ldr	r3, .L221
 2613 000c 1B68     		ldr	r3, [r3]
 2614 000e 002B     		cmp	r3, #0
 2615 0010 00D0     		beq	.LCB2137
 2616 0012 79E0     		b	.L205	@long jump
 2617              	.LCB2137:
 2618              	.LBB8:
2737:..\FreeRTOS\Source/tasks.c ****     {
2738:..\FreeRTOS\Source/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2739:..\FreeRTOS\Source/tasks.c ****          * block. */
2740:..\FreeRTOS\Source/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 2619              		.loc 1 2740 0
 2620 0014 424B     		ldr	r3, .L221+4
 2621 0016 1B68     		ldr	r3, [r3]
 2622 0018 0133     		adds	r3, r3, #1
 2623 001a 3B61     		str	r3, [r7, #16]
2741:..\FreeRTOS\Source/tasks.c **** 
2742:..\FreeRTOS\Source/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2743:..\FreeRTOS\Source/tasks.c ****          * delayed lists if it wraps to 0. */
2744:..\FreeRTOS\Source/tasks.c ****         xTickCount = xConstTickCount;
 2624              		.loc 1 2744 0
 2625 001c 404B     		ldr	r3, .L221+4
 2626 001e 3A69     		ldr	r2, [r7, #16]
 2627 0020 1A60     		str	r2, [r3]
2745:..\FreeRTOS\Source/tasks.c **** 
2746:..\FreeRTOS\Source/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
 2628              		.loc 1 2746 0
 2629 0022 3B69     		ldr	r3, [r7, #16]
 2630 0024 002B     		cmp	r3, #0
 2631 0026 19D1     		bne	.L206
 2632              	.LBB9:
2747:..\FreeRTOS\Source/tasks.c ****         {
2748:..\FreeRTOS\Source/tasks.c ****             taskSWITCH_DELAYED_LISTS();
 2633              		.loc 1 2748 0
 2634 0028 3E4B     		ldr	r3, .L221+8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 96


 2635 002a 1B88     		ldrh	r3, [r3]
 2636 002c 002B     		cmp	r3, #0
 2637 002e 01D1     		bne	.L207
 2638              		.loc 1 2748 0 is_stmt 0 discriminator 1
 2639              		.syntax divided
 2640              	@ 2748 "..\FreeRTOS\Source\tasks.c" 1
 2641 0030 72B6     		 cpsid i 
 2642              	@ 0 "" 2
 2643              		.thumb
 2644              		.syntax unified
 2645              	.L208:
 2646 0032 FEE7     		b	.L208
 2647              	.L207:
 2648              		.loc 1 2748 0 discriminator 2
 2649 0034 3C4B     		ldr	r3, .L221+12
 2650 0036 1B68     		ldr	r3, [r3]
 2651 0038 1B68     		ldr	r3, [r3]
 2652 003a 3B4B     		ldr	r3, .L221+12
 2653 003c 1B68     		ldr	r3, [r3]
 2654 003e FB60     		str	r3, [r7, #12]
 2655 0040 3A4B     		ldr	r3, .L221+16
 2656 0042 1A68     		ldr	r2, [r3]
 2657 0044 384B     		ldr	r3, .L221+12
 2658 0046 1A60     		str	r2, [r3]
 2659 0048 384B     		ldr	r3, .L221+16
 2660 004a FA68     		ldr	r2, [r7, #12]
 2661 004c 1A60     		str	r2, [r3]
 2662 004e 384B     		ldr	r3, .L221+20
 2663 0050 1B68     		ldr	r3, [r3]
 2664 0052 5A1C     		adds	r2, r3, #1
 2665 0054 364B     		ldr	r3, .L221+20
 2666 0056 1A60     		str	r2, [r3]
 2667 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2668              	.L206:
 2669              	.LBE9:
2749:..\FreeRTOS\Source/tasks.c ****         }
2750:..\FreeRTOS\Source/tasks.c ****         else
2751:..\FreeRTOS\Source/tasks.c ****         {
2752:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2753:..\FreeRTOS\Source/tasks.c ****         }
2754:..\FreeRTOS\Source/tasks.c **** 
2755:..\FreeRTOS\Source/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2756:..\FreeRTOS\Source/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2757:..\FreeRTOS\Source/tasks.c ****          * has been found whose block time has not expired there is no need to
2758:..\FreeRTOS\Source/tasks.c ****          * look any further down the list. */
2759:..\FreeRTOS\Source/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
 2670              		.loc 1 2759 0 is_stmt 1
 2671 005c 354B     		ldr	r3, .L221+24
 2672 005e 1B68     		ldr	r3, [r3]
 2673 0060 3A69     		ldr	r2, [r7, #16]
 2674 0062 9A42     		cmp	r2, r3
 2675 0064 49D3     		bcc	.L211
 2676              	.L217:
2760:..\FreeRTOS\Source/tasks.c ****         {
2761:..\FreeRTOS\Source/tasks.c ****             for( ; ; )
2762:..\FreeRTOS\Source/tasks.c ****             {
2763:..\FreeRTOS\Source/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 97


 2677              		.loc 1 2763 0
 2678 0066 304B     		ldr	r3, .L221+12
 2679 0068 1B68     		ldr	r3, [r3]
 2680 006a 1B68     		ldr	r3, [r3]
 2681 006c 002B     		cmp	r3, #0
 2682 006e 04D1     		bne	.L212
2764:..\FreeRTOS\Source/tasks.c ****                 {
2765:..\FreeRTOS\Source/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2766:..\FreeRTOS\Source/tasks.c ****                      * to the maximum possible value so it is extremely
2767:..\FreeRTOS\Source/tasks.c ****                      * unlikely that the
2768:..\FreeRTOS\Source/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2769:..\FreeRTOS\Source/tasks.c ****                      * next time through. */
2770:..\FreeRTOS\Source/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
 2683              		.loc 1 2770 0
 2684 0070 304B     		ldr	r3, .L221+24
 2685 0072 0122     		movs	r2, #1
 2686 0074 5242     		rsbs	r2, r2, #0
 2687 0076 1A60     		str	r2, [r3]
2771:..\FreeRTOS\Source/tasks.c ****                     break;
 2688              		.loc 1 2771 0
 2689 0078 3FE0     		b	.L211
 2690              	.L212:
2772:..\FreeRTOS\Source/tasks.c ****                 }
2773:..\FreeRTOS\Source/tasks.c ****                 else
2774:..\FreeRTOS\Source/tasks.c ****                 {
2775:..\FreeRTOS\Source/tasks.c ****                     /* The delayed list is not empty, get the value of the
2776:..\FreeRTOS\Source/tasks.c ****                      * item at the head of the delayed list.  This is the time
2777:..\FreeRTOS\Source/tasks.c ****                      * at which the task at the head of the delayed list must
2778:..\FreeRTOS\Source/tasks.c ****                      * be removed from the Blocked state. */
2779:..\FreeRTOS\Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
 2691              		.loc 1 2779 0
 2692 007a 2B4B     		ldr	r3, .L221+12
 2693 007c 1B68     		ldr	r3, [r3]
 2694 007e DB68     		ldr	r3, [r3, #12]
 2695 0080 DB68     		ldr	r3, [r3, #12]
 2696 0082 BB60     		str	r3, [r7, #8]
2780:..\FreeRTOS\Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2697              		.loc 1 2780 0
 2698 0084 BB68     		ldr	r3, [r7, #8]
 2699 0086 5B68     		ldr	r3, [r3, #4]
 2700 0088 7B60     		str	r3, [r7, #4]
2781:..\FreeRTOS\Source/tasks.c **** 
2782:..\FreeRTOS\Source/tasks.c ****                     if( xConstTickCount < xItemValue )
 2701              		.loc 1 2782 0
 2702 008a 3A69     		ldr	r2, [r7, #16]
 2703 008c 7B68     		ldr	r3, [r7, #4]
 2704 008e 9A42     		cmp	r2, r3
 2705 0090 03D2     		bcs	.L213
2783:..\FreeRTOS\Source/tasks.c ****                     {
2784:..\FreeRTOS\Source/tasks.c ****                         /* It is not time to unblock this item yet, but the
2785:..\FreeRTOS\Source/tasks.c ****                          * item value is the time at which the task at the head
2786:..\FreeRTOS\Source/tasks.c ****                          * of the blocked list must be removed from the Blocked
2787:..\FreeRTOS\Source/tasks.c ****                          * state -  so record the item value in
2788:..\FreeRTOS\Source/tasks.c ****                          * xNextTaskUnblockTime. */
2789:..\FreeRTOS\Source/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
 2706              		.loc 1 2789 0
 2707 0092 284B     		ldr	r3, .L221+24
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 98


 2708 0094 7A68     		ldr	r2, [r7, #4]
 2709 0096 1A60     		str	r2, [r3]
2790:..\FreeRTOS\Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
 2710              		.loc 1 2790 0
 2711 0098 2FE0     		b	.L211
 2712              	.L213:
2791:..\FreeRTOS\Source/tasks.c ****                     }
2792:..\FreeRTOS\Source/tasks.c ****                     else
2793:..\FreeRTOS\Source/tasks.c ****                     {
2794:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2795:..\FreeRTOS\Source/tasks.c ****                     }
2796:..\FreeRTOS\Source/tasks.c **** 
2797:..\FreeRTOS\Source/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2798:..\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2713              		.loc 1 2798 0
 2714 009a BB68     		ldr	r3, [r7, #8]
 2715 009c 0433     		adds	r3, r3, #4
 2716 009e 1800     		movs	r0, r3
 2717 00a0 FFF7FEFF 		bl	uxListRemove
2799:..\FreeRTOS\Source/tasks.c **** 
2800:..\FreeRTOS\Source/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2801:..\FreeRTOS\Source/tasks.c ****                      * it from the event list. */
2802:..\FreeRTOS\Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2718              		.loc 1 2802 0
 2719 00a4 BB68     		ldr	r3, [r7, #8]
 2720 00a6 9B6A     		ldr	r3, [r3, #40]
 2721 00a8 002B     		cmp	r3, #0
 2722 00aa 04D0     		beq	.L214
2803:..\FreeRTOS\Source/tasks.c ****                     {
2804:..\FreeRTOS\Source/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2723              		.loc 1 2804 0
 2724 00ac BB68     		ldr	r3, [r7, #8]
 2725 00ae 1833     		adds	r3, r3, #24
 2726 00b0 1800     		movs	r0, r3
 2727 00b2 FFF7FEFF 		bl	uxListRemove
 2728              	.L214:
2805:..\FreeRTOS\Source/tasks.c ****                     }
2806:..\FreeRTOS\Source/tasks.c ****                     else
2807:..\FreeRTOS\Source/tasks.c ****                     {
2808:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2809:..\FreeRTOS\Source/tasks.c ****                     }
2810:..\FreeRTOS\Source/tasks.c **** 
2811:..\FreeRTOS\Source/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2812:..\FreeRTOS\Source/tasks.c ****                      * list. */
2813:..\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2729              		.loc 1 2813 0
 2730 00b6 BB68     		ldr	r3, [r7, #8]
 2731 00b8 DA6A     		ldr	r2, [r3, #44]
 2732 00ba 1F4B     		ldr	r3, .L221+28
 2733 00bc 1B68     		ldr	r3, [r3]
 2734 00be 9A42     		cmp	r2, r3
 2735 00c0 03D9     		bls	.L215
 2736              		.loc 1 2813 0 is_stmt 0 discriminator 1
 2737 00c2 BB68     		ldr	r3, [r7, #8]
 2738 00c4 DA6A     		ldr	r2, [r3, #44]
 2739 00c6 1C4B     		ldr	r3, .L221+28
 2740 00c8 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 99


 2741              	.L215:
 2742              		.loc 1 2813 0 discriminator 3
 2743 00ca BB68     		ldr	r3, [r7, #8]
 2744 00cc DA6A     		ldr	r2, [r3, #44]
 2745 00ce 1300     		movs	r3, r2
 2746 00d0 9B00     		lsls	r3, r3, #2
 2747 00d2 9B18     		adds	r3, r3, r2
 2748 00d4 9B00     		lsls	r3, r3, #2
 2749 00d6 194A     		ldr	r2, .L221+32
 2750 00d8 9A18     		adds	r2, r3, r2
 2751 00da BB68     		ldr	r3, [r7, #8]
 2752 00dc 0433     		adds	r3, r3, #4
 2753 00de 1900     		movs	r1, r3
 2754 00e0 1000     		movs	r0, r2
 2755 00e2 FFF7FEFF 		bl	vListInsertEnd
2814:..\FreeRTOS\Source/tasks.c **** 
2815:..\FreeRTOS\Source/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2816:..\FreeRTOS\Source/tasks.c ****                      * context switch if preemption is turned off. */
2817:..\FreeRTOS\Source/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2818:..\FreeRTOS\Source/tasks.c ****                         {
2819:..\FreeRTOS\Source/tasks.c ****                             /* Preemption is on, but a context switch should
2820:..\FreeRTOS\Source/tasks.c ****                              * only be performed if the unblocked task has a
2821:..\FreeRTOS\Source/tasks.c ****                              * priority that is equal to or higher than the
2822:..\FreeRTOS\Source/tasks.c ****                              * currently executing task. */
2823:..\FreeRTOS\Source/tasks.c ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2756              		.loc 1 2823 0 is_stmt 1 discriminator 3
 2757 00e6 BB68     		ldr	r3, [r7, #8]
 2758 00e8 DA6A     		ldr	r2, [r3, #44]
 2759 00ea 154B     		ldr	r3, .L221+36
 2760 00ec 1B68     		ldr	r3, [r3]
 2761 00ee DB6A     		ldr	r3, [r3, #44]
 2762 00f0 9A42     		cmp	r2, r3
 2763 00f2 B8D3     		bcc	.L217
2824:..\FreeRTOS\Source/tasks.c ****                             {
2825:..\FreeRTOS\Source/tasks.c ****                                 xSwitchRequired = pdTRUE;
 2764              		.loc 1 2825 0
 2765 00f4 0123     		movs	r3, #1
 2766 00f6 7B61     		str	r3, [r7, #20]
2826:..\FreeRTOS\Source/tasks.c ****                             }
2827:..\FreeRTOS\Source/tasks.c ****                             else
2828:..\FreeRTOS\Source/tasks.c ****                             {
2829:..\FreeRTOS\Source/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2830:..\FreeRTOS\Source/tasks.c ****                             }
2831:..\FreeRTOS\Source/tasks.c ****                         }
2832:..\FreeRTOS\Source/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2833:..\FreeRTOS\Source/tasks.c ****                 }
2834:..\FreeRTOS\Source/tasks.c ****             }
 2767              		.loc 1 2834 0
 2768 00f8 B5E7     		b	.L217
 2769              	.L211:
2835:..\FreeRTOS\Source/tasks.c ****         }
2836:..\FreeRTOS\Source/tasks.c **** 
2837:..\FreeRTOS\Source/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2838:..\FreeRTOS\Source/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2839:..\FreeRTOS\Source/tasks.c ****          * writer has not explicitly turned time slicing off. */
2840:..\FreeRTOS\Source/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2841:..\FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 100


2842:..\FreeRTOS\Source/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
2843:..\FreeRTOS\Source/tasks.c ****                 {
2844:..\FreeRTOS\Source/tasks.c ****                     xSwitchRequired = pdTRUE;
2845:..\FreeRTOS\Source/tasks.c ****                 }
2846:..\FreeRTOS\Source/tasks.c ****                 else
2847:..\FreeRTOS\Source/tasks.c ****                 {
2848:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2849:..\FreeRTOS\Source/tasks.c ****                 }
2850:..\FreeRTOS\Source/tasks.c ****             }
2851:..\FreeRTOS\Source/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2852:..\FreeRTOS\Source/tasks.c **** 
2853:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2854:..\FreeRTOS\Source/tasks.c ****             {
2855:..\FreeRTOS\Source/tasks.c ****                 /* Guard against the tick hook being called when the pended tick
2856:..\FreeRTOS\Source/tasks.c ****                  * count is being unwound (when the scheduler is being unlocked). */
2857:..\FreeRTOS\Source/tasks.c ****                 if( xPendedTicks == ( TickType_t ) 0 )
2858:..\FreeRTOS\Source/tasks.c ****                 {
2859:..\FreeRTOS\Source/tasks.c ****                     vApplicationTickHook();
2860:..\FreeRTOS\Source/tasks.c ****                 }
2861:..\FreeRTOS\Source/tasks.c ****                 else
2862:..\FreeRTOS\Source/tasks.c ****                 {
2863:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2864:..\FreeRTOS\Source/tasks.c ****                 }
2865:..\FreeRTOS\Source/tasks.c ****             }
2866:..\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2867:..\FreeRTOS\Source/tasks.c **** 
2868:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2869:..\FreeRTOS\Source/tasks.c ****             {
2870:..\FreeRTOS\Source/tasks.c ****                 if( xYieldPending != pdFALSE )
 2770              		.loc 1 2870 0
 2771 00fa 124B     		ldr	r3, .L221+40
 2772 00fc 1B68     		ldr	r3, [r3]
 2773 00fe 002B     		cmp	r3, #0
 2774 0100 07D0     		beq	.L219
2871:..\FreeRTOS\Source/tasks.c ****                 {
2872:..\FreeRTOS\Source/tasks.c ****                     xSwitchRequired = pdTRUE;
 2775              		.loc 1 2872 0
 2776 0102 0123     		movs	r3, #1
 2777 0104 7B61     		str	r3, [r7, #20]
 2778 0106 04E0     		b	.L219
 2779              	.L205:
 2780              	.LBE8:
2873:..\FreeRTOS\Source/tasks.c ****                 }
2874:..\FreeRTOS\Source/tasks.c ****                 else
2875:..\FreeRTOS\Source/tasks.c ****                 {
2876:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2877:..\FreeRTOS\Source/tasks.c ****                 }
2878:..\FreeRTOS\Source/tasks.c ****             }
2879:..\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_PREEMPTION */
2880:..\FreeRTOS\Source/tasks.c ****     }
2881:..\FreeRTOS\Source/tasks.c ****     else
2882:..\FreeRTOS\Source/tasks.c ****     {
2883:..\FreeRTOS\Source/tasks.c ****         ++xPendedTicks;
 2781              		.loc 1 2883 0
 2782 0108 0F4B     		ldr	r3, .L221+44
 2783 010a 1B68     		ldr	r3, [r3]
 2784 010c 5A1C     		adds	r2, r3, #1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 101


 2785 010e 0E4B     		ldr	r3, .L221+44
 2786 0110 1A60     		str	r2, [r3]
 2787              	.L219:
2884:..\FreeRTOS\Source/tasks.c **** 
2885:..\FreeRTOS\Source/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2886:..\FreeRTOS\Source/tasks.c ****          * scheduler is locked. */
2887:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2888:..\FreeRTOS\Source/tasks.c ****             {
2889:..\FreeRTOS\Source/tasks.c ****                 vApplicationTickHook();
2890:..\FreeRTOS\Source/tasks.c ****             }
2891:..\FreeRTOS\Source/tasks.c ****         #endif
2892:..\FreeRTOS\Source/tasks.c ****     }
2893:..\FreeRTOS\Source/tasks.c **** 
2894:..\FreeRTOS\Source/tasks.c ****     return xSwitchRequired;
 2788              		.loc 1 2894 0
 2789 0112 7B69     		ldr	r3, [r7, #20]
2895:..\FreeRTOS\Source/tasks.c **** }
 2790              		.loc 1 2895 0
 2791 0114 1800     		movs	r0, r3
 2792 0116 BD46     		mov	sp, r7
 2793 0118 06B0     		add	sp, sp, #24
 2794              		@ sp needed
 2795 011a 80BD     		pop	{r7, pc}
 2796              	.L222:
 2797              		.align	2
 2798              	.L221:
 2799 011c 00010000 		.word	uxSchedulerSuspended
 2800 0120 DC000000 		.word	xTickCount
 2801 0124 00000000 		.word	x
 2802 0128 90000000 		.word	pxDelayedTaskList
 2803 012c 94000000 		.word	pxOverflowDelayedTaskList
 2804 0130 F0000000 		.word	xNumOfOverflows
 2805 0134 F8000000 		.word	xNextTaskUnblockTime
 2806 0138 E0000000 		.word	uxTopReadyPriority
 2807 013c 04000000 		.word	pxReadyTasksLists
 2808 0140 00000000 		.word	pxCurrentTCB
 2809 0144 EC000000 		.word	xYieldPending
 2810 0148 E8000000 		.word	xPendedTicks
 2811              		.cfi_endproc
 2812              	.LFE23:
 2813              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2814              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2815              		.align	2
 2816              		.global	vTaskSwitchContext
 2817              		.code	16
 2818              		.thumb_func
 2819              		.type	vTaskSwitchContext, %function
 2820              	vTaskSwitchContext:
 2821              	.LFB24:
2896:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2897:..\FreeRTOS\Source/tasks.c **** 
2898:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2899:..\FreeRTOS\Source/tasks.c **** 
2900:..\FreeRTOS\Source/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2901:..\FreeRTOS\Source/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2902:..\FreeRTOS\Source/tasks.c ****     {
2903:..\FreeRTOS\Source/tasks.c ****         TCB_t * xTCB;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 102


2904:..\FreeRTOS\Source/tasks.c **** 
2905:..\FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2906:..\FreeRTOS\Source/tasks.c ****          * getting set. */
2907:..\FreeRTOS\Source/tasks.c ****         if( xTask == NULL )
2908:..\FreeRTOS\Source/tasks.c ****         {
2909:..\FreeRTOS\Source/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2910:..\FreeRTOS\Source/tasks.c ****         }
2911:..\FreeRTOS\Source/tasks.c ****         else
2912:..\FreeRTOS\Source/tasks.c ****         {
2913:..\FreeRTOS\Source/tasks.c ****             xTCB = xTask;
2914:..\FreeRTOS\Source/tasks.c ****         }
2915:..\FreeRTOS\Source/tasks.c **** 
2916:..\FreeRTOS\Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2917:..\FreeRTOS\Source/tasks.c ****          * the value can be accessed from an interrupt. */
2918:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
2919:..\FreeRTOS\Source/tasks.c ****         {
2920:..\FreeRTOS\Source/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2921:..\FreeRTOS\Source/tasks.c ****         }
2922:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
2923:..\FreeRTOS\Source/tasks.c ****     }
2924:..\FreeRTOS\Source/tasks.c **** 
2925:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2926:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2927:..\FreeRTOS\Source/tasks.c **** 
2928:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2929:..\FreeRTOS\Source/tasks.c **** 
2930:..\FreeRTOS\Source/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2931:..\FreeRTOS\Source/tasks.c ****     {
2932:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
2933:..\FreeRTOS\Source/tasks.c ****         TaskHookFunction_t xReturn;
2934:..\FreeRTOS\Source/tasks.c **** 
2935:..\FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2936:..\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2937:..\FreeRTOS\Source/tasks.c **** 
2938:..\FreeRTOS\Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2939:..\FreeRTOS\Source/tasks.c ****          * the value can be accessed from an interrupt. */
2940:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
2941:..\FreeRTOS\Source/tasks.c ****         {
2942:..\FreeRTOS\Source/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2943:..\FreeRTOS\Source/tasks.c ****         }
2944:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
2945:..\FreeRTOS\Source/tasks.c **** 
2946:..\FreeRTOS\Source/tasks.c ****         return xReturn;
2947:..\FreeRTOS\Source/tasks.c ****     }
2948:..\FreeRTOS\Source/tasks.c **** 
2949:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2950:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2951:..\FreeRTOS\Source/tasks.c **** 
2952:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2953:..\FreeRTOS\Source/tasks.c **** 
2954:..\FreeRTOS\Source/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2955:..\FreeRTOS\Source/tasks.c ****     {
2956:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
2957:..\FreeRTOS\Source/tasks.c ****         TaskHookFunction_t xReturn;
2958:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2959:..\FreeRTOS\Source/tasks.c **** 
2960:..\FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 103


2961:..\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2962:..\FreeRTOS\Source/tasks.c **** 
2963:..\FreeRTOS\Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2964:..\FreeRTOS\Source/tasks.c ****          * the value can be accessed from an interrupt. */
2965:..\FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2966:..\FreeRTOS\Source/tasks.c ****         {
2967:..\FreeRTOS\Source/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2968:..\FreeRTOS\Source/tasks.c ****         }
2969:..\FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2970:..\FreeRTOS\Source/tasks.c **** 
2971:..\FreeRTOS\Source/tasks.c ****         return xReturn;
2972:..\FreeRTOS\Source/tasks.c ****     }
2973:..\FreeRTOS\Source/tasks.c **** 
2974:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2975:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2976:..\FreeRTOS\Source/tasks.c **** 
2977:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2978:..\FreeRTOS\Source/tasks.c **** 
2979:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2980:..\FreeRTOS\Source/tasks.c ****                                              void * pvParameter )
2981:..\FreeRTOS\Source/tasks.c ****     {
2982:..\FreeRTOS\Source/tasks.c ****         TCB_t * xTCB;
2983:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
2984:..\FreeRTOS\Source/tasks.c **** 
2985:..\FreeRTOS\Source/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2986:..\FreeRTOS\Source/tasks.c ****         if( xTask == NULL )
2987:..\FreeRTOS\Source/tasks.c ****         {
2988:..\FreeRTOS\Source/tasks.c ****             xTCB = pxCurrentTCB;
2989:..\FreeRTOS\Source/tasks.c ****         }
2990:..\FreeRTOS\Source/tasks.c ****         else
2991:..\FreeRTOS\Source/tasks.c ****         {
2992:..\FreeRTOS\Source/tasks.c ****             xTCB = xTask;
2993:..\FreeRTOS\Source/tasks.c ****         }
2994:..\FreeRTOS\Source/tasks.c **** 
2995:..\FreeRTOS\Source/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2996:..\FreeRTOS\Source/tasks.c ****         {
2997:..\FreeRTOS\Source/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2998:..\FreeRTOS\Source/tasks.c ****         }
2999:..\FreeRTOS\Source/tasks.c ****         else
3000:..\FreeRTOS\Source/tasks.c ****         {
3001:..\FreeRTOS\Source/tasks.c ****             xReturn = pdFAIL;
3002:..\FreeRTOS\Source/tasks.c ****         }
3003:..\FreeRTOS\Source/tasks.c **** 
3004:..\FreeRTOS\Source/tasks.c ****         return xReturn;
3005:..\FreeRTOS\Source/tasks.c ****     }
3006:..\FreeRTOS\Source/tasks.c **** 
3007:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3008:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3009:..\FreeRTOS\Source/tasks.c **** 
3010:..\FreeRTOS\Source/tasks.c **** void vTaskSwitchContext( void )
3011:..\FreeRTOS\Source/tasks.c **** {
 2822              		.loc 1 3011 0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 8
 2825              		@ frame_needed = 1, uses_anonymous_args = 0
 2826 0000 80B5     		push	{r7, lr}
 2827              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 104


 2828              		.cfi_offset 7, -8
 2829              		.cfi_offset 14, -4
 2830 0002 82B0     		sub	sp, sp, #8
 2831              		.cfi_def_cfa_offset 16
 2832 0004 00AF     		add	r7, sp, #0
 2833              		.cfi_def_cfa_register 7
3012:..\FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2834              		.loc 1 3012 0
 2835 0006 224B     		ldr	r3, .L232
 2836 0008 1B68     		ldr	r3, [r3]
 2837 000a 002B     		cmp	r3, #0
 2838 000c 03D0     		beq	.L224
3013:..\FreeRTOS\Source/tasks.c ****     {
3014:..\FreeRTOS\Source/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3015:..\FreeRTOS\Source/tasks.c ****          * switch. */
3016:..\FreeRTOS\Source/tasks.c ****         xYieldPending = pdTRUE;
 2839              		.loc 1 3016 0
 2840 000e 214B     		ldr	r3, .L232+4
 2841 0010 0122     		movs	r2, #1
 2842 0012 1A60     		str	r2, [r3]
3017:..\FreeRTOS\Source/tasks.c ****     }
3018:..\FreeRTOS\Source/tasks.c ****     else
3019:..\FreeRTOS\Source/tasks.c ****     {
3020:..\FreeRTOS\Source/tasks.c ****         xYieldPending = pdFALSE;
3021:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_OUT();
3022:..\FreeRTOS\Source/tasks.c **** 
3023:..\FreeRTOS\Source/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3024:..\FreeRTOS\Source/tasks.c ****             {
3025:..\FreeRTOS\Source/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3026:..\FreeRTOS\Source/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3027:..\FreeRTOS\Source/tasks.c ****                 #else
3028:..\FreeRTOS\Source/tasks.c ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3029:..\FreeRTOS\Source/tasks.c ****                 #endif
3030:..\FreeRTOS\Source/tasks.c **** 
3031:..\FreeRTOS\Source/tasks.c ****                 /* Add the amount of time the task has been running to the
3032:..\FreeRTOS\Source/tasks.c ****                  * accumulated time so far.  The time the task started running was
3033:..\FreeRTOS\Source/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3034:..\FreeRTOS\Source/tasks.c ****                  * protection here so count values are only valid until the timer
3035:..\FreeRTOS\Source/tasks.c ****                  * overflows.  The guard against negative values is to protect
3036:..\FreeRTOS\Source/tasks.c ****                  * against suspect run time stat counter implementations - which
3037:..\FreeRTOS\Source/tasks.c ****                  * are provided by the application, not the kernel. */
3038:..\FreeRTOS\Source/tasks.c ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3039:..\FreeRTOS\Source/tasks.c ****                 {
3040:..\FreeRTOS\Source/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3041:..\FreeRTOS\Source/tasks.c ****                 }
3042:..\FreeRTOS\Source/tasks.c ****                 else
3043:..\FreeRTOS\Source/tasks.c ****                 {
3044:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3045:..\FreeRTOS\Source/tasks.c ****                 }
3046:..\FreeRTOS\Source/tasks.c **** 
3047:..\FreeRTOS\Source/tasks.c ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3048:..\FreeRTOS\Source/tasks.c ****             }
3049:..\FreeRTOS\Source/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3050:..\FreeRTOS\Source/tasks.c **** 
3051:..\FreeRTOS\Source/tasks.c ****         /* Check for stack overflow, if configured. */
3052:..\FreeRTOS\Source/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3053:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 105


3054:..\FreeRTOS\Source/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3055:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3056:..\FreeRTOS\Source/tasks.c ****             {
3057:..\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3058:..\FreeRTOS\Source/tasks.c ****             }
3059:..\FreeRTOS\Source/tasks.c ****         #endif
3060:..\FreeRTOS\Source/tasks.c **** 
3061:..\FreeRTOS\Source/tasks.c ****         /* Select a new task to run using either the generic C or port
3062:..\FreeRTOS\Source/tasks.c ****          * optimised asm code. */
3063:..\FreeRTOS\Source/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3064:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
3065:..\FreeRTOS\Source/tasks.c **** 
3066:..\FreeRTOS\Source/tasks.c ****         /* After the new task is switched in, update the global errno. */
3067:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3068:..\FreeRTOS\Source/tasks.c ****             {
3069:..\FreeRTOS\Source/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3070:..\FreeRTOS\Source/tasks.c ****             }
3071:..\FreeRTOS\Source/tasks.c ****         #endif
3072:..\FreeRTOS\Source/tasks.c **** 
3073:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3074:..\FreeRTOS\Source/tasks.c ****             {
3075:..\FreeRTOS\Source/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3076:..\FreeRTOS\Source/tasks.c ****                  * structure specific to this task.
3077:..\FreeRTOS\Source/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3078:..\FreeRTOS\Source/tasks.c ****                  * for additional information. */
3079:..\FreeRTOS\Source/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3080:..\FreeRTOS\Source/tasks.c ****             }
3081:..\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3082:..\FreeRTOS\Source/tasks.c ****     }
3083:..\FreeRTOS\Source/tasks.c **** }
 2843              		.loc 1 3083 0
 2844 0014 38E0     		b	.L231
 2845              	.L224:
3020:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_OUT();
 2846              		.loc 1 3020 0
 2847 0016 1F4B     		ldr	r3, .L232+4
 2848 0018 0022     		movs	r2, #0
 2849 001a 1A60     		str	r2, [r3]
 2850              	.LBB10:
3063:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2851              		.loc 1 3063 0
 2852 001c 1E4B     		ldr	r3, .L232+8
 2853 001e 1B68     		ldr	r3, [r3]
 2854 0020 7B60     		str	r3, [r7, #4]
 2855 0022 08E0     		b	.L226
 2856              	.L229:
3063:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2857              		.loc 1 3063 0 is_stmt 0 discriminator 5
 2858 0024 1D4B     		ldr	r3, .L232+12
 2859 0026 1B88     		ldrh	r3, [r3]
 2860 0028 002B     		cmp	r3, #0
 2861 002a 01D1     		bne	.L227
3063:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2862              		.loc 1 3063 0 discriminator 2
 2863              		.syntax divided
 2864              	@ 3063 "..\FreeRTOS\Source\tasks.c" 1
 2865 002c 72B6     		 cpsid i 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 106


 2866              	@ 0 "" 2
 2867              		.thumb
 2868              		.syntax unified
 2869              	.L228:
3063:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2870              		.loc 1 3063 0 discriminator 1
 2871 002e FEE7     		b	.L228
 2872              	.L227:
3063:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2873              		.loc 1 3063 0 discriminator 3
 2874 0030 7B68     		ldr	r3, [r7, #4]
 2875 0032 013B     		subs	r3, r3, #1
 2876 0034 7B60     		str	r3, [r7, #4]
 2877              	.L226:
3063:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2878              		.loc 1 3063 0 discriminator 4
 2879 0036 1A49     		ldr	r1, .L232+16
 2880 0038 7A68     		ldr	r2, [r7, #4]
 2881 003a 1300     		movs	r3, r2
 2882 003c 9B00     		lsls	r3, r3, #2
 2883 003e 9B18     		adds	r3, r3, r2
 2884 0040 9B00     		lsls	r3, r3, #2
 2885 0042 5B58     		ldr	r3, [r3, r1]
 2886 0044 002B     		cmp	r3, #0
 2887 0046 EDD0     		beq	.L229
 2888              	.LBB11:
3063:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2889              		.loc 1 3063 0 discriminator 6
 2890 0048 7A68     		ldr	r2, [r7, #4]
 2891 004a 1300     		movs	r3, r2
 2892 004c 9B00     		lsls	r3, r3, #2
 2893 004e 9B18     		adds	r3, r3, r2
 2894 0050 9B00     		lsls	r3, r3, #2
 2895 0052 134A     		ldr	r2, .L232+16
 2896 0054 9B18     		adds	r3, r3, r2
 2897 0056 3B60     		str	r3, [r7]
 2898 0058 3B68     		ldr	r3, [r7]
 2899 005a 5B68     		ldr	r3, [r3, #4]
 2900 005c 5A68     		ldr	r2, [r3, #4]
 2901 005e 3B68     		ldr	r3, [r7]
 2902 0060 5A60     		str	r2, [r3, #4]
 2903 0062 3B68     		ldr	r3, [r7]
 2904 0064 5A68     		ldr	r2, [r3, #4]
 2905 0066 3B68     		ldr	r3, [r7]
 2906 0068 0833     		adds	r3, r3, #8
 2907 006a 9A42     		cmp	r2, r3
 2908 006c 04D1     		bne	.L230
3063:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2909              		.loc 1 3063 0 discriminator 7
 2910 006e 3B68     		ldr	r3, [r7]
 2911 0070 5B68     		ldr	r3, [r3, #4]
 2912 0072 5A68     		ldr	r2, [r3, #4]
 2913 0074 3B68     		ldr	r3, [r7]
 2914 0076 5A60     		str	r2, [r3, #4]
 2915              	.L230:
3063:..\FreeRTOS\Source/tasks.c ****         traceTASK_SWITCHED_IN();
 2916              		.loc 1 3063 0 discriminator 9
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 107


 2917 0078 3B68     		ldr	r3, [r7]
 2918 007a 5B68     		ldr	r3, [r3, #4]
 2919 007c DA68     		ldr	r2, [r3, #12]
 2920 007e 094B     		ldr	r3, .L232+20
 2921 0080 1A60     		str	r2, [r3]
 2922              	.LBE11:
 2923 0082 054B     		ldr	r3, .L232+8
 2924 0084 7A68     		ldr	r2, [r7, #4]
 2925 0086 1A60     		str	r2, [r3]
 2926              	.L231:
 2927              	.LBE10:
 2928              		.loc 1 3083 0 is_stmt 1
 2929 0088 C046     		nop
 2930 008a BD46     		mov	sp, r7
 2931 008c 02B0     		add	sp, sp, #8
 2932              		@ sp needed
 2933 008e 80BD     		pop	{r7, pc}
 2934              	.L233:
 2935              		.align	2
 2936              	.L232:
 2937 0090 00010000 		.word	uxSchedulerSuspended
 2938 0094 EC000000 		.word	xYieldPending
 2939 0098 E0000000 		.word	uxTopReadyPriority
 2940 009c 00000000 		.word	x
 2941 00a0 04000000 		.word	pxReadyTasksLists
 2942 00a4 00000000 		.word	pxCurrentTCB
 2943              		.cfi_endproc
 2944              	.LFE24:
 2945              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2946              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2947              		.align	2
 2948              		.global	vTaskPlaceOnEventList
 2949              		.code	16
 2950              		.thumb_func
 2951              		.type	vTaskPlaceOnEventList, %function
 2952              	vTaskPlaceOnEventList:
 2953              	.LFB25:
3084:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3085:..\FreeRTOS\Source/tasks.c **** 
3086:..\FreeRTOS\Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3087:..\FreeRTOS\Source/tasks.c ****                             const TickType_t xTicksToWait )
3088:..\FreeRTOS\Source/tasks.c **** {
 2954              		.loc 1 3088 0
 2955              		.cfi_startproc
 2956              		@ args = 0, pretend = 0, frame = 8
 2957              		@ frame_needed = 1, uses_anonymous_args = 0
 2958 0000 80B5     		push	{r7, lr}
 2959              		.cfi_def_cfa_offset 8
 2960              		.cfi_offset 7, -8
 2961              		.cfi_offset 14, -4
 2962 0002 82B0     		sub	sp, sp, #8
 2963              		.cfi_def_cfa_offset 16
 2964 0004 00AF     		add	r7, sp, #0
 2965              		.cfi_def_cfa_register 7
 2966 0006 7860     		str	r0, [r7, #4]
 2967 0008 3960     		str	r1, [r7]
3089:..\FreeRTOS\Source/tasks.c ****     configASSERT( pxEventList );
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 108


 2968              		.loc 1 3089 0
 2969 000a 0C4B     		ldr	r3, .L237
 2970 000c 1B88     		ldrh	r3, [r3]
 2971 000e 002B     		cmp	r3, #0
 2972 0010 01D1     		bne	.L235
 2973              		.loc 1 3089 0 is_stmt 0 discriminator 1
 2974              		.syntax divided
 2975              	@ 3089 "..\FreeRTOS\Source\tasks.c" 1
 2976 0012 72B6     		 cpsid i 
 2977              	@ 0 "" 2
 2978              		.thumb
 2979              		.syntax unified
 2980              	.L236:
 2981 0014 FEE7     		b	.L236
 2982              	.L235:
3090:..\FreeRTOS\Source/tasks.c **** 
3091:..\FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3092:..\FreeRTOS\Source/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3093:..\FreeRTOS\Source/tasks.c **** 
3094:..\FreeRTOS\Source/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3095:..\FreeRTOS\Source/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3096:..\FreeRTOS\Source/tasks.c ****      * is the first to be woken by the event.  The queue that contains the event
3097:..\FreeRTOS\Source/tasks.c ****      * list is locked, preventing simultaneous access from interrupts. */
3098:..\FreeRTOS\Source/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2983              		.loc 1 3098 0 is_stmt 1
 2984 0016 0A4B     		ldr	r3, .L237+4
 2985 0018 1B68     		ldr	r3, [r3]
 2986 001a 1833     		adds	r3, r3, #24
 2987 001c 1A00     		movs	r2, r3
 2988 001e 7B68     		ldr	r3, [r7, #4]
 2989 0020 1100     		movs	r1, r2
 2990 0022 1800     		movs	r0, r3
 2991 0024 FFF7FEFF 		bl	vListInsert
3099:..\FreeRTOS\Source/tasks.c **** 
3100:..\FreeRTOS\Source/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2992              		.loc 1 3100 0
 2993 0028 3B68     		ldr	r3, [r7]
 2994 002a 0121     		movs	r1, #1
 2995 002c 1800     		movs	r0, r3
 2996 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3101:..\FreeRTOS\Source/tasks.c **** }
 2997              		.loc 1 3101 0
 2998 0032 C046     		nop
 2999 0034 BD46     		mov	sp, r7
 3000 0036 02B0     		add	sp, sp, #8
 3001              		@ sp needed
 3002 0038 80BD     		pop	{r7, pc}
 3003              	.L238:
 3004 003a C046     		.align	2
 3005              	.L237:
 3006 003c 00000000 		.word	x
 3007 0040 00000000 		.word	pxCurrentTCB
 3008              		.cfi_endproc
 3009              	.LFE25:
 3010              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 3011              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3012              		.align	2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 109


 3013              		.global	vTaskPlaceOnUnorderedEventList
 3014              		.code	16
 3015              		.thumb_func
 3016              		.type	vTaskPlaceOnUnorderedEventList, %function
 3017              	vTaskPlaceOnUnorderedEventList:
 3018              	.LFB26:
3102:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3103:..\FreeRTOS\Source/tasks.c **** 
3104:..\FreeRTOS\Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3105:..\FreeRTOS\Source/tasks.c ****                                      const TickType_t xItemValue,
3106:..\FreeRTOS\Source/tasks.c ****                                      const TickType_t xTicksToWait )
3107:..\FreeRTOS\Source/tasks.c **** {
 3019              		.loc 1 3107 0
 3020              		.cfi_startproc
 3021              		@ args = 0, pretend = 0, frame = 16
 3022              		@ frame_needed = 1, uses_anonymous_args = 0
 3023 0000 80B5     		push	{r7, lr}
 3024              		.cfi_def_cfa_offset 8
 3025              		.cfi_offset 7, -8
 3026              		.cfi_offset 14, -4
 3027 0002 84B0     		sub	sp, sp, #16
 3028              		.cfi_def_cfa_offset 24
 3029 0004 00AF     		add	r7, sp, #0
 3030              		.cfi_def_cfa_register 7
 3031 0006 F860     		str	r0, [r7, #12]
 3032 0008 B960     		str	r1, [r7, #8]
 3033 000a 7A60     		str	r2, [r7, #4]
3108:..\FreeRTOS\Source/tasks.c ****     configASSERT( pxEventList );
 3034              		.loc 1 3108 0
 3035 000c 134B     		ldr	r3, .L244
 3036 000e 1B88     		ldrh	r3, [r3]
 3037 0010 002B     		cmp	r3, #0
 3038 0012 01D1     		bne	.L240
 3039              		.loc 1 3108 0 is_stmt 0 discriminator 1
 3040              		.syntax divided
 3041              	@ 3108 "..\FreeRTOS\Source\tasks.c" 1
 3042 0014 72B6     		 cpsid i 
 3043              	@ 0 "" 2
 3044              		.thumb
 3045              		.syntax unified
 3046              	.L241:
 3047 0016 FEE7     		b	.L241
 3048              	.L240:
3109:..\FreeRTOS\Source/tasks.c **** 
3110:..\FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3111:..\FreeRTOS\Source/tasks.c ****      * the event groups implementation. */
3112:..\FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
 3049              		.loc 1 3112 0 is_stmt 1
 3050 0018 104B     		ldr	r3, .L244
 3051 001a 1B88     		ldrh	r3, [r3]
 3052 001c 002B     		cmp	r3, #0
 3053 001e 01D1     		bne	.L242
 3054              		.loc 1 3112 0 is_stmt 0 discriminator 1
 3055              		.syntax divided
 3056              	@ 3112 "..\FreeRTOS\Source\tasks.c" 1
 3057 0020 72B6     		 cpsid i 
 3058              	@ 0 "" 2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 110


 3059              		.thumb
 3060              		.syntax unified
 3061              	.L243:
 3062              		.loc 1 3112 0 discriminator 2
 3063 0022 FEE7     		b	.L243
 3064              	.L242:
 3065 0024 0E4B     		ldr	r3, .L244+4
 3066 0026 1B68     		ldr	r3, [r3]
3113:..\FreeRTOS\Source/tasks.c **** 
3114:..\FreeRTOS\Source/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3115:..\FreeRTOS\Source/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3116:..\FreeRTOS\Source/tasks.c ****      * task that is not in the Blocked state. */
3117:..\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
 3067              		.loc 1 3117 0 is_stmt 1 discriminator 2
 3068 0028 0E4B     		ldr	r3, .L244+8
 3069 002a 1B68     		ldr	r3, [r3]
 3070 002c BA68     		ldr	r2, [r7, #8]
 3071 002e 8021     		movs	r1, #128
 3072 0030 0906     		lsls	r1, r1, #24
 3073 0032 0A43     		orrs	r2, r1
 3074 0034 9A61     		str	r2, [r3, #24]
3118:..\FreeRTOS\Source/tasks.c **** 
3119:..\FreeRTOS\Source/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3120:..\FreeRTOS\Source/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3121:..\FreeRTOS\Source/tasks.c ****      * event group implementation - and interrupts don't access event groups
3122:..\FreeRTOS\Source/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3123:..\FreeRTOS\Source/tasks.c ****      * the task level). */
3124:..\FreeRTOS\Source/tasks.c ****     vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3075              		.loc 1 3124 0 discriminator 2
 3076 0036 0B4B     		ldr	r3, .L244+8
 3077 0038 1B68     		ldr	r3, [r3]
 3078 003a 1833     		adds	r3, r3, #24
 3079 003c 1A00     		movs	r2, r3
 3080 003e FB68     		ldr	r3, [r7, #12]
 3081 0040 1100     		movs	r1, r2
 3082 0042 1800     		movs	r0, r3
 3083 0044 FFF7FEFF 		bl	vListInsertEnd
3125:..\FreeRTOS\Source/tasks.c **** 
3126:..\FreeRTOS\Source/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3084              		.loc 1 3126 0 discriminator 2
 3085 0048 7B68     		ldr	r3, [r7, #4]
 3086 004a 0121     		movs	r1, #1
 3087 004c 1800     		movs	r0, r3
 3088 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3127:..\FreeRTOS\Source/tasks.c **** }
 3089              		.loc 1 3127 0 discriminator 2
 3090 0052 C046     		nop
 3091 0054 BD46     		mov	sp, r7
 3092 0056 04B0     		add	sp, sp, #16
 3093              		@ sp needed
 3094 0058 80BD     		pop	{r7, pc}
 3095              	.L245:
 3096 005a C046     		.align	2
 3097              	.L244:
 3098 005c 00000000 		.word	x
 3099 0060 00010000 		.word	uxSchedulerSuspended
 3100 0064 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 111


 3101              		.cfi_endproc
 3102              	.LFE26:
 3103              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 3104              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3105              		.align	2
 3106              		.global	vTaskPlaceOnEventListRestricted
 3107              		.code	16
 3108              		.thumb_func
 3109              		.type	vTaskPlaceOnEventListRestricted, %function
 3110              	vTaskPlaceOnEventListRestricted:
 3111              	.LFB27:
3128:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3129:..\FreeRTOS\Source/tasks.c **** 
3130:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TIMERS == 1 )
3131:..\FreeRTOS\Source/tasks.c **** 
3132:..\FreeRTOS\Source/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3133:..\FreeRTOS\Source/tasks.c ****                                           TickType_t xTicksToWait,
3134:..\FreeRTOS\Source/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3135:..\FreeRTOS\Source/tasks.c ****     {
 3112              		.loc 1 3135 0
 3113              		.cfi_startproc
 3114              		@ args = 0, pretend = 0, frame = 16
 3115              		@ frame_needed = 1, uses_anonymous_args = 0
 3116 0000 80B5     		push	{r7, lr}
 3117              		.cfi_def_cfa_offset 8
 3118              		.cfi_offset 7, -8
 3119              		.cfi_offset 14, -4
 3120 0002 84B0     		sub	sp, sp, #16
 3121              		.cfi_def_cfa_offset 24
 3122 0004 00AF     		add	r7, sp, #0
 3123              		.cfi_def_cfa_register 7
 3124 0006 F860     		str	r0, [r7, #12]
 3125 0008 B960     		str	r1, [r7, #8]
 3126 000a 7A60     		str	r2, [r7, #4]
3136:..\FreeRTOS\Source/tasks.c ****         configASSERT( pxEventList );
 3127              		.loc 1 3136 0
 3128 000c 0F4B     		ldr	r3, .L250
 3129 000e 1B88     		ldrh	r3, [r3]
 3130 0010 002B     		cmp	r3, #0
 3131 0012 01D1     		bne	.L247
 3132              		.loc 1 3136 0 is_stmt 0 discriminator 1
 3133              		.syntax divided
 3134              	@ 3136 "..\FreeRTOS\Source\tasks.c" 1
 3135 0014 72B6     		 cpsid i 
 3136              	@ 0 "" 2
 3137              		.thumb
 3138              		.syntax unified
 3139              	.L248:
 3140 0016 FEE7     		b	.L248
 3141              	.L247:
3137:..\FreeRTOS\Source/tasks.c **** 
3138:..\FreeRTOS\Source/tasks.c ****         /* This function should not be called by application code hence the
3139:..\FreeRTOS\Source/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3140:..\FreeRTOS\Source/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3141:..\FreeRTOS\Source/tasks.c ****          * it should be called with the scheduler suspended. */
3142:..\FreeRTOS\Source/tasks.c **** 
3143:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 112


3144:..\FreeRTOS\Source/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3145:..\FreeRTOS\Source/tasks.c ****          * In this case it is assume that this is the only task that is going to
3146:..\FreeRTOS\Source/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3147:..\FreeRTOS\Source/tasks.c ****          * can be used in place of vListInsert. */
3148:..\FreeRTOS\Source/tasks.c ****         vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3142              		.loc 1 3148 0 is_stmt 1
 3143 0018 0D4B     		ldr	r3, .L250+4
 3144 001a 1B68     		ldr	r3, [r3]
 3145 001c 1833     		adds	r3, r3, #24
 3146 001e 1A00     		movs	r2, r3
 3147 0020 FB68     		ldr	r3, [r7, #12]
 3148 0022 1100     		movs	r1, r2
 3149 0024 1800     		movs	r0, r3
 3150 0026 FFF7FEFF 		bl	vListInsertEnd
3149:..\FreeRTOS\Source/tasks.c **** 
3150:..\FreeRTOS\Source/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3151:..\FreeRTOS\Source/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3152:..\FreeRTOS\Source/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3153:..\FreeRTOS\Source/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
 3151              		.loc 1 3153 0
 3152 002a 7B68     		ldr	r3, [r7, #4]
 3153 002c 002B     		cmp	r3, #0
 3154 002e 02D0     		beq	.L249
3154:..\FreeRTOS\Source/tasks.c ****         {
3155:..\FreeRTOS\Source/tasks.c ****             xTicksToWait = portMAX_DELAY;
 3155              		.loc 1 3155 0
 3156 0030 0123     		movs	r3, #1
 3157 0032 5B42     		rsbs	r3, r3, #0
 3158 0034 BB60     		str	r3, [r7, #8]
 3159              	.L249:
3156:..\FreeRTOS\Source/tasks.c ****         }
3157:..\FreeRTOS\Source/tasks.c **** 
3158:..\FreeRTOS\Source/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3159:..\FreeRTOS\Source/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 3160              		.loc 1 3159 0
 3161 0036 7A68     		ldr	r2, [r7, #4]
 3162 0038 BB68     		ldr	r3, [r7, #8]
 3163 003a 1100     		movs	r1, r2
 3164 003c 1800     		movs	r0, r3
 3165 003e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3160:..\FreeRTOS\Source/tasks.c ****     }
 3166              		.loc 1 3160 0
 3167 0042 C046     		nop
 3168 0044 BD46     		mov	sp, r7
 3169 0046 04B0     		add	sp, sp, #16
 3170              		@ sp needed
 3171 0048 80BD     		pop	{r7, pc}
 3172              	.L251:
 3173 004a C046     		.align	2
 3174              	.L250:
 3175 004c 00000000 		.word	x
 3176 0050 00000000 		.word	pxCurrentTCB
 3177              		.cfi_endproc
 3178              	.LFE27:
 3179              		.size	vTaskPlaceOnEventListRestricted, .-vTaskPlaceOnEventListRestricted
 3180              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3181              		.align	2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 113


 3182              		.global	xTaskRemoveFromEventList
 3183              		.code	16
 3184              		.thumb_func
 3185              		.type	xTaskRemoveFromEventList, %function
 3186              	xTaskRemoveFromEventList:
 3187              	.LFB28:
3161:..\FreeRTOS\Source/tasks.c **** 
3162:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TIMERS */
3163:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3164:..\FreeRTOS\Source/tasks.c **** 
3165:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3166:..\FreeRTOS\Source/tasks.c **** {
 3188              		.loc 1 3166 0
 3189              		.cfi_startproc
 3190              		@ args = 0, pretend = 0, frame = 16
 3191              		@ frame_needed = 1, uses_anonymous_args = 0
 3192 0000 80B5     		push	{r7, lr}
 3193              		.cfi_def_cfa_offset 8
 3194              		.cfi_offset 7, -8
 3195              		.cfi_offset 14, -4
 3196 0002 84B0     		sub	sp, sp, #16
 3197              		.cfi_def_cfa_offset 24
 3198 0004 00AF     		add	r7, sp, #0
 3199              		.cfi_def_cfa_register 7
 3200 0006 7860     		str	r0, [r7, #4]
3167:..\FreeRTOS\Source/tasks.c ****     TCB_t * pxUnblockedTCB;
3168:..\FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
3169:..\FreeRTOS\Source/tasks.c **** 
3170:..\FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3171:..\FreeRTOS\Source/tasks.c ****      * called from a critical section within an ISR. */
3172:..\FreeRTOS\Source/tasks.c **** 
3173:..\FreeRTOS\Source/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3174:..\FreeRTOS\Source/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3175:..\FreeRTOS\Source/tasks.c ****      * the delayed list, and add it to the ready list.
3176:..\FreeRTOS\Source/tasks.c ****      *
3177:..\FreeRTOS\Source/tasks.c ****      * If an event is for a queue that is locked then this function will never
3178:..\FreeRTOS\Source/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3179:..\FreeRTOS\Source/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3180:..\FreeRTOS\Source/tasks.c ****      *
3181:..\FreeRTOS\Source/tasks.c ****      * This function assumes that a check has already been made to ensure that
3182:..\FreeRTOS\Source/tasks.c ****      * pxEventList is not empty. */
3183:..\FreeRTOS\Source/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
 3201              		.loc 1 3183 0
 3202 0008 7B68     		ldr	r3, [r7, #4]
 3203 000a DB68     		ldr	r3, [r3, #12]
 3204 000c DB68     		ldr	r3, [r3, #12]
 3205 000e BB60     		str	r3, [r7, #8]
3184:..\FreeRTOS\Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 3206              		.loc 1 3184 0
 3207 0010 244B     		ldr	r3, .L261
 3208 0012 1B88     		ldrh	r3, [r3]
 3209 0014 002B     		cmp	r3, #0
 3210 0016 01D1     		bne	.L253
 3211              		.loc 1 3184 0 is_stmt 0 discriminator 1
 3212              		.syntax divided
 3213              	@ 3184 "..\FreeRTOS\Source\tasks.c" 1
 3214 0018 72B6     		 cpsid i 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 114


 3215              	@ 0 "" 2
 3216              		.thumb
 3217              		.syntax unified
 3218              	.L254:
 3219 001a FEE7     		b	.L254
 3220              	.L253:
3185:..\FreeRTOS\Source/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3221              		.loc 1 3185 0 is_stmt 1
 3222 001c BB68     		ldr	r3, [r7, #8]
 3223 001e 1833     		adds	r3, r3, #24
 3224 0020 1800     		movs	r0, r3
 3225 0022 FFF7FEFF 		bl	uxListRemove
3186:..\FreeRTOS\Source/tasks.c **** 
3187:..\FreeRTOS\Source/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3226              		.loc 1 3187 0
 3227 0026 204B     		ldr	r3, .L261+4
 3228 0028 1B68     		ldr	r3, [r3]
 3229 002a 002B     		cmp	r3, #0
 3230 002c 1DD1     		bne	.L255
3188:..\FreeRTOS\Source/tasks.c ****     {
3189:..\FreeRTOS\Source/tasks.c ****         ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3231              		.loc 1 3189 0
 3232 002e BB68     		ldr	r3, [r7, #8]
 3233 0030 0433     		adds	r3, r3, #4
 3234 0032 1800     		movs	r0, r3
 3235 0034 FFF7FEFF 		bl	uxListRemove
3190:..\FreeRTOS\Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3236              		.loc 1 3190 0
 3237 0038 BB68     		ldr	r3, [r7, #8]
 3238 003a DA6A     		ldr	r2, [r3, #44]
 3239 003c 1B4B     		ldr	r3, .L261+8
 3240 003e 1B68     		ldr	r3, [r3]
 3241 0040 9A42     		cmp	r2, r3
 3242 0042 03D9     		bls	.L256
 3243              		.loc 1 3190 0 is_stmt 0 discriminator 1
 3244 0044 BB68     		ldr	r3, [r7, #8]
 3245 0046 DA6A     		ldr	r2, [r3, #44]
 3246 0048 184B     		ldr	r3, .L261+8
 3247 004a 1A60     		str	r2, [r3]
 3248              	.L256:
 3249              		.loc 1 3190 0 discriminator 3
 3250 004c BB68     		ldr	r3, [r7, #8]
 3251 004e DA6A     		ldr	r2, [r3, #44]
 3252 0050 1300     		movs	r3, r2
 3253 0052 9B00     		lsls	r3, r3, #2
 3254 0054 9B18     		adds	r3, r3, r2
 3255 0056 9B00     		lsls	r3, r3, #2
 3256 0058 154A     		ldr	r2, .L261+12
 3257 005a 9A18     		adds	r2, r3, r2
 3258 005c BB68     		ldr	r3, [r7, #8]
 3259 005e 0433     		adds	r3, r3, #4
 3260 0060 1900     		movs	r1, r3
 3261 0062 1000     		movs	r0, r2
 3262 0064 FFF7FEFF 		bl	vListInsertEnd
 3263 0068 07E0     		b	.L257
 3264              	.L255:
3191:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 115


3192:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3193:..\FreeRTOS\Source/tasks.c ****             {
3194:..\FreeRTOS\Source/tasks.c ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3195:..\FreeRTOS\Source/tasks.c ****                  * might be set to the blocked task's time out time.  If the task is
3196:..\FreeRTOS\Source/tasks.c ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3197:..\FreeRTOS\Source/tasks.c ****                  * normally left unchanged, because it is automatically reset to a new
3198:..\FreeRTOS\Source/tasks.c ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3199:..\FreeRTOS\Source/tasks.c ****                  * tickless idling is used it might be more important to enter sleep mode
3200:..\FreeRTOS\Source/tasks.c ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
3201:..\FreeRTOS\Source/tasks.c ****                  * ensure it is updated at the earliest possible time. */
3202:..\FreeRTOS\Source/tasks.c ****                 prvResetNextTaskUnblockTime();
3203:..\FreeRTOS\Source/tasks.c ****             }
3204:..\FreeRTOS\Source/tasks.c ****         #endif
3205:..\FreeRTOS\Source/tasks.c ****     }
3206:..\FreeRTOS\Source/tasks.c ****     else
3207:..\FreeRTOS\Source/tasks.c ****     {
3208:..\FreeRTOS\Source/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3209:..\FreeRTOS\Source/tasks.c ****          * pending until the scheduler is resumed. */
3210:..\FreeRTOS\Source/tasks.c ****         vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3265              		.loc 1 3210 0 is_stmt 1
 3266 006a BB68     		ldr	r3, [r7, #8]
 3267 006c 1833     		adds	r3, r3, #24
 3268 006e 1A00     		movs	r2, r3
 3269 0070 104B     		ldr	r3, .L261+16
 3270 0072 1100     		movs	r1, r2
 3271 0074 1800     		movs	r0, r3
 3272 0076 FFF7FEFF 		bl	vListInsertEnd
 3273              	.L257:
3211:..\FreeRTOS\Source/tasks.c ****     }
3212:..\FreeRTOS\Source/tasks.c **** 
3213:..\FreeRTOS\Source/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3274              		.loc 1 3213 0
 3275 007a BB68     		ldr	r3, [r7, #8]
 3276 007c DA6A     		ldr	r2, [r3, #44]
 3277 007e 0E4B     		ldr	r3, .L261+20
 3278 0080 1B68     		ldr	r3, [r3]
 3279 0082 DB6A     		ldr	r3, [r3, #44]
 3280 0084 9A42     		cmp	r2, r3
 3281 0086 05D9     		bls	.L258
3214:..\FreeRTOS\Source/tasks.c ****     {
3215:..\FreeRTOS\Source/tasks.c ****         /* Return true if the task removed from the event list has a higher
3216:..\FreeRTOS\Source/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3217:..\FreeRTOS\Source/tasks.c ****          * it should force a context switch now. */
3218:..\FreeRTOS\Source/tasks.c ****         xReturn = pdTRUE;
 3282              		.loc 1 3218 0
 3283 0088 0123     		movs	r3, #1
 3284 008a FB60     		str	r3, [r7, #12]
3219:..\FreeRTOS\Source/tasks.c **** 
3220:..\FreeRTOS\Source/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3221:..\FreeRTOS\Source/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3222:..\FreeRTOS\Source/tasks.c ****         xYieldPending = pdTRUE;
 3285              		.loc 1 3222 0
 3286 008c 0B4B     		ldr	r3, .L261+24
 3287 008e 0122     		movs	r2, #1
 3288 0090 1A60     		str	r2, [r3]
 3289 0092 01E0     		b	.L259
 3290              	.L258:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 116


3223:..\FreeRTOS\Source/tasks.c ****     }
3224:..\FreeRTOS\Source/tasks.c ****     else
3225:..\FreeRTOS\Source/tasks.c ****     {
3226:..\FreeRTOS\Source/tasks.c ****         xReturn = pdFALSE;
 3291              		.loc 1 3226 0
 3292 0094 0023     		movs	r3, #0
 3293 0096 FB60     		str	r3, [r7, #12]
 3294              	.L259:
3227:..\FreeRTOS\Source/tasks.c ****     }
3228:..\FreeRTOS\Source/tasks.c **** 
3229:..\FreeRTOS\Source/tasks.c ****     return xReturn;
 3295              		.loc 1 3229 0
 3296 0098 FB68     		ldr	r3, [r7, #12]
3230:..\FreeRTOS\Source/tasks.c **** }
 3297              		.loc 1 3230 0
 3298 009a 1800     		movs	r0, r3
 3299 009c BD46     		mov	sp, r7
 3300 009e 04B0     		add	sp, sp, #16
 3301              		@ sp needed
 3302 00a0 80BD     		pop	{r7, pc}
 3303              	.L262:
 3304 00a2 C046     		.align	2
 3305              	.L261:
 3306 00a4 00000000 		.word	x
 3307 00a8 00010000 		.word	uxSchedulerSuspended
 3308 00ac E0000000 		.word	uxTopReadyPriority
 3309 00b0 04000000 		.word	pxReadyTasksLists
 3310 00b4 98000000 		.word	xPendingReadyList
 3311 00b8 00000000 		.word	pxCurrentTCB
 3312 00bc EC000000 		.word	xYieldPending
 3313              		.cfi_endproc
 3314              	.LFE28:
 3315              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3316              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3317              		.align	2
 3318              		.global	vTaskRemoveFromUnorderedEventList
 3319              		.code	16
 3320              		.thumb_func
 3321              		.type	vTaskRemoveFromUnorderedEventList, %function
 3322              	vTaskRemoveFromUnorderedEventList:
 3323              	.LFB29:
3231:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3232:..\FreeRTOS\Source/tasks.c **** 
3233:..\FreeRTOS\Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3234:..\FreeRTOS\Source/tasks.c ****                                         const TickType_t xItemValue )
3235:..\FreeRTOS\Source/tasks.c **** {
 3324              		.loc 1 3235 0
 3325              		.cfi_startproc
 3326              		@ args = 0, pretend = 0, frame = 16
 3327              		@ frame_needed = 1, uses_anonymous_args = 0
 3328 0000 80B5     		push	{r7, lr}
 3329              		.cfi_def_cfa_offset 8
 3330              		.cfi_offset 7, -8
 3331              		.cfi_offset 14, -4
 3332 0002 84B0     		sub	sp, sp, #16
 3333              		.cfi_def_cfa_offset 24
 3334 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 117


 3335              		.cfi_def_cfa_register 7
 3336 0006 7860     		str	r0, [r7, #4]
 3337 0008 3960     		str	r1, [r7]
3236:..\FreeRTOS\Source/tasks.c ****     TCB_t * pxUnblockedTCB;
3237:..\FreeRTOS\Source/tasks.c **** 
3238:..\FreeRTOS\Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3239:..\FreeRTOS\Source/tasks.c ****      * the event flags implementation. */
3240:..\FreeRTOS\Source/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
 3338              		.loc 1 3240 0
 3339 000a 234B     		ldr	r3, .L271
 3340 000c 1B88     		ldrh	r3, [r3]
 3341 000e 002B     		cmp	r3, #0
 3342 0010 01D1     		bne	.L264
 3343              		.loc 1 3240 0 is_stmt 0 discriminator 1
 3344              		.syntax divided
 3345              	@ 3240 "..\FreeRTOS\Source\tasks.c" 1
 3346 0012 72B6     		 cpsid i 
 3347              	@ 0 "" 2
 3348              		.thumb
 3349              		.syntax unified
 3350              	.L265:
 3351 0014 FEE7     		b	.L265
 3352              	.L264:
 3353              		.loc 1 3240 0 discriminator 2
 3354 0016 214B     		ldr	r3, .L271+4
 3355 0018 1B68     		ldr	r3, [r3]
3241:..\FreeRTOS\Source/tasks.c **** 
3242:..\FreeRTOS\Source/tasks.c ****     /* Store the new item value in the event list. */
3243:..\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3356              		.loc 1 3243 0 is_stmt 1 discriminator 2
 3357 001a 3B68     		ldr	r3, [r7]
 3358 001c 8022     		movs	r2, #128
 3359 001e 1206     		lsls	r2, r2, #24
 3360 0020 1A43     		orrs	r2, r3
 3361 0022 7B68     		ldr	r3, [r7, #4]
 3362 0024 1A60     		str	r2, [r3]
3244:..\FreeRTOS\Source/tasks.c **** 
3245:..\FreeRTOS\Source/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3246:..\FreeRTOS\Source/tasks.c ****      * event flags. */
3247:..\FreeRTOS\Source/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
 3363              		.loc 1 3247 0 discriminator 2
 3364 0026 7B68     		ldr	r3, [r7, #4]
 3365 0028 DB68     		ldr	r3, [r3, #12]
 3366 002a FB60     		str	r3, [r7, #12]
3248:..\FreeRTOS\Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 3367              		.loc 1 3248 0 discriminator 2
 3368 002c 1A4B     		ldr	r3, .L271
 3369 002e 1B88     		ldrh	r3, [r3]
 3370 0030 002B     		cmp	r3, #0
 3371 0032 01D1     		bne	.L266
 3372              		.loc 1 3248 0 is_stmt 0 discriminator 1
 3373              		.syntax divided
 3374              	@ 3248 "..\FreeRTOS\Source\tasks.c" 1
 3375 0034 72B6     		 cpsid i 
 3376              	@ 0 "" 2
 3377              		.thumb
 3378              		.syntax unified
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 118


 3379              	.L267:
 3380              		.loc 1 3248 0 discriminator 2
 3381 0036 FEE7     		b	.L267
 3382              	.L266:
3249:..\FreeRTOS\Source/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 3383              		.loc 1 3249 0 is_stmt 1
 3384 0038 7B68     		ldr	r3, [r7, #4]
 3385 003a 1800     		movs	r0, r3
 3386 003c FFF7FEFF 		bl	uxListRemove
3250:..\FreeRTOS\Source/tasks.c **** 
3251:..\FreeRTOS\Source/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3252:..\FreeRTOS\Source/tasks.c ****         {
3253:..\FreeRTOS\Source/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3254:..\FreeRTOS\Source/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3255:..\FreeRTOS\Source/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3256:..\FreeRTOS\Source/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3257:..\FreeRTOS\Source/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3258:..\FreeRTOS\Source/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3259:..\FreeRTOS\Source/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3260:..\FreeRTOS\Source/tasks.c ****              * ensure it is updated at the earliest possible time. */
3261:..\FreeRTOS\Source/tasks.c ****             prvResetNextTaskUnblockTime();
3262:..\FreeRTOS\Source/tasks.c ****         }
3263:..\FreeRTOS\Source/tasks.c ****     #endif
3264:..\FreeRTOS\Source/tasks.c **** 
3265:..\FreeRTOS\Source/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3266:..\FreeRTOS\Source/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3267:..\FreeRTOS\Source/tasks.c ****      * lists. */
3268:..\FreeRTOS\Source/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3387              		.loc 1 3268 0
 3388 0040 FB68     		ldr	r3, [r7, #12]
 3389 0042 0433     		adds	r3, r3, #4
 3390 0044 1800     		movs	r0, r3
 3391 0046 FFF7FEFF 		bl	uxListRemove
3269:..\FreeRTOS\Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 3392              		.loc 1 3269 0
 3393 004a FB68     		ldr	r3, [r7, #12]
 3394 004c DA6A     		ldr	r2, [r3, #44]
 3395 004e 144B     		ldr	r3, .L271+8
 3396 0050 1B68     		ldr	r3, [r3]
 3397 0052 9A42     		cmp	r2, r3
 3398 0054 03D9     		bls	.L268
 3399              		.loc 1 3269 0 is_stmt 0 discriminator 1
 3400 0056 FB68     		ldr	r3, [r7, #12]
 3401 0058 DA6A     		ldr	r2, [r3, #44]
 3402 005a 114B     		ldr	r3, .L271+8
 3403 005c 1A60     		str	r2, [r3]
 3404              	.L268:
 3405              		.loc 1 3269 0 discriminator 3
 3406 005e FB68     		ldr	r3, [r7, #12]
 3407 0060 DA6A     		ldr	r2, [r3, #44]
 3408 0062 1300     		movs	r3, r2
 3409 0064 9B00     		lsls	r3, r3, #2
 3410 0066 9B18     		adds	r3, r3, r2
 3411 0068 9B00     		lsls	r3, r3, #2
 3412 006a 0E4A     		ldr	r2, .L271+12
 3413 006c 9A18     		adds	r2, r3, r2
 3414 006e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 119


 3415 0070 0433     		adds	r3, r3, #4
 3416 0072 1900     		movs	r1, r3
 3417 0074 1000     		movs	r0, r2
 3418 0076 FFF7FEFF 		bl	vListInsertEnd
3270:..\FreeRTOS\Source/tasks.c **** 
3271:..\FreeRTOS\Source/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3419              		.loc 1 3271 0 is_stmt 1 discriminator 3
 3420 007a FB68     		ldr	r3, [r7, #12]
 3421 007c DA6A     		ldr	r2, [r3, #44]
 3422 007e 0A4B     		ldr	r3, .L271+16
 3423 0080 1B68     		ldr	r3, [r3]
 3424 0082 DB6A     		ldr	r3, [r3, #44]
 3425 0084 9A42     		cmp	r2, r3
 3426 0086 02D9     		bls	.L270
3272:..\FreeRTOS\Source/tasks.c ****     {
3273:..\FreeRTOS\Source/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3274:..\FreeRTOS\Source/tasks.c ****          * a context switch is required.  This function is called with the
3275:..\FreeRTOS\Source/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3276:..\FreeRTOS\Source/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3277:..\FreeRTOS\Source/tasks.c ****         xYieldPending = pdTRUE;
 3427              		.loc 1 3277 0
 3428 0088 084B     		ldr	r3, .L271+20
 3429 008a 0122     		movs	r2, #1
 3430 008c 1A60     		str	r2, [r3]
 3431              	.L270:
3278:..\FreeRTOS\Source/tasks.c ****     }
3279:..\FreeRTOS\Source/tasks.c **** }
 3432              		.loc 1 3279 0
 3433 008e C046     		nop
 3434 0090 BD46     		mov	sp, r7
 3435 0092 04B0     		add	sp, sp, #16
 3436              		@ sp needed
 3437 0094 80BD     		pop	{r7, pc}
 3438              	.L272:
 3439 0096 C046     		.align	2
 3440              	.L271:
 3441 0098 00000000 		.word	x
 3442 009c 00010000 		.word	uxSchedulerSuspended
 3443 00a0 E0000000 		.word	uxTopReadyPriority
 3444 00a4 04000000 		.word	pxReadyTasksLists
 3445 00a8 00000000 		.word	pxCurrentTCB
 3446 00ac EC000000 		.word	xYieldPending
 3447              		.cfi_endproc
 3448              	.LFE29:
 3449              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3450              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3451              		.align	2
 3452              		.global	vTaskSetTimeOutState
 3453              		.code	16
 3454              		.thumb_func
 3455              		.type	vTaskSetTimeOutState, %function
 3456              	vTaskSetTimeOutState:
 3457              	.LFB30:
3280:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3281:..\FreeRTOS\Source/tasks.c **** 
3282:..\FreeRTOS\Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3283:..\FreeRTOS\Source/tasks.c **** {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 120


 3458              		.loc 1 3283 0
 3459              		.cfi_startproc
 3460              		@ args = 0, pretend = 0, frame = 8
 3461              		@ frame_needed = 1, uses_anonymous_args = 0
 3462 0000 80B5     		push	{r7, lr}
 3463              		.cfi_def_cfa_offset 8
 3464              		.cfi_offset 7, -8
 3465              		.cfi_offset 14, -4
 3466 0002 82B0     		sub	sp, sp, #8
 3467              		.cfi_def_cfa_offset 16
 3468 0004 00AF     		add	r7, sp, #0
 3469              		.cfi_def_cfa_register 7
 3470 0006 7860     		str	r0, [r7, #4]
3284:..\FreeRTOS\Source/tasks.c ****     configASSERT( pxTimeOut );
 3471              		.loc 1 3284 0
 3472 0008 0A4B     		ldr	r3, .L276
 3473 000a 1B88     		ldrh	r3, [r3]
 3474 000c 002B     		cmp	r3, #0
 3475 000e 01D1     		bne	.L274
 3476              		.loc 1 3284 0 is_stmt 0 discriminator 1
 3477              		.syntax divided
 3478              	@ 3284 "..\FreeRTOS\Source\tasks.c" 1
 3479 0010 72B6     		 cpsid i 
 3480              	@ 0 "" 2
 3481              		.thumb
 3482              		.syntax unified
 3483              	.L275:
 3484 0012 FEE7     		b	.L275
 3485              	.L274:
3285:..\FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
 3486              		.loc 1 3285 0 is_stmt 1
 3487 0014 FFF7FEFF 		bl	vPortEnterCritical
3286:..\FreeRTOS\Source/tasks.c ****     {
3287:..\FreeRTOS\Source/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
 3488              		.loc 1 3287 0
 3489 0018 074B     		ldr	r3, .L276+4
 3490 001a 1A68     		ldr	r2, [r3]
 3491 001c 7B68     		ldr	r3, [r7, #4]
 3492 001e 1A60     		str	r2, [r3]
3288:..\FreeRTOS\Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 3493              		.loc 1 3288 0
 3494 0020 064B     		ldr	r3, .L276+8
 3495 0022 1A68     		ldr	r2, [r3]
 3496 0024 7B68     		ldr	r3, [r7, #4]
 3497 0026 5A60     		str	r2, [r3, #4]
3289:..\FreeRTOS\Source/tasks.c ****     }
3290:..\FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
 3498              		.loc 1 3290 0
 3499 0028 FFF7FEFF 		bl	vPortExitCritical
3291:..\FreeRTOS\Source/tasks.c **** }
 3500              		.loc 1 3291 0
 3501 002c C046     		nop
 3502 002e BD46     		mov	sp, r7
 3503 0030 02B0     		add	sp, sp, #8
 3504              		@ sp needed
 3505 0032 80BD     		pop	{r7, pc}
 3506              	.L277:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 121


 3507              		.align	2
 3508              	.L276:
 3509 0034 00000000 		.word	x
 3510 0038 F0000000 		.word	xNumOfOverflows
 3511 003c DC000000 		.word	xTickCount
 3512              		.cfi_endproc
 3513              	.LFE30:
 3514              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3515              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3516              		.align	2
 3517              		.global	vTaskInternalSetTimeOutState
 3518              		.code	16
 3519              		.thumb_func
 3520              		.type	vTaskInternalSetTimeOutState, %function
 3521              	vTaskInternalSetTimeOutState:
 3522              	.LFB31:
3292:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3293:..\FreeRTOS\Source/tasks.c **** 
3294:..\FreeRTOS\Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3295:..\FreeRTOS\Source/tasks.c **** {
 3523              		.loc 1 3295 0
 3524              		.cfi_startproc
 3525              		@ args = 0, pretend = 0, frame = 8
 3526              		@ frame_needed = 1, uses_anonymous_args = 0
 3527 0000 80B5     		push	{r7, lr}
 3528              		.cfi_def_cfa_offset 8
 3529              		.cfi_offset 7, -8
 3530              		.cfi_offset 14, -4
 3531 0002 82B0     		sub	sp, sp, #8
 3532              		.cfi_def_cfa_offset 16
 3533 0004 00AF     		add	r7, sp, #0
 3534              		.cfi_def_cfa_register 7
 3535 0006 7860     		str	r0, [r7, #4]
3296:..\FreeRTOS\Source/tasks.c ****     /* For internal use only as it does not use a critical section. */
3297:..\FreeRTOS\Source/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
 3536              		.loc 1 3297 0
 3537 0008 054B     		ldr	r3, .L279
 3538 000a 1A68     		ldr	r2, [r3]
 3539 000c 7B68     		ldr	r3, [r7, #4]
 3540 000e 1A60     		str	r2, [r3]
3298:..\FreeRTOS\Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 3541              		.loc 1 3298 0
 3542 0010 044B     		ldr	r3, .L279+4
 3543 0012 1A68     		ldr	r2, [r3]
 3544 0014 7B68     		ldr	r3, [r7, #4]
 3545 0016 5A60     		str	r2, [r3, #4]
3299:..\FreeRTOS\Source/tasks.c **** }
 3546              		.loc 1 3299 0
 3547 0018 C046     		nop
 3548 001a BD46     		mov	sp, r7
 3549 001c 02B0     		add	sp, sp, #8
 3550              		@ sp needed
 3551 001e 80BD     		pop	{r7, pc}
 3552              	.L280:
 3553              		.align	2
 3554              	.L279:
 3555 0020 F0000000 		.word	xNumOfOverflows
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 122


 3556 0024 DC000000 		.word	xTickCount
 3557              		.cfi_endproc
 3558              	.LFE31:
 3559              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3560              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3561              		.align	2
 3562              		.global	xTaskCheckForTimeOut
 3563              		.code	16
 3564              		.thumb_func
 3565              		.type	xTaskCheckForTimeOut, %function
 3566              	xTaskCheckForTimeOut:
 3567              	.LFB32:
3300:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3301:..\FreeRTOS\Source/tasks.c **** 
3302:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3303:..\FreeRTOS\Source/tasks.c ****                                  TickType_t * const pxTicksToWait )
3304:..\FreeRTOS\Source/tasks.c **** {
 3568              		.loc 1 3304 0
 3569              		.cfi_startproc
 3570              		@ args = 0, pretend = 0, frame = 24
 3571              		@ frame_needed = 1, uses_anonymous_args = 0
 3572 0000 80B5     		push	{r7, lr}
 3573              		.cfi_def_cfa_offset 8
 3574              		.cfi_offset 7, -8
 3575              		.cfi_offset 14, -4
 3576 0002 86B0     		sub	sp, sp, #24
 3577              		.cfi_def_cfa_offset 32
 3578 0004 00AF     		add	r7, sp, #0
 3579              		.cfi_def_cfa_register 7
 3580 0006 7860     		str	r0, [r7, #4]
 3581 0008 3960     		str	r1, [r7]
3305:..\FreeRTOS\Source/tasks.c ****     BaseType_t xReturn;
3306:..\FreeRTOS\Source/tasks.c **** 
3307:..\FreeRTOS\Source/tasks.c ****     configASSERT( pxTimeOut );
 3582              		.loc 1 3307 0
 3583 000a 264B     		ldr	r3, .L291
 3584 000c 1B88     		ldrh	r3, [r3]
 3585 000e 002B     		cmp	r3, #0
 3586 0010 01D1     		bne	.L282
 3587              		.loc 1 3307 0 is_stmt 0 discriminator 1
 3588              		.syntax divided
 3589              	@ 3307 "..\FreeRTOS\Source\tasks.c" 1
 3590 0012 72B6     		 cpsid i 
 3591              	@ 0 "" 2
 3592              		.thumb
 3593              		.syntax unified
 3594              	.L283:
 3595 0014 FEE7     		b	.L283
 3596              	.L282:
3308:..\FreeRTOS\Source/tasks.c ****     configASSERT( pxTicksToWait );
 3597              		.loc 1 3308 0 is_stmt 1
 3598 0016 234B     		ldr	r3, .L291
 3599 0018 1B88     		ldrh	r3, [r3]
 3600 001a 002B     		cmp	r3, #0
 3601 001c 01D1     		bne	.L284
 3602              		.loc 1 3308 0 is_stmt 0 discriminator 1
 3603              		.syntax divided
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 123


 3604              	@ 3308 "..\FreeRTOS\Source\tasks.c" 1
 3605 001e 72B6     		 cpsid i 
 3606              	@ 0 "" 2
 3607              		.thumb
 3608              		.syntax unified
 3609              	.L285:
 3610              		.loc 1 3308 0 discriminator 2
 3611 0020 FEE7     		b	.L285
 3612              	.L284:
3309:..\FreeRTOS\Source/tasks.c **** 
3310:..\FreeRTOS\Source/tasks.c ****     taskENTER_CRITICAL();
 3613              		.loc 1 3310 0 is_stmt 1
 3614 0022 FFF7FEFF 		bl	vPortEnterCritical
 3615              	.LBB12:
3311:..\FreeRTOS\Source/tasks.c ****     {
3312:..\FreeRTOS\Source/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3313:..\FreeRTOS\Source/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
 3616              		.loc 1 3313 0
 3617 0026 204B     		ldr	r3, .L291+4
 3618 0028 1B68     		ldr	r3, [r3]
 3619 002a 3B61     		str	r3, [r7, #16]
3314:..\FreeRTOS\Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3620              		.loc 1 3314 0
 3621 002c 7B68     		ldr	r3, [r7, #4]
 3622 002e 5B68     		ldr	r3, [r3, #4]
 3623 0030 3A69     		ldr	r2, [r7, #16]
 3624 0032 D31A     		subs	r3, r2, r3
 3625 0034 FB60     		str	r3, [r7, #12]
3315:..\FreeRTOS\Source/tasks.c **** 
3316:..\FreeRTOS\Source/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3317:..\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3318:..\FreeRTOS\Source/tasks.c ****             {
3319:..\FreeRTOS\Source/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3320:..\FreeRTOS\Source/tasks.c ****                  * but has the same result. */
3321:..\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3322:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
3323:..\FreeRTOS\Source/tasks.c ****             }
3324:..\FreeRTOS\Source/tasks.c ****             else
3325:..\FreeRTOS\Source/tasks.c ****         #endif
3326:..\FreeRTOS\Source/tasks.c **** 
3327:..\FreeRTOS\Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3328:..\FreeRTOS\Source/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
 3626              		.loc 1 3328 0
 3627 0036 3B68     		ldr	r3, [r7]
 3628 0038 1B68     		ldr	r3, [r3]
 3629 003a 0133     		adds	r3, r3, #1
 3630 003c 02D1     		bne	.L286
3329:..\FreeRTOS\Source/tasks.c ****             {
3330:..\FreeRTOS\Source/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3331:..\FreeRTOS\Source/tasks.c ****                  * specified is the maximum block time then the task should block
3332:..\FreeRTOS\Source/tasks.c ****                  * indefinitely, and therefore never time out. */
3333:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdFALSE;
 3631              		.loc 1 3333 0
 3632 003e 0023     		movs	r3, #0
 3633 0040 7B61     		str	r3, [r7, #20]
 3634 0042 27E0     		b	.L287
 3635              	.L286:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 124


3334:..\FreeRTOS\Source/tasks.c ****             }
3335:..\FreeRTOS\Source/tasks.c ****             else
3336:..\FreeRTOS\Source/tasks.c ****         #endif
3337:..\FreeRTOS\Source/tasks.c **** 
3338:..\FreeRTOS\Source/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
 3636              		.loc 1 3338 0
 3637 0044 7B68     		ldr	r3, [r7, #4]
 3638 0046 1A68     		ldr	r2, [r3]
 3639 0048 184B     		ldr	r3, .L291+8
 3640 004a 1B68     		ldr	r3, [r3]
 3641 004c 9A42     		cmp	r2, r3
 3642 004e 0AD0     		beq	.L288
 3643              		.loc 1 3338 0 is_stmt 0 discriminator 1
 3644 0050 7B68     		ldr	r3, [r7, #4]
 3645 0052 5A68     		ldr	r2, [r3, #4]
 3646 0054 3B69     		ldr	r3, [r7, #16]
 3647 0056 9A42     		cmp	r2, r3
 3648 0058 05D8     		bhi	.L288
3339:..\FreeRTOS\Source/tasks.c ****         {
3340:..\FreeRTOS\Source/tasks.c ****             /* The tick count is greater than the time at which
3341:..\FreeRTOS\Source/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3342:..\FreeRTOS\Source/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3343:..\FreeRTOS\Source/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3344:..\FreeRTOS\Source/tasks.c ****              * was called. */
3345:..\FreeRTOS\Source/tasks.c ****             xReturn = pdTRUE;
 3649              		.loc 1 3345 0 is_stmt 1
 3650 005a 0123     		movs	r3, #1
 3651 005c 7B61     		str	r3, [r7, #20]
3346:..\FreeRTOS\Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 3652              		.loc 1 3346 0
 3653 005e 3B68     		ldr	r3, [r7]
 3654 0060 0022     		movs	r2, #0
 3655 0062 1A60     		str	r2, [r3]
 3656 0064 16E0     		b	.L287
 3657              	.L288:
3347:..\FreeRTOS\Source/tasks.c ****         }
3348:..\FreeRTOS\Source/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
 3658              		.loc 1 3348 0
 3659 0066 3B68     		ldr	r3, [r7]
 3660 0068 1A68     		ldr	r2, [r3]
 3661 006a FB68     		ldr	r3, [r7, #12]
 3662 006c 9A42     		cmp	r2, r3
 3663 006e 0CD9     		bls	.L289
3349:..\FreeRTOS\Source/tasks.c ****         {
3350:..\FreeRTOS\Source/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3351:..\FreeRTOS\Source/tasks.c ****             *pxTicksToWait -= xElapsedTime;
 3664              		.loc 1 3351 0
 3665 0070 3B68     		ldr	r3, [r7]
 3666 0072 1A68     		ldr	r2, [r3]
 3667 0074 FB68     		ldr	r3, [r7, #12]
 3668 0076 D21A     		subs	r2, r2, r3
 3669 0078 3B68     		ldr	r3, [r7]
 3670 007a 1A60     		str	r2, [r3]
3352:..\FreeRTOS\Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 3671              		.loc 1 3352 0
 3672 007c 7B68     		ldr	r3, [r7, #4]
 3673 007e 1800     		movs	r0, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 125


 3674 0080 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3353:..\FreeRTOS\Source/tasks.c ****             xReturn = pdFALSE;
 3675              		.loc 1 3353 0
 3676 0084 0023     		movs	r3, #0
 3677 0086 7B61     		str	r3, [r7, #20]
 3678 0088 04E0     		b	.L287
 3679              	.L289:
3354:..\FreeRTOS\Source/tasks.c ****         }
3355:..\FreeRTOS\Source/tasks.c ****         else
3356:..\FreeRTOS\Source/tasks.c ****         {
3357:..\FreeRTOS\Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 3680              		.loc 1 3357 0
 3681 008a 3B68     		ldr	r3, [r7]
 3682 008c 0022     		movs	r2, #0
 3683 008e 1A60     		str	r2, [r3]
3358:..\FreeRTOS\Source/tasks.c ****             xReturn = pdTRUE;
 3684              		.loc 1 3358 0
 3685 0090 0123     		movs	r3, #1
 3686 0092 7B61     		str	r3, [r7, #20]
 3687              	.L287:
 3688              	.LBE12:
3359:..\FreeRTOS\Source/tasks.c ****         }
3360:..\FreeRTOS\Source/tasks.c ****     }
3361:..\FreeRTOS\Source/tasks.c ****     taskEXIT_CRITICAL();
 3689              		.loc 1 3361 0
 3690 0094 FFF7FEFF 		bl	vPortExitCritical
3362:..\FreeRTOS\Source/tasks.c **** 
3363:..\FreeRTOS\Source/tasks.c ****     return xReturn;
 3691              		.loc 1 3363 0
 3692 0098 7B69     		ldr	r3, [r7, #20]
3364:..\FreeRTOS\Source/tasks.c **** }
 3693              		.loc 1 3364 0
 3694 009a 1800     		movs	r0, r3
 3695 009c BD46     		mov	sp, r7
 3696 009e 06B0     		add	sp, sp, #24
 3697              		@ sp needed
 3698 00a0 80BD     		pop	{r7, pc}
 3699              	.L292:
 3700 00a2 C046     		.align	2
 3701              	.L291:
 3702 00a4 00000000 		.word	x
 3703 00a8 DC000000 		.word	xTickCount
 3704 00ac F0000000 		.word	xNumOfOverflows
 3705              		.cfi_endproc
 3706              	.LFE32:
 3707              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3708              		.section	.text.vTaskMissedYield,"ax",%progbits
 3709              		.align	2
 3710              		.global	vTaskMissedYield
 3711              		.code	16
 3712              		.thumb_func
 3713              		.type	vTaskMissedYield, %function
 3714              	vTaskMissedYield:
 3715              	.LFB33:
3365:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3366:..\FreeRTOS\Source/tasks.c **** 
3367:..\FreeRTOS\Source/tasks.c **** void vTaskMissedYield( void )
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 126


3368:..\FreeRTOS\Source/tasks.c **** {
 3716              		.loc 1 3368 0
 3717              		.cfi_startproc
 3718              		@ args = 0, pretend = 0, frame = 0
 3719              		@ frame_needed = 1, uses_anonymous_args = 0
 3720 0000 80B5     		push	{r7, lr}
 3721              		.cfi_def_cfa_offset 8
 3722              		.cfi_offset 7, -8
 3723              		.cfi_offset 14, -4
 3724 0002 00AF     		add	r7, sp, #0
 3725              		.cfi_def_cfa_register 7
3369:..\FreeRTOS\Source/tasks.c ****     xYieldPending = pdTRUE;
 3726              		.loc 1 3369 0
 3727 0004 024B     		ldr	r3, .L294
 3728 0006 0122     		movs	r2, #1
 3729 0008 1A60     		str	r2, [r3]
3370:..\FreeRTOS\Source/tasks.c **** }
 3730              		.loc 1 3370 0
 3731 000a C046     		nop
 3732 000c BD46     		mov	sp, r7
 3733              		@ sp needed
 3734 000e 80BD     		pop	{r7, pc}
 3735              	.L295:
 3736              		.align	2
 3737              	.L294:
 3738 0010 EC000000 		.word	xYieldPending
 3739              		.cfi_endproc
 3740              	.LFE33:
 3741              		.size	vTaskMissedYield, .-vTaskMissedYield
 3742              		.section	.text.prvIdleTask,"ax",%progbits
 3743              		.align	2
 3744              		.code	16
 3745              		.thumb_func
 3746              		.type	prvIdleTask, %function
 3747              	prvIdleTask:
 3748              	.LFB34:
3371:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3372:..\FreeRTOS\Source/tasks.c **** 
3373:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3374:..\FreeRTOS\Source/tasks.c **** 
3375:..\FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3376:..\FreeRTOS\Source/tasks.c ****     {
3377:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn;
3378:..\FreeRTOS\Source/tasks.c ****         TCB_t const * pxTCB;
3379:..\FreeRTOS\Source/tasks.c **** 
3380:..\FreeRTOS\Source/tasks.c ****         if( xTask != NULL )
3381:..\FreeRTOS\Source/tasks.c ****         {
3382:..\FreeRTOS\Source/tasks.c ****             pxTCB = xTask;
3383:..\FreeRTOS\Source/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3384:..\FreeRTOS\Source/tasks.c ****         }
3385:..\FreeRTOS\Source/tasks.c ****         else
3386:..\FreeRTOS\Source/tasks.c ****         {
3387:..\FreeRTOS\Source/tasks.c ****             uxReturn = 0U;
3388:..\FreeRTOS\Source/tasks.c ****         }
3389:..\FreeRTOS\Source/tasks.c **** 
3390:..\FreeRTOS\Source/tasks.c ****         return uxReturn;
3391:..\FreeRTOS\Source/tasks.c ****     }
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 127


3392:..\FreeRTOS\Source/tasks.c **** 
3393:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3394:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3395:..\FreeRTOS\Source/tasks.c **** 
3396:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3397:..\FreeRTOS\Source/tasks.c **** 
3398:..\FreeRTOS\Source/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3399:..\FreeRTOS\Source/tasks.c ****                              const UBaseType_t uxHandle )
3400:..\FreeRTOS\Source/tasks.c ****     {
3401:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3402:..\FreeRTOS\Source/tasks.c **** 
3403:..\FreeRTOS\Source/tasks.c ****         if( xTask != NULL )
3404:..\FreeRTOS\Source/tasks.c ****         {
3405:..\FreeRTOS\Source/tasks.c ****             pxTCB = xTask;
3406:..\FreeRTOS\Source/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
3407:..\FreeRTOS\Source/tasks.c ****         }
3408:..\FreeRTOS\Source/tasks.c ****     }
3409:..\FreeRTOS\Source/tasks.c **** 
3410:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3411:..\FreeRTOS\Source/tasks.c **** 
3412:..\FreeRTOS\Source/tasks.c **** /*
3413:..\FreeRTOS\Source/tasks.c ****  * -----------------------------------------------------------
3414:..\FreeRTOS\Source/tasks.c ****  * The Idle task.
3415:..\FreeRTOS\Source/tasks.c ****  * ----------------------------------------------------------
3416:..\FreeRTOS\Source/tasks.c ****  *
3417:..\FreeRTOS\Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3418:..\FreeRTOS\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3419:..\FreeRTOS\Source/tasks.c ****  *
3420:..\FreeRTOS\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3421:..\FreeRTOS\Source/tasks.c ****  *
3422:..\FreeRTOS\Source/tasks.c ****  */
3423:..\FreeRTOS\Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3424:..\FreeRTOS\Source/tasks.c **** {
 3749              		.loc 1 3424 0
 3750              		.cfi_startproc
 3751              		@ args = 0, pretend = 0, frame = 8
 3752              		@ frame_needed = 1, uses_anonymous_args = 0
 3753 0000 80B5     		push	{r7, lr}
 3754              		.cfi_def_cfa_offset 8
 3755              		.cfi_offset 7, -8
 3756              		.cfi_offset 14, -4
 3757 0002 82B0     		sub	sp, sp, #8
 3758              		.cfi_def_cfa_offset 16
 3759 0004 00AF     		add	r7, sp, #0
 3760              		.cfi_def_cfa_register 7
 3761 0006 7860     		str	r0, [r7, #4]
 3762              	.L298:
3425:..\FreeRTOS\Source/tasks.c ****     /* Stop warnings. */
3426:..\FreeRTOS\Source/tasks.c ****     ( void ) pvParameters;
3427:..\FreeRTOS\Source/tasks.c **** 
3428:..\FreeRTOS\Source/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3429:..\FreeRTOS\Source/tasks.c ****      * SCHEDULER IS STARTED. **/
3430:..\FreeRTOS\Source/tasks.c **** 
3431:..\FreeRTOS\Source/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3432:..\FreeRTOS\Source/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3433:..\FreeRTOS\Source/tasks.c ****      * any. */
3434:..\FreeRTOS\Source/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 128


3435:..\FreeRTOS\Source/tasks.c **** 
3436:..\FreeRTOS\Source/tasks.c ****     for( ; ; )
3437:..\FreeRTOS\Source/tasks.c ****     {
3438:..\FreeRTOS\Source/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3439:..\FreeRTOS\Source/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3440:..\FreeRTOS\Source/tasks.c ****         prvCheckTasksWaitingTermination();
 3763              		.loc 1 3440 0
 3764 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3441:..\FreeRTOS\Source/tasks.c **** 
3442:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3443:..\FreeRTOS\Source/tasks.c ****             {
3444:..\FreeRTOS\Source/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
3445:..\FreeRTOS\Source/tasks.c ****                  * see if any other task has become available.  If we are using
3446:..\FreeRTOS\Source/tasks.c ****                  * preemption we don't need to do this as any task becoming available
3447:..\FreeRTOS\Source/tasks.c ****                  * will automatically get the processor anyway. */
3448:..\FreeRTOS\Source/tasks.c ****                 taskYIELD();
3449:..\FreeRTOS\Source/tasks.c ****             }
3450:..\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_PREEMPTION */
3451:..\FreeRTOS\Source/tasks.c **** 
3452:..\FreeRTOS\Source/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3453:..\FreeRTOS\Source/tasks.c ****             {
3454:..\FreeRTOS\Source/tasks.c ****                 /* When using preemption tasks of equal priority will be
3455:..\FreeRTOS\Source/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
3456:..\FreeRTOS\Source/tasks.c ****                  * to run then the idle task should yield before the end of the
3457:..\FreeRTOS\Source/tasks.c ****                  * timeslice.
3458:..\FreeRTOS\Source/tasks.c ****                  *
3459:..\FreeRTOS\Source/tasks.c ****                  * A critical region is not required here as we are just reading from
3460:..\FreeRTOS\Source/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
3461:..\FreeRTOS\Source/tasks.c ****                  * the ready list at the idle priority contains more than one task
3462:..\FreeRTOS\Source/tasks.c ****                  * then a task other than the idle task is ready to execute. */
3463:..\FreeRTOS\Source/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
 3765              		.loc 1 3463 0
 3766 000c 034B     		ldr	r3, .L299
 3767 000e 1B68     		ldr	r3, [r3]
 3768 0010 012B     		cmp	r3, #1
 3769 0012 F9D9     		bls	.L298
3464:..\FreeRTOS\Source/tasks.c ****                 {
3465:..\FreeRTOS\Source/tasks.c ****                     taskYIELD();
 3770              		.loc 1 3465 0
 3771 0014 FFF7FEFF 		bl	vPortYield
3466:..\FreeRTOS\Source/tasks.c ****                 }
3467:..\FreeRTOS\Source/tasks.c ****                 else
3468:..\FreeRTOS\Source/tasks.c ****                 {
3469:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3470:..\FreeRTOS\Source/tasks.c ****                 }
3471:..\FreeRTOS\Source/tasks.c ****             }
3472:..\FreeRTOS\Source/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3473:..\FreeRTOS\Source/tasks.c **** 
3474:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3475:..\FreeRTOS\Source/tasks.c ****             {
3476:..\FreeRTOS\Source/tasks.c ****                 extern void vApplicationIdleHook( void );
3477:..\FreeRTOS\Source/tasks.c **** 
3478:..\FreeRTOS\Source/tasks.c ****                 /* Call the user defined function from within the idle task.  This
3479:..\FreeRTOS\Source/tasks.c ****                  * allows the application designer to add background functionality
3480:..\FreeRTOS\Source/tasks.c ****                  * without the overhead of a separate task.
3481:..\FreeRTOS\Source/tasks.c ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3482:..\FreeRTOS\Source/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 129


3483:..\FreeRTOS\Source/tasks.c ****                 vApplicationIdleHook();
3484:..\FreeRTOS\Source/tasks.c ****             }
3485:..\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3486:..\FreeRTOS\Source/tasks.c **** 
3487:..\FreeRTOS\Source/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3488:..\FreeRTOS\Source/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3489:..\FreeRTOS\Source/tasks.c ****          * user defined low power mode  implementations require
3490:..\FreeRTOS\Source/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3491:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3492:..\FreeRTOS\Source/tasks.c ****             {
3493:..\FreeRTOS\Source/tasks.c ****                 TickType_t xExpectedIdleTime;
3494:..\FreeRTOS\Source/tasks.c **** 
3495:..\FreeRTOS\Source/tasks.c ****                 /* It is not desirable to suspend then resume the scheduler on
3496:..\FreeRTOS\Source/tasks.c ****                  * each iteration of the idle task.  Therefore, a preliminary
3497:..\FreeRTOS\Source/tasks.c ****                  * test of the expected idle time is performed without the
3498:..\FreeRTOS\Source/tasks.c ****                  * scheduler suspended.  The result here is not necessarily
3499:..\FreeRTOS\Source/tasks.c ****                  * valid. */
3500:..\FreeRTOS\Source/tasks.c ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3501:..\FreeRTOS\Source/tasks.c **** 
3502:..\FreeRTOS\Source/tasks.c ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3503:..\FreeRTOS\Source/tasks.c ****                 {
3504:..\FreeRTOS\Source/tasks.c ****                     vTaskSuspendAll();
3505:..\FreeRTOS\Source/tasks.c ****                     {
3506:..\FreeRTOS\Source/tasks.c ****                         /* Now the scheduler is suspended, the expected idle
3507:..\FreeRTOS\Source/tasks.c ****                          * time can be sampled again, and this time its value can
3508:..\FreeRTOS\Source/tasks.c ****                          * be used. */
3509:..\FreeRTOS\Source/tasks.c ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3510:..\FreeRTOS\Source/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3511:..\FreeRTOS\Source/tasks.c **** 
3512:..\FreeRTOS\Source/tasks.c ****                         /* Define the following macro to set xExpectedIdleTime to 0
3513:..\FreeRTOS\Source/tasks.c ****                          * if the application does not want
3514:..\FreeRTOS\Source/tasks.c ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3515:..\FreeRTOS\Source/tasks.c ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3516:..\FreeRTOS\Source/tasks.c **** 
3517:..\FreeRTOS\Source/tasks.c ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3518:..\FreeRTOS\Source/tasks.c ****                         {
3519:..\FreeRTOS\Source/tasks.c ****                             traceLOW_POWER_IDLE_BEGIN();
3520:..\FreeRTOS\Source/tasks.c ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3521:..\FreeRTOS\Source/tasks.c ****                             traceLOW_POWER_IDLE_END();
3522:..\FreeRTOS\Source/tasks.c ****                         }
3523:..\FreeRTOS\Source/tasks.c ****                         else
3524:..\FreeRTOS\Source/tasks.c ****                         {
3525:..\FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3526:..\FreeRTOS\Source/tasks.c ****                         }
3527:..\FreeRTOS\Source/tasks.c ****                     }
3528:..\FreeRTOS\Source/tasks.c ****                     ( void ) xTaskResumeAll();
3529:..\FreeRTOS\Source/tasks.c ****                 }
3530:..\FreeRTOS\Source/tasks.c ****                 else
3531:..\FreeRTOS\Source/tasks.c ****                 {
3532:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3533:..\FreeRTOS\Source/tasks.c ****                 }
3534:..\FreeRTOS\Source/tasks.c ****             }
3535:..\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3536:..\FreeRTOS\Source/tasks.c ****     }
 3772              		.loc 1 3536 0
 3773 0018 F6E7     		b	.L298
 3774              	.L300:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 130


 3775 001a C046     		.align	2
 3776              	.L299:
 3777 001c 04000000 		.word	pxReadyTasksLists
 3778              		.cfi_endproc
 3779              	.LFE34:
 3780              		.size	prvIdleTask, .-prvIdleTask
 3781              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 3782              		.align	2
 3783              		.global	vTaskSetThreadLocalStoragePointer
 3784              		.code	16
 3785              		.thumb_func
 3786              		.type	vTaskSetThreadLocalStoragePointer, %function
 3787              	vTaskSetThreadLocalStoragePointer:
 3788              	.LFB35:
3537:..\FreeRTOS\Source/tasks.c **** }
3538:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3539:..\FreeRTOS\Source/tasks.c **** 
3540:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3541:..\FreeRTOS\Source/tasks.c **** 
3542:..\FreeRTOS\Source/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3543:..\FreeRTOS\Source/tasks.c ****     {
3544:..\FreeRTOS\Source/tasks.c ****         /* The idle task exists in addition to the application tasks. */
3545:..\FreeRTOS\Source/tasks.c ****         const UBaseType_t uxNonApplicationTasks = 1;
3546:..\FreeRTOS\Source/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3547:..\FreeRTOS\Source/tasks.c **** 
3548:..\FreeRTOS\Source/tasks.c ****         /* This function must be called from a critical section. */
3549:..\FreeRTOS\Source/tasks.c **** 
3550:..\FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3551:..\FreeRTOS\Source/tasks.c ****         {
3552:..\FreeRTOS\Source/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3553:..\FreeRTOS\Source/tasks.c ****             eReturn = eAbortSleep;
3554:..\FreeRTOS\Source/tasks.c ****         }
3555:..\FreeRTOS\Source/tasks.c ****         else if( xYieldPending != pdFALSE )
3556:..\FreeRTOS\Source/tasks.c ****         {
3557:..\FreeRTOS\Source/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3558:..\FreeRTOS\Source/tasks.c ****             eReturn = eAbortSleep;
3559:..\FreeRTOS\Source/tasks.c ****         }
3560:..\FreeRTOS\Source/tasks.c ****         else if( xPendedTicks != 0 )
3561:..\FreeRTOS\Source/tasks.c ****         {
3562:..\FreeRTOS\Source/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3563:..\FreeRTOS\Source/tasks.c ****              * because the scheduler is suspended. */
3564:..\FreeRTOS\Source/tasks.c ****             eReturn = eAbortSleep;
3565:..\FreeRTOS\Source/tasks.c ****         }
3566:..\FreeRTOS\Source/tasks.c ****         else
3567:..\FreeRTOS\Source/tasks.c ****         {
3568:..\FreeRTOS\Source/tasks.c ****             /* If all the tasks are in the suspended list (which might mean they
3569:..\FreeRTOS\Source/tasks.c ****              * have an infinite block time rather than actually being suspended)
3570:..\FreeRTOS\Source/tasks.c ****              * then it is safe to turn all clocks off and just wait for external
3571:..\FreeRTOS\Source/tasks.c ****              * interrupts. */
3572:..\FreeRTOS\Source/tasks.c ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3573:..\FreeRTOS\Source/tasks.c ****             {
3574:..\FreeRTOS\Source/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3575:..\FreeRTOS\Source/tasks.c ****             }
3576:..\FreeRTOS\Source/tasks.c ****             else
3577:..\FreeRTOS\Source/tasks.c ****             {
3578:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3579:..\FreeRTOS\Source/tasks.c ****             }
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 131


3580:..\FreeRTOS\Source/tasks.c ****         }
3581:..\FreeRTOS\Source/tasks.c **** 
3582:..\FreeRTOS\Source/tasks.c ****         return eReturn;
3583:..\FreeRTOS\Source/tasks.c ****     }
3584:..\FreeRTOS\Source/tasks.c **** 
3585:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3586:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3587:..\FreeRTOS\Source/tasks.c **** 
3588:..\FreeRTOS\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3589:..\FreeRTOS\Source/tasks.c **** 
3590:..\FreeRTOS\Source/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3591:..\FreeRTOS\Source/tasks.c ****                                             BaseType_t xIndex,
3592:..\FreeRTOS\Source/tasks.c ****                                             void * pvValue )
3593:..\FreeRTOS\Source/tasks.c ****     {
 3789              		.loc 1 3593 0
 3790              		.cfi_startproc
 3791              		@ args = 0, pretend = 0, frame = 24
 3792              		@ frame_needed = 1, uses_anonymous_args = 0
 3793 0000 80B5     		push	{r7, lr}
 3794              		.cfi_def_cfa_offset 8
 3795              		.cfi_offset 7, -8
 3796              		.cfi_offset 14, -4
 3797 0002 86B0     		sub	sp, sp, #24
 3798              		.cfi_def_cfa_offset 32
 3799 0004 00AF     		add	r7, sp, #0
 3800              		.cfi_def_cfa_register 7
 3801 0006 F860     		str	r0, [r7, #12]
 3802 0008 B960     		str	r1, [r7, #8]
 3803 000a 7A60     		str	r2, [r7, #4]
3594:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3595:..\FreeRTOS\Source/tasks.c **** 
3596:..\FreeRTOS\Source/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 3804              		.loc 1 3596 0
 3805 000c BB68     		ldr	r3, [r7, #8]
 3806 000e 042B     		cmp	r3, #4
 3807 0010 15DC     		bgt	.L307
3597:..\FreeRTOS\Source/tasks.c ****         {
3598:..\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
 3808              		.loc 1 3598 0
 3809 0012 FB68     		ldr	r3, [r7, #12]
 3810 0014 002B     		cmp	r3, #0
 3811 0016 02D1     		bne	.L303
 3812              		.loc 1 3598 0 is_stmt 0 discriminator 1
 3813 0018 0B4B     		ldr	r3, .L308
 3814 001a 1B68     		ldr	r3, [r3]
 3815 001c 00E0     		b	.L304
 3816              	.L303:
 3817              		.loc 1 3598 0 discriminator 2
 3818 001e FB68     		ldr	r3, [r7, #12]
 3819              	.L304:
 3820              		.loc 1 3598 0 discriminator 4
 3821 0020 7B61     		str	r3, [r7, #20]
3599:..\FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB != NULL );
 3822              		.loc 1 3599 0 is_stmt 1 discriminator 4
 3823 0022 0A4B     		ldr	r3, .L308+4
 3824 0024 1B88     		ldrh	r3, [r3]
 3825 0026 002B     		cmp	r3, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 132


 3826 0028 01D1     		bne	.L305
 3827              		.loc 1 3599 0 is_stmt 0 discriminator 1
 3828              		.syntax divided
 3829              	@ 3599 "..\FreeRTOS\Source\tasks.c" 1
 3830 002a 72B6     		 cpsid i 
 3831              	@ 0 "" 2
 3832              		.thumb
 3833              		.syntax unified
 3834              	.L306:
 3835 002c FEE7     		b	.L306
 3836              	.L305:
3600:..\FreeRTOS\Source/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3837              		.loc 1 3600 0 is_stmt 1
 3838 002e 7A69     		ldr	r2, [r7, #20]
 3839 0030 BB68     		ldr	r3, [r7, #8]
 3840 0032 1033     		adds	r3, r3, #16
 3841 0034 9B00     		lsls	r3, r3, #2
 3842 0036 D318     		adds	r3, r2, r3
 3843 0038 0433     		adds	r3, r3, #4
 3844 003a 7A68     		ldr	r2, [r7, #4]
 3845 003c 1A60     		str	r2, [r3]
 3846              	.L307:
3601:..\FreeRTOS\Source/tasks.c ****         }
3602:..\FreeRTOS\Source/tasks.c ****     }
 3847              		.loc 1 3602 0
 3848 003e C046     		nop
 3849 0040 BD46     		mov	sp, r7
 3850 0042 06B0     		add	sp, sp, #24
 3851              		@ sp needed
 3852 0044 80BD     		pop	{r7, pc}
 3853              	.L309:
 3854 0046 C046     		.align	2
 3855              	.L308:
 3856 0048 00000000 		.word	pxCurrentTCB
 3857 004c 00000000 		.word	x
 3858              		.cfi_endproc
 3859              	.LFE35:
 3860              		.size	vTaskSetThreadLocalStoragePointer, .-vTaskSetThreadLocalStoragePointer
 3861              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 3862              		.align	2
 3863              		.global	pvTaskGetThreadLocalStoragePointer
 3864              		.code	16
 3865              		.thumb_func
 3866              		.type	pvTaskGetThreadLocalStoragePointer, %function
 3867              	pvTaskGetThreadLocalStoragePointer:
 3868              	.LFB36:
3603:..\FreeRTOS\Source/tasks.c **** 
3604:..\FreeRTOS\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3605:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3606:..\FreeRTOS\Source/tasks.c **** 
3607:..\FreeRTOS\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3608:..\FreeRTOS\Source/tasks.c **** 
3609:..\FreeRTOS\Source/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3610:..\FreeRTOS\Source/tasks.c ****                                                BaseType_t xIndex )
3611:..\FreeRTOS\Source/tasks.c ****     {
 3869              		.loc 1 3611 0
 3870              		.cfi_startproc
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 133


 3871              		@ args = 0, pretend = 0, frame = 16
 3872              		@ frame_needed = 1, uses_anonymous_args = 0
 3873 0000 80B5     		push	{r7, lr}
 3874              		.cfi_def_cfa_offset 8
 3875              		.cfi_offset 7, -8
 3876              		.cfi_offset 14, -4
 3877 0002 84B0     		sub	sp, sp, #16
 3878              		.cfi_def_cfa_offset 24
 3879 0004 00AF     		add	r7, sp, #0
 3880              		.cfi_def_cfa_register 7
 3881 0006 7860     		str	r0, [r7, #4]
 3882 0008 3960     		str	r1, [r7]
3612:..\FreeRTOS\Source/tasks.c ****         void * pvReturn = NULL;
 3883              		.loc 1 3612 0
 3884 000a 0023     		movs	r3, #0
 3885 000c FB60     		str	r3, [r7, #12]
3613:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3614:..\FreeRTOS\Source/tasks.c **** 
3615:..\FreeRTOS\Source/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 3886              		.loc 1 3615 0
 3887 000e 3B68     		ldr	r3, [r7]
 3888 0010 042B     		cmp	r3, #4
 3889 0012 10DC     		bgt	.L311
3616:..\FreeRTOS\Source/tasks.c ****         {
3617:..\FreeRTOS\Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3890              		.loc 1 3617 0
 3891 0014 7B68     		ldr	r3, [r7, #4]
 3892 0016 002B     		cmp	r3, #0
 3893 0018 02D1     		bne	.L312
 3894              		.loc 1 3617 0 is_stmt 0 discriminator 1
 3895 001a 0A4B     		ldr	r3, .L316
 3896 001c 1B68     		ldr	r3, [r3]
 3897 001e 00E0     		b	.L313
 3898              	.L312:
 3899              		.loc 1 3617 0 discriminator 2
 3900 0020 7B68     		ldr	r3, [r7, #4]
 3901              	.L313:
 3902              		.loc 1 3617 0 discriminator 4
 3903 0022 BB60     		str	r3, [r7, #8]
3618:..\FreeRTOS\Source/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3904              		.loc 1 3618 0 is_stmt 1 discriminator 4
 3905 0024 BA68     		ldr	r2, [r7, #8]
 3906 0026 3B68     		ldr	r3, [r7]
 3907 0028 1033     		adds	r3, r3, #16
 3908 002a 9B00     		lsls	r3, r3, #2
 3909 002c D318     		adds	r3, r2, r3
 3910 002e 0433     		adds	r3, r3, #4
 3911 0030 1B68     		ldr	r3, [r3]
 3912 0032 FB60     		str	r3, [r7, #12]
 3913 0034 01E0     		b	.L314
 3914              	.L311:
3619:..\FreeRTOS\Source/tasks.c ****         }
3620:..\FreeRTOS\Source/tasks.c ****         else
3621:..\FreeRTOS\Source/tasks.c ****         {
3622:..\FreeRTOS\Source/tasks.c ****             pvReturn = NULL;
 3915              		.loc 1 3622 0
 3916 0036 0023     		movs	r3, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 134


 3917 0038 FB60     		str	r3, [r7, #12]
 3918              	.L314:
3623:..\FreeRTOS\Source/tasks.c ****         }
3624:..\FreeRTOS\Source/tasks.c **** 
3625:..\FreeRTOS\Source/tasks.c ****         return pvReturn;
 3919              		.loc 1 3625 0
 3920 003a FB68     		ldr	r3, [r7, #12]
3626:..\FreeRTOS\Source/tasks.c ****     }
 3921              		.loc 1 3626 0
 3922 003c 1800     		movs	r0, r3
 3923 003e BD46     		mov	sp, r7
 3924 0040 04B0     		add	sp, sp, #16
 3925              		@ sp needed
 3926 0042 80BD     		pop	{r7, pc}
 3927              	.L317:
 3928              		.align	2
 3929              	.L316:
 3930 0044 00000000 		.word	pxCurrentTCB
 3931              		.cfi_endproc
 3932              	.LFE36:
 3933              		.size	pvTaskGetThreadLocalStoragePointer, .-pvTaskGetThreadLocalStoragePointer
 3934              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3935              		.align	2
 3936              		.code	16
 3937              		.thumb_func
 3938              		.type	prvInitialiseTaskLists, %function
 3939              	prvInitialiseTaskLists:
 3940              	.LFB37:
3627:..\FreeRTOS\Source/tasks.c **** 
3628:..\FreeRTOS\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3629:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3630:..\FreeRTOS\Source/tasks.c **** 
3631:..\FreeRTOS\Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3632:..\FreeRTOS\Source/tasks.c **** 
3633:..\FreeRTOS\Source/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3634:..\FreeRTOS\Source/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3635:..\FreeRTOS\Source/tasks.c ****     {
3636:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3637:..\FreeRTOS\Source/tasks.c **** 
3638:..\FreeRTOS\Source/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3639:..\FreeRTOS\Source/tasks.c ****          * the calling task. */
3640:..\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3641:..\FreeRTOS\Source/tasks.c **** 
3642:..\FreeRTOS\Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3643:..\FreeRTOS\Source/tasks.c ****     }
3644:..\FreeRTOS\Source/tasks.c **** 
3645:..\FreeRTOS\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3646:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3647:..\FreeRTOS\Source/tasks.c **** 
3648:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseTaskLists( void )
3649:..\FreeRTOS\Source/tasks.c **** {
 3941              		.loc 1 3649 0
 3942              		.cfi_startproc
 3943              		@ args = 0, pretend = 0, frame = 8
 3944              		@ frame_needed = 1, uses_anonymous_args = 0
 3945 0000 80B5     		push	{r7, lr}
 3946              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 135


 3947              		.cfi_offset 7, -8
 3948              		.cfi_offset 14, -4
 3949 0002 82B0     		sub	sp, sp, #8
 3950              		.cfi_def_cfa_offset 16
 3951 0004 00AF     		add	r7, sp, #0
 3952              		.cfi_def_cfa_register 7
3650:..\FreeRTOS\Source/tasks.c ****     UBaseType_t uxPriority;
3651:..\FreeRTOS\Source/tasks.c **** 
3652:..\FreeRTOS\Source/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
 3953              		.loc 1 3652 0
 3954 0006 0023     		movs	r3, #0
 3955 0008 7B60     		str	r3, [r7, #4]
 3956 000a 0CE0     		b	.L319
 3957              	.L320:
3653:..\FreeRTOS\Source/tasks.c ****     {
3654:..\FreeRTOS\Source/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3958              		.loc 1 3654 0 discriminator 3
 3959 000c 7A68     		ldr	r2, [r7, #4]
 3960 000e 1300     		movs	r3, r2
 3961 0010 9B00     		lsls	r3, r3, #2
 3962 0012 9B18     		adds	r3, r3, r2
 3963 0014 9B00     		lsls	r3, r3, #2
 3964 0016 144A     		ldr	r2, .L321
 3965 0018 9B18     		adds	r3, r3, r2
 3966 001a 1800     		movs	r0, r3
 3967 001c FFF7FEFF 		bl	vListInitialise
3652:..\FreeRTOS\Source/tasks.c ****     {
 3968              		.loc 1 3652 0 discriminator 3
 3969 0020 7B68     		ldr	r3, [r7, #4]
 3970 0022 0133     		adds	r3, r3, #1
 3971 0024 7B60     		str	r3, [r7, #4]
 3972              	.L319:
3652:..\FreeRTOS\Source/tasks.c ****     {
 3973              		.loc 1 3652 0 is_stmt 0 discriminator 1
 3974 0026 7B68     		ldr	r3, [r7, #4]
 3975 0028 042B     		cmp	r3, #4
 3976 002a EFD9     		bls	.L320
3655:..\FreeRTOS\Source/tasks.c ****     }
3656:..\FreeRTOS\Source/tasks.c **** 
3657:..\FreeRTOS\Source/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
 3977              		.loc 1 3657 0 is_stmt 1
 3978 002c 0F4B     		ldr	r3, .L321+4
 3979 002e 1800     		movs	r0, r3
 3980 0030 FFF7FEFF 		bl	vListInitialise
3658:..\FreeRTOS\Source/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 3981              		.loc 1 3658 0
 3982 0034 0E4B     		ldr	r3, .L321+8
 3983 0036 1800     		movs	r0, r3
 3984 0038 FFF7FEFF 		bl	vListInitialise
3659:..\FreeRTOS\Source/tasks.c ****     vListInitialise( &xPendingReadyList );
 3985              		.loc 1 3659 0
 3986 003c 0D4B     		ldr	r3, .L321+12
 3987 003e 1800     		movs	r0, r3
 3988 0040 FFF7FEFF 		bl	vListInitialise
3660:..\FreeRTOS\Source/tasks.c **** 
3661:..\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3662:..\FreeRTOS\Source/tasks.c ****         {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 136


3663:..\FreeRTOS\Source/tasks.c ****             vListInitialise( &xTasksWaitingTermination );
 3989              		.loc 1 3663 0
 3990 0044 0C4B     		ldr	r3, .L321+16
 3991 0046 1800     		movs	r0, r3
 3992 0048 FFF7FEFF 		bl	vListInitialise
3664:..\FreeRTOS\Source/tasks.c ****         }
3665:..\FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3666:..\FreeRTOS\Source/tasks.c **** 
3667:..\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3668:..\FreeRTOS\Source/tasks.c ****         {
3669:..\FreeRTOS\Source/tasks.c ****             vListInitialise( &xSuspendedTaskList );
 3993              		.loc 1 3669 0
 3994 004c 0B4B     		ldr	r3, .L321+20
 3995 004e 1800     		movs	r0, r3
 3996 0050 FFF7FEFF 		bl	vListInitialise
3670:..\FreeRTOS\Source/tasks.c ****         }
3671:..\FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3672:..\FreeRTOS\Source/tasks.c **** 
3673:..\FreeRTOS\Source/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3674:..\FreeRTOS\Source/tasks.c ****      * using list2. */
3675:..\FreeRTOS\Source/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
 3997              		.loc 1 3675 0
 3998 0054 0A4B     		ldr	r3, .L321+24
 3999 0056 054A     		ldr	r2, .L321+4
 4000 0058 1A60     		str	r2, [r3]
3676:..\FreeRTOS\Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4001              		.loc 1 3676 0
 4002 005a 0A4B     		ldr	r3, .L321+28
 4003 005c 044A     		ldr	r2, .L321+8
 4004 005e 1A60     		str	r2, [r3]
3677:..\FreeRTOS\Source/tasks.c **** }
 4005              		.loc 1 3677 0
 4006 0060 C046     		nop
 4007 0062 BD46     		mov	sp, r7
 4008 0064 02B0     		add	sp, sp, #8
 4009              		@ sp needed
 4010 0066 80BD     		pop	{r7, pc}
 4011              	.L322:
 4012              		.align	2
 4013              	.L321:
 4014 0068 04000000 		.word	pxReadyTasksLists
 4015 006c 68000000 		.word	xDelayedTaskList1
 4016 0070 7C000000 		.word	xDelayedTaskList2
 4017 0074 98000000 		.word	xPendingReadyList
 4018 0078 AC000000 		.word	xTasksWaitingTermination
 4019 007c C4000000 		.word	xSuspendedTaskList
 4020 0080 90000000 		.word	pxDelayedTaskList
 4021 0084 94000000 		.word	pxOverflowDelayedTaskList
 4022              		.cfi_endproc
 4023              	.LFE37:
 4024              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 4025              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4026              		.align	2
 4027              		.code	16
 4028              		.thumb_func
 4029              		.type	prvCheckTasksWaitingTermination, %function
 4030              	prvCheckTasksWaitingTermination:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 137


 4031              	.LFB38:
3678:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3679:..\FreeRTOS\Source/tasks.c **** 
3680:..\FreeRTOS\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3681:..\FreeRTOS\Source/tasks.c **** {
 4032              		.loc 1 3681 0
 4033              		.cfi_startproc
 4034              		@ args = 0, pretend = 0, frame = 8
 4035              		@ frame_needed = 1, uses_anonymous_args = 0
 4036 0000 80B5     		push	{r7, lr}
 4037              		.cfi_def_cfa_offset 8
 4038              		.cfi_offset 7, -8
 4039              		.cfi_offset 14, -4
 4040 0002 82B0     		sub	sp, sp, #8
 4041              		.cfi_def_cfa_offset 16
 4042 0004 00AF     		add	r7, sp, #0
 4043              		.cfi_def_cfa_register 7
 4044              	.LBB13:
3682:..\FreeRTOS\Source/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3683:..\FreeRTOS\Source/tasks.c **** 
3684:..\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3685:..\FreeRTOS\Source/tasks.c ****         {
3686:..\FreeRTOS\Source/tasks.c ****             TCB_t * pxTCB;
3687:..\FreeRTOS\Source/tasks.c **** 
3688:..\FreeRTOS\Source/tasks.c ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3689:..\FreeRTOS\Source/tasks.c ****              * being called too often in the idle task. */
3690:..\FreeRTOS\Source/tasks.c ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4045              		.loc 1 3690 0
 4046 0006 1AE0     		b	.L324
 4047              	.L325:
3691:..\FreeRTOS\Source/tasks.c ****             {
3692:..\FreeRTOS\Source/tasks.c ****                 taskENTER_CRITICAL();
 4048              		.loc 1 3692 0
 4049 0008 FFF7FEFF 		bl	vPortEnterCritical
3693:..\FreeRTOS\Source/tasks.c ****                 {
3694:..\FreeRTOS\Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
 4050              		.loc 1 3694 0
 4051 000c 104B     		ldr	r3, .L326
 4052 000e DB68     		ldr	r3, [r3, #12]
 4053 0010 DB68     		ldr	r3, [r3, #12]
 4054 0012 7B60     		str	r3, [r7, #4]
3695:..\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4055              		.loc 1 3695 0
 4056 0014 7B68     		ldr	r3, [r7, #4]
 4057 0016 0433     		adds	r3, r3, #4
 4058 0018 1800     		movs	r0, r3
 4059 001a FFF7FEFF 		bl	uxListRemove
3696:..\FreeRTOS\Source/tasks.c ****                     --uxCurrentNumberOfTasks;
 4060              		.loc 1 3696 0
 4061 001e 0D4B     		ldr	r3, .L326+4
 4062 0020 1B68     		ldr	r3, [r3]
 4063 0022 5A1E     		subs	r2, r3, #1
 4064 0024 0B4B     		ldr	r3, .L326+4
 4065 0026 1A60     		str	r2, [r3]
3697:..\FreeRTOS\Source/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
 4066              		.loc 1 3697 0
 4067 0028 0B4B     		ldr	r3, .L326+8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 138


 4068 002a 1B68     		ldr	r3, [r3]
 4069 002c 5A1E     		subs	r2, r3, #1
 4070 002e 0A4B     		ldr	r3, .L326+8
 4071 0030 1A60     		str	r2, [r3]
3698:..\FreeRTOS\Source/tasks.c ****                 }
3699:..\FreeRTOS\Source/tasks.c ****                 taskEXIT_CRITICAL();
 4072              		.loc 1 3699 0
 4073 0032 FFF7FEFF 		bl	vPortExitCritical
3700:..\FreeRTOS\Source/tasks.c **** 
3701:..\FreeRTOS\Source/tasks.c ****                 prvDeleteTCB( pxTCB );
 4074              		.loc 1 3701 0
 4075 0036 7B68     		ldr	r3, [r7, #4]
 4076 0038 1800     		movs	r0, r3
 4077 003a FFF7FEFF 		bl	prvDeleteTCB
 4078              	.L324:
3690:..\FreeRTOS\Source/tasks.c ****             {
 4079              		.loc 1 3690 0
 4080 003e 064B     		ldr	r3, .L326+8
 4081 0040 1B68     		ldr	r3, [r3]
 4082 0042 002B     		cmp	r3, #0
 4083 0044 E0D1     		bne	.L325
 4084              	.LBE13:
3702:..\FreeRTOS\Source/tasks.c ****             }
3703:..\FreeRTOS\Source/tasks.c ****         }
3704:..\FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3705:..\FreeRTOS\Source/tasks.c **** }
 4085              		.loc 1 3705 0
 4086 0046 C046     		nop
 4087 0048 BD46     		mov	sp, r7
 4088 004a 02B0     		add	sp, sp, #8
 4089              		@ sp needed
 4090 004c 80BD     		pop	{r7, pc}
 4091              	.L327:
 4092 004e C046     		.align	2
 4093              	.L326:
 4094 0050 AC000000 		.word	xTasksWaitingTermination
 4095 0054 D8000000 		.word	uxCurrentNumberOfTasks
 4096 0058 C0000000 		.word	uxDeletedTasksWaitingCleanUp
 4097              		.cfi_endproc
 4098              	.LFE38:
 4099              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 4100              		.section	.text.prvDeleteTCB,"ax",%progbits
 4101              		.align	2
 4102              		.code	16
 4103              		.thumb_func
 4104              		.type	prvDeleteTCB, %function
 4105              	prvDeleteTCB:
 4106              	.LFB39:
3706:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3707:..\FreeRTOS\Source/tasks.c **** 
3708:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3709:..\FreeRTOS\Source/tasks.c **** 
3710:..\FreeRTOS\Source/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3711:..\FreeRTOS\Source/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3712:..\FreeRTOS\Source/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3713:..\FreeRTOS\Source/tasks.c ****                        eTaskState eState )
3714:..\FreeRTOS\Source/tasks.c ****     {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 139


3715:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3716:..\FreeRTOS\Source/tasks.c **** 
3717:..\FreeRTOS\Source/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3718:..\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3719:..\FreeRTOS\Source/tasks.c **** 
3720:..\FreeRTOS\Source/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3721:..\FreeRTOS\Source/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3722:..\FreeRTOS\Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3723:..\FreeRTOS\Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3724:..\FreeRTOS\Source/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3725:..\FreeRTOS\Source/tasks.c **** 
3726:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3727:..\FreeRTOS\Source/tasks.c ****             {
3728:..\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3729:..\FreeRTOS\Source/tasks.c ****             }
3730:..\FreeRTOS\Source/tasks.c ****         #else
3731:..\FreeRTOS\Source/tasks.c ****             {
3732:..\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->uxBasePriority = 0;
3733:..\FreeRTOS\Source/tasks.c ****             }
3734:..\FreeRTOS\Source/tasks.c ****         #endif
3735:..\FreeRTOS\Source/tasks.c **** 
3736:..\FreeRTOS\Source/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3737:..\FreeRTOS\Source/tasks.c ****             {
3738:..\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3739:..\FreeRTOS\Source/tasks.c ****             }
3740:..\FreeRTOS\Source/tasks.c ****         #else
3741:..\FreeRTOS\Source/tasks.c ****             {
3742:..\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = 0;
3743:..\FreeRTOS\Source/tasks.c ****             }
3744:..\FreeRTOS\Source/tasks.c ****         #endif
3745:..\FreeRTOS\Source/tasks.c **** 
3746:..\FreeRTOS\Source/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3747:..\FreeRTOS\Source/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3748:..\FreeRTOS\Source/tasks.c ****          * state is just set to whatever is passed in. */
3749:..\FreeRTOS\Source/tasks.c ****         if( eState != eInvalid )
3750:..\FreeRTOS\Source/tasks.c ****         {
3751:..\FreeRTOS\Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
3752:..\FreeRTOS\Source/tasks.c ****             {
3753:..\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3754:..\FreeRTOS\Source/tasks.c ****             }
3755:..\FreeRTOS\Source/tasks.c ****             else
3756:..\FreeRTOS\Source/tasks.c ****             {
3757:..\FreeRTOS\Source/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3758:..\FreeRTOS\Source/tasks.c **** 
3759:..\FreeRTOS\Source/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3760:..\FreeRTOS\Source/tasks.c ****                     {
3761:..\FreeRTOS\Source/tasks.c ****                         /* If the task is in the suspended list then there is a
3762:..\FreeRTOS\Source/tasks.c ****                          *  chance it is actually just blocked indefinitely - so really
3763:..\FreeRTOS\Source/tasks.c ****                          *  it should be reported as being in the Blocked state. */
3764:..\FreeRTOS\Source/tasks.c ****                         if( eState == eSuspended )
3765:..\FreeRTOS\Source/tasks.c ****                         {
3766:..\FreeRTOS\Source/tasks.c ****                             vTaskSuspendAll();
3767:..\FreeRTOS\Source/tasks.c ****                             {
3768:..\FreeRTOS\Source/tasks.c ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3769:..\FreeRTOS\Source/tasks.c ****                                 {
3770:..\FreeRTOS\Source/tasks.c ****                                     pxTaskStatus->eCurrentState = eBlocked;
3771:..\FreeRTOS\Source/tasks.c ****                                 }
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 140


3772:..\FreeRTOS\Source/tasks.c ****                             }
3773:..\FreeRTOS\Source/tasks.c ****                             ( void ) xTaskResumeAll();
3774:..\FreeRTOS\Source/tasks.c ****                         }
3775:..\FreeRTOS\Source/tasks.c ****                     }
3776:..\FreeRTOS\Source/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3777:..\FreeRTOS\Source/tasks.c ****             }
3778:..\FreeRTOS\Source/tasks.c ****         }
3779:..\FreeRTOS\Source/tasks.c ****         else
3780:..\FreeRTOS\Source/tasks.c ****         {
3781:..\FreeRTOS\Source/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3782:..\FreeRTOS\Source/tasks.c ****         }
3783:..\FreeRTOS\Source/tasks.c **** 
3784:..\FreeRTOS\Source/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3785:..\FreeRTOS\Source/tasks.c ****          * parameter is provided to allow it to be skipped. */
3786:..\FreeRTOS\Source/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3787:..\FreeRTOS\Source/tasks.c ****         {
3788:..\FreeRTOS\Source/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3789:..\FreeRTOS\Source/tasks.c ****                 {
3790:..\FreeRTOS\Source/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3791:..\FreeRTOS\Source/tasks.c ****                 }
3792:..\FreeRTOS\Source/tasks.c ****             #else
3793:..\FreeRTOS\Source/tasks.c ****                 {
3794:..\FreeRTOS\Source/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3795:..\FreeRTOS\Source/tasks.c ****                 }
3796:..\FreeRTOS\Source/tasks.c ****             #endif
3797:..\FreeRTOS\Source/tasks.c ****         }
3798:..\FreeRTOS\Source/tasks.c ****         else
3799:..\FreeRTOS\Source/tasks.c ****         {
3800:..\FreeRTOS\Source/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3801:..\FreeRTOS\Source/tasks.c ****         }
3802:..\FreeRTOS\Source/tasks.c ****     }
3803:..\FreeRTOS\Source/tasks.c **** 
3804:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3805:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3806:..\FreeRTOS\Source/tasks.c **** 
3807:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3808:..\FreeRTOS\Source/tasks.c **** 
3809:..\FreeRTOS\Source/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3810:..\FreeRTOS\Source/tasks.c ****                                                      List_t * pxList,
3811:..\FreeRTOS\Source/tasks.c ****                                                      eTaskState eState )
3812:..\FreeRTOS\Source/tasks.c ****     {
3813:..\FreeRTOS\Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3814:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxTask = 0;
3815:..\FreeRTOS\Source/tasks.c **** 
3816:..\FreeRTOS\Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3817:..\FreeRTOS\Source/tasks.c ****         {
3818:..\FreeRTOS\Source/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3819:..\FreeRTOS\Source/tasks.c **** 
3820:..\FreeRTOS\Source/tasks.c ****             /* Populate an TaskStatus_t structure within the
3821:..\FreeRTOS\Source/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3822:..\FreeRTOS\Source/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3823:..\FreeRTOS\Source/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3824:..\FreeRTOS\Source/tasks.c ****             do
3825:..\FreeRTOS\Source/tasks.c ****             {
3826:..\FreeRTOS\Source/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3827:..\FreeRTOS\Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3828:..\FreeRTOS\Source/tasks.c ****                 uxTask++;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 141


3829:..\FreeRTOS\Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3830:..\FreeRTOS\Source/tasks.c ****         }
3831:..\FreeRTOS\Source/tasks.c ****         else
3832:..\FreeRTOS\Source/tasks.c ****         {
3833:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3834:..\FreeRTOS\Source/tasks.c ****         }
3835:..\FreeRTOS\Source/tasks.c **** 
3836:..\FreeRTOS\Source/tasks.c ****         return uxTask;
3837:..\FreeRTOS\Source/tasks.c ****     }
3838:..\FreeRTOS\Source/tasks.c **** 
3839:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3840:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3841:..\FreeRTOS\Source/tasks.c **** 
3842:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3843:..\FreeRTOS\Source/tasks.c **** 
3844:..\FreeRTOS\Source/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3845:..\FreeRTOS\Source/tasks.c ****     {
3846:..\FreeRTOS\Source/tasks.c ****         uint32_t ulCount = 0U;
3847:..\FreeRTOS\Source/tasks.c **** 
3848:..\FreeRTOS\Source/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3849:..\FreeRTOS\Source/tasks.c ****         {
3850:..\FreeRTOS\Source/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
3851:..\FreeRTOS\Source/tasks.c ****             ulCount++;
3852:..\FreeRTOS\Source/tasks.c ****         }
3853:..\FreeRTOS\Source/tasks.c **** 
3854:..\FreeRTOS\Source/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
3855:..\FreeRTOS\Source/tasks.c **** 
3856:..\FreeRTOS\Source/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
3857:..\FreeRTOS\Source/tasks.c ****     }
3858:..\FreeRTOS\Source/tasks.c **** 
3859:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3860:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3861:..\FreeRTOS\Source/tasks.c **** 
3862:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3863:..\FreeRTOS\Source/tasks.c **** 
3864:..\FreeRTOS\Source/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3865:..\FreeRTOS\Source/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3866:..\FreeRTOS\Source/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3867:..\FreeRTOS\Source/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3868:..\FreeRTOS\Source/tasks.c ****  * applications that expect an 8-bit return type. */
3869:..\FreeRTOS\Source/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3870:..\FreeRTOS\Source/tasks.c ****     {
3871:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3872:..\FreeRTOS\Source/tasks.c ****         uint8_t * pucEndOfStack;
3873:..\FreeRTOS\Source/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3874:..\FreeRTOS\Source/tasks.c **** 
3875:..\FreeRTOS\Source/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3876:..\FreeRTOS\Source/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3877:..\FreeRTOS\Source/tasks.c ****          * allows the user to determine the return type.  It gets around the
3878:..\FreeRTOS\Source/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3879:..\FreeRTOS\Source/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3880:..\FreeRTOS\Source/tasks.c ****          * type. */
3881:..\FreeRTOS\Source/tasks.c **** 
3882:..\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3883:..\FreeRTOS\Source/tasks.c **** 
3884:..\FreeRTOS\Source/tasks.c ****         #if portSTACK_GROWTH < 0
3885:..\FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 142


3886:..\FreeRTOS\Source/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3887:..\FreeRTOS\Source/tasks.c ****             }
3888:..\FreeRTOS\Source/tasks.c ****         #else
3889:..\FreeRTOS\Source/tasks.c ****             {
3890:..\FreeRTOS\Source/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3891:..\FreeRTOS\Source/tasks.c ****             }
3892:..\FreeRTOS\Source/tasks.c ****         #endif
3893:..\FreeRTOS\Source/tasks.c **** 
3894:..\FreeRTOS\Source/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3895:..\FreeRTOS\Source/tasks.c **** 
3896:..\FreeRTOS\Source/tasks.c ****         return uxReturn;
3897:..\FreeRTOS\Source/tasks.c ****     }
3898:..\FreeRTOS\Source/tasks.c **** 
3899:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3900:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3901:..\FreeRTOS\Source/tasks.c **** 
3902:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3903:..\FreeRTOS\Source/tasks.c **** 
3904:..\FreeRTOS\Source/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3905:..\FreeRTOS\Source/tasks.c ****     {
3906:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
3907:..\FreeRTOS\Source/tasks.c ****         uint8_t * pucEndOfStack;
3908:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxReturn;
3909:..\FreeRTOS\Source/tasks.c **** 
3910:..\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3911:..\FreeRTOS\Source/tasks.c **** 
3912:..\FreeRTOS\Source/tasks.c ****         #if portSTACK_GROWTH < 0
3913:..\FreeRTOS\Source/tasks.c ****             {
3914:..\FreeRTOS\Source/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3915:..\FreeRTOS\Source/tasks.c ****             }
3916:..\FreeRTOS\Source/tasks.c ****         #else
3917:..\FreeRTOS\Source/tasks.c ****             {
3918:..\FreeRTOS\Source/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3919:..\FreeRTOS\Source/tasks.c ****             }
3920:..\FreeRTOS\Source/tasks.c ****         #endif
3921:..\FreeRTOS\Source/tasks.c **** 
3922:..\FreeRTOS\Source/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3923:..\FreeRTOS\Source/tasks.c **** 
3924:..\FreeRTOS\Source/tasks.c ****         return uxReturn;
3925:..\FreeRTOS\Source/tasks.c ****     }
3926:..\FreeRTOS\Source/tasks.c **** 
3927:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3928:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3929:..\FreeRTOS\Source/tasks.c **** 
3930:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3931:..\FreeRTOS\Source/tasks.c **** 
3932:..\FreeRTOS\Source/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3933:..\FreeRTOS\Source/tasks.c ****     {
 4107              		.loc 1 3933 0
 4108              		.cfi_startproc
 4109              		@ args = 0, pretend = 0, frame = 8
 4110              		@ frame_needed = 1, uses_anonymous_args = 0
 4111 0000 80B5     		push	{r7, lr}
 4112              		.cfi_def_cfa_offset 8
 4113              		.cfi_offset 7, -8
 4114              		.cfi_offset 14, -4
 4115 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 143


 4116              		.cfi_def_cfa_offset 16
 4117 0004 00AF     		add	r7, sp, #0
 4118              		.cfi_def_cfa_register 7
 4119 0006 7860     		str	r0, [r7, #4]
3934:..\FreeRTOS\Source/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3935:..\FreeRTOS\Source/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3936:..\FreeRTOS\Source/tasks.c ****          * want to allocate and clean RAM statically. */
3937:..\FreeRTOS\Source/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3938:..\FreeRTOS\Source/tasks.c **** 
3939:..\FreeRTOS\Source/tasks.c ****         /* Free up the memory allocated by the scheduler for the task.  It is up
3940:..\FreeRTOS\Source/tasks.c ****          * to the task to free any memory allocated at the application level.
3941:..\FreeRTOS\Source/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3942:..\FreeRTOS\Source/tasks.c ****          * for additional information. */
3943:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3944:..\FreeRTOS\Source/tasks.c ****             {
3945:..\FreeRTOS\Source/tasks.c ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3946:..\FreeRTOS\Source/tasks.c ****             }
3947:..\FreeRTOS\Source/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3948:..\FreeRTOS\Source/tasks.c **** 
3949:..\FreeRTOS\Source/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3950:..\FreeRTOS\Source/tasks.c ****             {
3951:..\FreeRTOS\Source/tasks.c ****                 /* The task can only have been allocated dynamically - free both
3952:..\FreeRTOS\Source/tasks.c ****                  * the stack and TCB. */
3953:..\FreeRTOS\Source/tasks.c ****                 vPortFree( pxTCB->pxStack );
3954:..\FreeRTOS\Source/tasks.c ****                 vPortFree( pxTCB );
3955:..\FreeRTOS\Source/tasks.c ****             }
3956:..\FreeRTOS\Source/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3957:..\FreeRTOS\Source/tasks.c ****             {
3958:..\FreeRTOS\Source/tasks.c ****                 /* The task could have been allocated statically or dynamically, so
3959:..\FreeRTOS\Source/tasks.c ****                  * check what was statically allocated before trying to free the
3960:..\FreeRTOS\Source/tasks.c ****                  * memory. */
3961:..\FreeRTOS\Source/tasks.c ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 4120              		.loc 1 3961 0
 4121 0008 7B68     		ldr	r3, [r7, #4]
 4122 000a 6722     		movs	r2, #103
 4123 000c 9B5C     		ldrb	r3, [r3, r2]
 4124 000e 002B     		cmp	r3, #0
 4125 0010 09D1     		bne	.L329
3962:..\FreeRTOS\Source/tasks.c ****                 {
3963:..\FreeRTOS\Source/tasks.c ****                     /* Both the stack and TCB were allocated dynamically, so both
3964:..\FreeRTOS\Source/tasks.c ****                      * must be freed. */
3965:..\FreeRTOS\Source/tasks.c ****                     vPortFree( pxTCB->pxStack );
 4126              		.loc 1 3965 0
 4127 0012 7B68     		ldr	r3, [r7, #4]
 4128 0014 1B6B     		ldr	r3, [r3, #48]
 4129 0016 1800     		movs	r0, r3
 4130 0018 FFF7FEFF 		bl	vPortFree
3966:..\FreeRTOS\Source/tasks.c ****                     vPortFree( pxTCB );
 4131              		.loc 1 3966 0
 4132 001c 7B68     		ldr	r3, [r7, #4]
 4133 001e 1800     		movs	r0, r3
 4134 0020 FFF7FEFF 		bl	vPortFree
3967:..\FreeRTOS\Source/tasks.c ****                 }
3968:..\FreeRTOS\Source/tasks.c ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3969:..\FreeRTOS\Source/tasks.c ****                 {
3970:..\FreeRTOS\Source/tasks.c ****                     /* Only the stack was statically allocated, so the TCB is the
3971:..\FreeRTOS\Source/tasks.c ****                      * only memory that must be freed. */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 144


3972:..\FreeRTOS\Source/tasks.c ****                     vPortFree( pxTCB );
3973:..\FreeRTOS\Source/tasks.c ****                 }
3974:..\FreeRTOS\Source/tasks.c ****                 else
3975:..\FreeRTOS\Source/tasks.c ****                 {
3976:..\FreeRTOS\Source/tasks.c ****                     /* Neither the stack nor the TCB were allocated dynamically, so
3977:..\FreeRTOS\Source/tasks.c ****                      * nothing needs to be freed. */
3978:..\FreeRTOS\Source/tasks.c ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
3979:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3980:..\FreeRTOS\Source/tasks.c ****                 }
3981:..\FreeRTOS\Source/tasks.c ****             }
3982:..\FreeRTOS\Source/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3983:..\FreeRTOS\Source/tasks.c ****     }
 4135              		.loc 1 3983 0
 4136 0024 0FE0     		b	.L334
 4137              	.L329:
3968:..\FreeRTOS\Source/tasks.c ****                 {
 4138              		.loc 1 3968 0
 4139 0026 7B68     		ldr	r3, [r7, #4]
 4140 0028 6722     		movs	r2, #103
 4141 002a 9B5C     		ldrb	r3, [r3, r2]
 4142 002c 012B     		cmp	r3, #1
 4143 002e 04D1     		bne	.L331
3972:..\FreeRTOS\Source/tasks.c ****                 }
 4144              		.loc 1 3972 0
 4145 0030 7B68     		ldr	r3, [r7, #4]
 4146 0032 1800     		movs	r0, r3
 4147 0034 FFF7FEFF 		bl	vPortFree
 4148              		.loc 1 3983 0
 4149 0038 05E0     		b	.L334
 4150              	.L331:
3978:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
 4151              		.loc 1 3978 0
 4152 003a 054B     		ldr	r3, .L335
 4153 003c 1B88     		ldrh	r3, [r3]
 4154 003e 002B     		cmp	r3, #0
 4155 0040 01D1     		bne	.L334
3978:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
 4156              		.loc 1 3978 0 is_stmt 0 discriminator 1
 4157              		.syntax divided
 4158              	@ 3978 "..\FreeRTOS\Source\tasks.c" 1
 4159 0042 72B6     		 cpsid i 
 4160              	@ 0 "" 2
 4161              		.thumb
 4162              		.syntax unified
 4163              	.L333:
 4164 0044 FEE7     		b	.L333
 4165              	.L334:
 4166              		.loc 1 3983 0 is_stmt 1
 4167 0046 C046     		nop
 4168 0048 BD46     		mov	sp, r7
 4169 004a 02B0     		add	sp, sp, #8
 4170              		@ sp needed
 4171 004c 80BD     		pop	{r7, pc}
 4172              	.L336:
 4173 004e C046     		.align	2
 4174              	.L335:
 4175 0050 00000000 		.word	x
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 145


 4176              		.cfi_endproc
 4177              	.LFE39:
 4178              		.size	prvDeleteTCB, .-prvDeleteTCB
 4179              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4180              		.align	2
 4181              		.code	16
 4182              		.thumb_func
 4183              		.type	prvResetNextTaskUnblockTime, %function
 4184              	prvResetNextTaskUnblockTime:
 4185              	.LFB40:
3984:..\FreeRTOS\Source/tasks.c **** 
3985:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3986:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3987:..\FreeRTOS\Source/tasks.c **** 
3988:..\FreeRTOS\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3989:..\FreeRTOS\Source/tasks.c **** {
 4186              		.loc 1 3989 0
 4187              		.cfi_startproc
 4188              		@ args = 0, pretend = 0, frame = 0
 4189              		@ frame_needed = 1, uses_anonymous_args = 0
 4190 0000 80B5     		push	{r7, lr}
 4191              		.cfi_def_cfa_offset 8
 4192              		.cfi_offset 7, -8
 4193              		.cfi_offset 14, -4
 4194 0002 00AF     		add	r7, sp, #0
 4195              		.cfi_def_cfa_register 7
3990:..\FreeRTOS\Source/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4196              		.loc 1 3990 0
 4197 0004 094B     		ldr	r3, .L341
 4198 0006 1B68     		ldr	r3, [r3]
 4199 0008 1B68     		ldr	r3, [r3]
 4200 000a 002B     		cmp	r3, #0
 4201 000c 04D1     		bne	.L338
3991:..\FreeRTOS\Source/tasks.c ****     {
3992:..\FreeRTOS\Source/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3993:..\FreeRTOS\Source/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
3994:..\FreeRTOS\Source/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3995:..\FreeRTOS\Source/tasks.c ****          * there is an item in the delayed list. */
3996:..\FreeRTOS\Source/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 4202              		.loc 1 3996 0
 4203 000e 084B     		ldr	r3, .L341+4
 4204 0010 0122     		movs	r2, #1
 4205 0012 5242     		rsbs	r2, r2, #0
 4206 0014 1A60     		str	r2, [r3]
3997:..\FreeRTOS\Source/tasks.c ****     }
3998:..\FreeRTOS\Source/tasks.c ****     else
3999:..\FreeRTOS\Source/tasks.c ****     {
4000:..\FreeRTOS\Source/tasks.c ****         /* The new current delayed list is not empty, get the value of
4001:..\FreeRTOS\Source/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4002:..\FreeRTOS\Source/tasks.c ****          * which the task at the head of the delayed list should be removed
4003:..\FreeRTOS\Source/tasks.c ****          * from the Blocked state. */
4004:..\FreeRTOS\Source/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
4005:..\FreeRTOS\Source/tasks.c ****     }
4006:..\FreeRTOS\Source/tasks.c **** }
 4207              		.loc 1 4006 0
 4208 0016 05E0     		b	.L340
 4209              	.L338:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 146


4004:..\FreeRTOS\Source/tasks.c ****     }
 4210              		.loc 1 4004 0
 4211 0018 044B     		ldr	r3, .L341
 4212 001a 1B68     		ldr	r3, [r3]
 4213 001c DB68     		ldr	r3, [r3, #12]
 4214 001e 1A68     		ldr	r2, [r3]
 4215 0020 034B     		ldr	r3, .L341+4
 4216 0022 1A60     		str	r2, [r3]
 4217              	.L340:
 4218              		.loc 1 4006 0
 4219 0024 C046     		nop
 4220 0026 BD46     		mov	sp, r7
 4221              		@ sp needed
 4222 0028 80BD     		pop	{r7, pc}
 4223              	.L342:
 4224 002a C046     		.align	2
 4225              	.L341:
 4226 002c 90000000 		.word	pxDelayedTaskList
 4227 0030 F8000000 		.word	xNextTaskUnblockTime
 4228              		.cfi_endproc
 4229              	.LFE40:
 4230              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 4231              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4232              		.align	2
 4233              		.global	xTaskGetCurrentTaskHandle
 4234              		.code	16
 4235              		.thumb_func
 4236              		.type	xTaskGetCurrentTaskHandle, %function
 4237              	xTaskGetCurrentTaskHandle:
 4238              	.LFB41:
4007:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4008:..\FreeRTOS\Source/tasks.c **** 
4009:..\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4010:..\FreeRTOS\Source/tasks.c **** 
4011:..\FreeRTOS\Source/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4012:..\FreeRTOS\Source/tasks.c ****     {
 4239              		.loc 1 4012 0
 4240              		.cfi_startproc
 4241              		@ args = 0, pretend = 0, frame = 8
 4242              		@ frame_needed = 1, uses_anonymous_args = 0
 4243 0000 80B5     		push	{r7, lr}
 4244              		.cfi_def_cfa_offset 8
 4245              		.cfi_offset 7, -8
 4246              		.cfi_offset 14, -4
 4247 0002 82B0     		sub	sp, sp, #8
 4248              		.cfi_def_cfa_offset 16
 4249 0004 00AF     		add	r7, sp, #0
 4250              		.cfi_def_cfa_register 7
4013:..\FreeRTOS\Source/tasks.c ****         TaskHandle_t xReturn;
4014:..\FreeRTOS\Source/tasks.c **** 
4015:..\FreeRTOS\Source/tasks.c ****         /* A critical section is not required as this is not called from
4016:..\FreeRTOS\Source/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4017:..\FreeRTOS\Source/tasks.c ****          * individual execution thread. */
4018:..\FreeRTOS\Source/tasks.c ****         xReturn = pxCurrentTCB;
 4251              		.loc 1 4018 0
 4252 0006 044B     		ldr	r3, .L345
 4253 0008 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 147


 4254 000a 7B60     		str	r3, [r7, #4]
4019:..\FreeRTOS\Source/tasks.c **** 
4020:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 4255              		.loc 1 4020 0
 4256 000c 7B68     		ldr	r3, [r7, #4]
4021:..\FreeRTOS\Source/tasks.c ****     }
 4257              		.loc 1 4021 0
 4258 000e 1800     		movs	r0, r3
 4259 0010 BD46     		mov	sp, r7
 4260 0012 02B0     		add	sp, sp, #8
 4261              		@ sp needed
 4262 0014 80BD     		pop	{r7, pc}
 4263              	.L346:
 4264 0016 C046     		.align	2
 4265              	.L345:
 4266 0018 00000000 		.word	pxCurrentTCB
 4267              		.cfi_endproc
 4268              	.LFE41:
 4269              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4270              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4271              		.align	2
 4272              		.global	xTaskGetSchedulerState
 4273              		.code	16
 4274              		.thumb_func
 4275              		.type	xTaskGetSchedulerState, %function
 4276              	xTaskGetSchedulerState:
 4277              	.LFB42:
4022:..\FreeRTOS\Source/tasks.c **** 
4023:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4024:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4025:..\FreeRTOS\Source/tasks.c **** 
4026:..\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4027:..\FreeRTOS\Source/tasks.c **** 
4028:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4029:..\FreeRTOS\Source/tasks.c ****     {
 4278              		.loc 1 4029 0
 4279              		.cfi_startproc
 4280              		@ args = 0, pretend = 0, frame = 8
 4281              		@ frame_needed = 1, uses_anonymous_args = 0
 4282 0000 80B5     		push	{r7, lr}
 4283              		.cfi_def_cfa_offset 8
 4284              		.cfi_offset 7, -8
 4285              		.cfi_offset 14, -4
 4286 0002 82B0     		sub	sp, sp, #8
 4287              		.cfi_def_cfa_offset 16
 4288 0004 00AF     		add	r7, sp, #0
 4289              		.cfi_def_cfa_register 7
4030:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
4031:..\FreeRTOS\Source/tasks.c **** 
4032:..\FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning == pdFALSE )
 4290              		.loc 1 4032 0
 4291 0006 0A4B     		ldr	r3, .L352
 4292 0008 1B68     		ldr	r3, [r3]
 4293 000a 002B     		cmp	r3, #0
 4294 000c 02D1     		bne	.L348
4033:..\FreeRTOS\Source/tasks.c ****         {
4034:..\FreeRTOS\Source/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 148


 4295              		.loc 1 4034 0
 4296 000e 0123     		movs	r3, #1
 4297 0010 7B60     		str	r3, [r7, #4]
 4298 0012 08E0     		b	.L349
 4299              	.L348:
4035:..\FreeRTOS\Source/tasks.c ****         }
4036:..\FreeRTOS\Source/tasks.c ****         else
4037:..\FreeRTOS\Source/tasks.c ****         {
4038:..\FreeRTOS\Source/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4300              		.loc 1 4038 0
 4301 0014 074B     		ldr	r3, .L352+4
 4302 0016 1B68     		ldr	r3, [r3]
 4303 0018 002B     		cmp	r3, #0
 4304 001a 02D1     		bne	.L350
4039:..\FreeRTOS\Source/tasks.c ****             {
4040:..\FreeRTOS\Source/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
 4305              		.loc 1 4040 0
 4306 001c 0223     		movs	r3, #2
 4307 001e 7B60     		str	r3, [r7, #4]
 4308 0020 01E0     		b	.L349
 4309              	.L350:
4041:..\FreeRTOS\Source/tasks.c ****             }
4042:..\FreeRTOS\Source/tasks.c ****             else
4043:..\FreeRTOS\Source/tasks.c ****             {
4044:..\FreeRTOS\Source/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
 4310              		.loc 1 4044 0
 4311 0022 0023     		movs	r3, #0
 4312 0024 7B60     		str	r3, [r7, #4]
 4313              	.L349:
4045:..\FreeRTOS\Source/tasks.c ****             }
4046:..\FreeRTOS\Source/tasks.c ****         }
4047:..\FreeRTOS\Source/tasks.c **** 
4048:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 4314              		.loc 1 4048 0
 4315 0026 7B68     		ldr	r3, [r7, #4]
4049:..\FreeRTOS\Source/tasks.c ****     }
 4316              		.loc 1 4049 0
 4317 0028 1800     		movs	r0, r3
 4318 002a BD46     		mov	sp, r7
 4319 002c 02B0     		add	sp, sp, #8
 4320              		@ sp needed
 4321 002e 80BD     		pop	{r7, pc}
 4322              	.L353:
 4323              		.align	2
 4324              	.L352:
 4325 0030 E4000000 		.word	xSchedulerRunning
 4326 0034 00010000 		.word	uxSchedulerSuspended
 4327              		.cfi_endproc
 4328              	.LFE42:
 4329              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 4330              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4331              		.align	2
 4332              		.global	uxTaskResetEventItemValue
 4333              		.code	16
 4334              		.thumb_func
 4335              		.type	uxTaskResetEventItemValue, %function
 4336              	uxTaskResetEventItemValue:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 149


 4337              	.LFB43:
4050:..\FreeRTOS\Source/tasks.c **** 
4051:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4052:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4053:..\FreeRTOS\Source/tasks.c **** 
4054:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4055:..\FreeRTOS\Source/tasks.c **** 
4056:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4057:..\FreeRTOS\Source/tasks.c ****     {
4058:..\FreeRTOS\Source/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4059:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
4060:..\FreeRTOS\Source/tasks.c **** 
4061:..\FreeRTOS\Source/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4062:..\FreeRTOS\Source/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4063:..\FreeRTOS\Source/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4064:..\FreeRTOS\Source/tasks.c ****         if( pxMutexHolder != NULL )
4065:..\FreeRTOS\Source/tasks.c ****         {
4066:..\FreeRTOS\Source/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4067:..\FreeRTOS\Source/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4068:..\FreeRTOS\Source/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4069:..\FreeRTOS\Source/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4070:..\FreeRTOS\Source/tasks.c ****             {
4071:..\FreeRTOS\Source/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4072:..\FreeRTOS\Source/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4073:..\FreeRTOS\Source/tasks.c ****                  * not being used for anything else. */
4074:..\FreeRTOS\Source/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4075:..\FreeRTOS\Source/tasks.c ****                 {
4076:..\FreeRTOS\Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4077:..\FreeRTOS\Source/tasks.c ****                 }
4078:..\FreeRTOS\Source/tasks.c ****                 else
4079:..\FreeRTOS\Source/tasks.c ****                 {
4080:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4081:..\FreeRTOS\Source/tasks.c ****                 }
4082:..\FreeRTOS\Source/tasks.c **** 
4083:..\FreeRTOS\Source/tasks.c ****                 /* If the task being modified is in the ready state it will need
4084:..\FreeRTOS\Source/tasks.c ****                  * to be moved into a new list. */
4085:..\FreeRTOS\Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4086:..\FreeRTOS\Source/tasks.c ****                 {
4087:..\FreeRTOS\Source/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4088:..\FreeRTOS\Source/tasks.c ****                     {
4089:..\FreeRTOS\Source/tasks.c ****                         /* It is known that the task is in its ready list so
4090:..\FreeRTOS\Source/tasks.c ****                          * there is no need to check again and the port level
4091:..\FreeRTOS\Source/tasks.c ****                          * reset macro can be called directly. */
4092:..\FreeRTOS\Source/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4093:..\FreeRTOS\Source/tasks.c ****                     }
4094:..\FreeRTOS\Source/tasks.c ****                     else
4095:..\FreeRTOS\Source/tasks.c ****                     {
4096:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4097:..\FreeRTOS\Source/tasks.c ****                     }
4098:..\FreeRTOS\Source/tasks.c **** 
4099:..\FreeRTOS\Source/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4100:..\FreeRTOS\Source/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4101:..\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4102:..\FreeRTOS\Source/tasks.c ****                 }
4103:..\FreeRTOS\Source/tasks.c ****                 else
4104:..\FreeRTOS\Source/tasks.c ****                 {
4105:..\FreeRTOS\Source/tasks.c ****                     /* Just inherit the priority. */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 150


4106:..\FreeRTOS\Source/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4107:..\FreeRTOS\Source/tasks.c ****                 }
4108:..\FreeRTOS\Source/tasks.c **** 
4109:..\FreeRTOS\Source/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4110:..\FreeRTOS\Source/tasks.c **** 
4111:..\FreeRTOS\Source/tasks.c ****                 /* Inheritance occurred. */
4112:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
4113:..\FreeRTOS\Source/tasks.c ****             }
4114:..\FreeRTOS\Source/tasks.c ****             else
4115:..\FreeRTOS\Source/tasks.c ****             {
4116:..\FreeRTOS\Source/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4117:..\FreeRTOS\Source/tasks.c ****                 {
4118:..\FreeRTOS\Source/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4119:..\FreeRTOS\Source/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4120:..\FreeRTOS\Source/tasks.c ****                      * current priority of the mutex holder is not lower than the
4121:..\FreeRTOS\Source/tasks.c ****                      * priority of the task attempting to take the mutex.
4122:..\FreeRTOS\Source/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4123:..\FreeRTOS\Source/tasks.c ****                      * priority, but inheritance would have occurred if that had
4124:..\FreeRTOS\Source/tasks.c ****                      * not been the case. */
4125:..\FreeRTOS\Source/tasks.c ****                     xReturn = pdTRUE;
4126:..\FreeRTOS\Source/tasks.c ****                 }
4127:..\FreeRTOS\Source/tasks.c ****                 else
4128:..\FreeRTOS\Source/tasks.c ****                 {
4129:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4130:..\FreeRTOS\Source/tasks.c ****                 }
4131:..\FreeRTOS\Source/tasks.c ****             }
4132:..\FreeRTOS\Source/tasks.c ****         }
4133:..\FreeRTOS\Source/tasks.c ****         else
4134:..\FreeRTOS\Source/tasks.c ****         {
4135:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4136:..\FreeRTOS\Source/tasks.c ****         }
4137:..\FreeRTOS\Source/tasks.c **** 
4138:..\FreeRTOS\Source/tasks.c ****         return xReturn;
4139:..\FreeRTOS\Source/tasks.c ****     }
4140:..\FreeRTOS\Source/tasks.c **** 
4141:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4142:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4143:..\FreeRTOS\Source/tasks.c **** 
4144:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4145:..\FreeRTOS\Source/tasks.c **** 
4146:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4147:..\FreeRTOS\Source/tasks.c ****     {
4148:..\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4149:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
4150:..\FreeRTOS\Source/tasks.c **** 
4151:..\FreeRTOS\Source/tasks.c ****         if( pxMutexHolder != NULL )
4152:..\FreeRTOS\Source/tasks.c ****         {
4153:..\FreeRTOS\Source/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4154:..\FreeRTOS\Source/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4155:..\FreeRTOS\Source/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4156:..\FreeRTOS\Source/tasks.c ****              * be the running state task. */
4157:..\FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4158:..\FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4159:..\FreeRTOS\Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4160:..\FreeRTOS\Source/tasks.c **** 
4161:..\FreeRTOS\Source/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4162:..\FreeRTOS\Source/tasks.c ****              * task? */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 151


4163:..\FreeRTOS\Source/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4164:..\FreeRTOS\Source/tasks.c ****             {
4165:..\FreeRTOS\Source/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4166:..\FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4167:..\FreeRTOS\Source/tasks.c ****                 {
4168:..\FreeRTOS\Source/tasks.c ****                     /* A task can only have an inherited priority if it holds
4169:..\FreeRTOS\Source/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4170:..\FreeRTOS\Source/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4171:..\FreeRTOS\Source/tasks.c ****                      * holding task then it must be the running state task.  Remove
4172:..\FreeRTOS\Source/tasks.c ****                      * the holding task from the ready list. */
4173:..\FreeRTOS\Source/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4174:..\FreeRTOS\Source/tasks.c ****                     {
4175:..\FreeRTOS\Source/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4176:..\FreeRTOS\Source/tasks.c ****                     }
4177:..\FreeRTOS\Source/tasks.c ****                     else
4178:..\FreeRTOS\Source/tasks.c ****                     {
4179:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4180:..\FreeRTOS\Source/tasks.c ****                     }
4181:..\FreeRTOS\Source/tasks.c **** 
4182:..\FreeRTOS\Source/tasks.c ****                     /* Disinherit the priority before adding the task into the
4183:..\FreeRTOS\Source/tasks.c ****                      * new  ready list. */
4184:..\FreeRTOS\Source/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4185:..\FreeRTOS\Source/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4186:..\FreeRTOS\Source/tasks.c **** 
4187:..\FreeRTOS\Source/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4188:..\FreeRTOS\Source/tasks.c ****                      * any other purpose if this task is running, and it must be
4189:..\FreeRTOS\Source/tasks.c ****                      * running to give back the mutex. */
4190:..\FreeRTOS\Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4191:..\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4192:..\FreeRTOS\Source/tasks.c **** 
4193:..\FreeRTOS\Source/tasks.c ****                     /* Return true to indicate that a context switch is required.
4194:..\FreeRTOS\Source/tasks.c ****                      * This is only actually required in the corner case whereby
4195:..\FreeRTOS\Source/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4196:..\FreeRTOS\Source/tasks.c ****                      * in an order different to that in which they were taken.
4197:..\FreeRTOS\Source/tasks.c ****                      * If a context switch did not occur when the first mutex was
4198:..\FreeRTOS\Source/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4199:..\FreeRTOS\Source/tasks.c ****                      * switch should occur when the last mutex is returned whether
4200:..\FreeRTOS\Source/tasks.c ****                      * a task is waiting on it or not. */
4201:..\FreeRTOS\Source/tasks.c ****                     xReturn = pdTRUE;
4202:..\FreeRTOS\Source/tasks.c ****                 }
4203:..\FreeRTOS\Source/tasks.c ****                 else
4204:..\FreeRTOS\Source/tasks.c ****                 {
4205:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4206:..\FreeRTOS\Source/tasks.c ****                 }
4207:..\FreeRTOS\Source/tasks.c ****             }
4208:..\FreeRTOS\Source/tasks.c ****             else
4209:..\FreeRTOS\Source/tasks.c ****             {
4210:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4211:..\FreeRTOS\Source/tasks.c ****             }
4212:..\FreeRTOS\Source/tasks.c ****         }
4213:..\FreeRTOS\Source/tasks.c ****         else
4214:..\FreeRTOS\Source/tasks.c ****         {
4215:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4216:..\FreeRTOS\Source/tasks.c ****         }
4217:..\FreeRTOS\Source/tasks.c **** 
4218:..\FreeRTOS\Source/tasks.c ****         return xReturn;
4219:..\FreeRTOS\Source/tasks.c ****     }
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 152


4220:..\FreeRTOS\Source/tasks.c **** 
4221:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4222:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4223:..\FreeRTOS\Source/tasks.c **** 
4224:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4225:..\FreeRTOS\Source/tasks.c **** 
4226:..\FreeRTOS\Source/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4227:..\FreeRTOS\Source/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4228:..\FreeRTOS\Source/tasks.c ****     {
4229:..\FreeRTOS\Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4230:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4231:..\FreeRTOS\Source/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4232:..\FreeRTOS\Source/tasks.c **** 
4233:..\FreeRTOS\Source/tasks.c ****         if( pxMutexHolder != NULL )
4234:..\FreeRTOS\Source/tasks.c ****         {
4235:..\FreeRTOS\Source/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4236:..\FreeRTOS\Source/tasks.c ****              * one mutex. */
4237:..\FreeRTOS\Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4238:..\FreeRTOS\Source/tasks.c **** 
4239:..\FreeRTOS\Source/tasks.c ****             /* Determine the priority to which the priority of the task that
4240:..\FreeRTOS\Source/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4241:..\FreeRTOS\Source/tasks.c ****              * holding task's base priority and the priority of the highest
4242:..\FreeRTOS\Source/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4243:..\FreeRTOS\Source/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4244:..\FreeRTOS\Source/tasks.c ****             {
4245:..\FreeRTOS\Source/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4246:..\FreeRTOS\Source/tasks.c ****             }
4247:..\FreeRTOS\Source/tasks.c ****             else
4248:..\FreeRTOS\Source/tasks.c ****             {
4249:..\FreeRTOS\Source/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4250:..\FreeRTOS\Source/tasks.c ****             }
4251:..\FreeRTOS\Source/tasks.c **** 
4252:..\FreeRTOS\Source/tasks.c ****             /* Does the priority need to change? */
4253:..\FreeRTOS\Source/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4254:..\FreeRTOS\Source/tasks.c ****             {
4255:..\FreeRTOS\Source/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4256:..\FreeRTOS\Source/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4257:..\FreeRTOS\Source/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4258:..\FreeRTOS\Source/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4259:..\FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4260:..\FreeRTOS\Source/tasks.c ****                 {
4261:..\FreeRTOS\Source/tasks.c ****                     /* If a task has timed out because it already holds the
4262:..\FreeRTOS\Source/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4263:..\FreeRTOS\Source/tasks.c ****                      * its own priority. */
4264:..\FreeRTOS\Source/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4265:..\FreeRTOS\Source/tasks.c **** 
4266:..\FreeRTOS\Source/tasks.c ****                     /* Disinherit the priority, remembering the previous
4267:..\FreeRTOS\Source/tasks.c ****                      * priority to facilitate determining the subject task's
4268:..\FreeRTOS\Source/tasks.c ****                      * state. */
4269:..\FreeRTOS\Source/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4270:..\FreeRTOS\Source/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4271:..\FreeRTOS\Source/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4272:..\FreeRTOS\Source/tasks.c **** 
4273:..\FreeRTOS\Source/tasks.c ****                     /* Only reset the event list item value if the value is not
4274:..\FreeRTOS\Source/tasks.c ****                      * being used for anything else. */
4275:..\FreeRTOS\Source/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4276:..\FreeRTOS\Source/tasks.c ****                     {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 153


4277:..\FreeRTOS\Source/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4278:..\FreeRTOS\Source/tasks.c ****                     }
4279:..\FreeRTOS\Source/tasks.c ****                     else
4280:..\FreeRTOS\Source/tasks.c ****                     {
4281:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4282:..\FreeRTOS\Source/tasks.c ****                     }
4283:..\FreeRTOS\Source/tasks.c **** 
4284:..\FreeRTOS\Source/tasks.c ****                     /* If the running task is not the task that holds the mutex
4285:..\FreeRTOS\Source/tasks.c ****                      * then the task that holds the mutex could be in either the
4286:..\FreeRTOS\Source/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4287:..\FreeRTOS\Source/tasks.c ****                      * from its current state list if it is in the Ready state as
4288:..\FreeRTOS\Source/tasks.c ****                      * the task's priority is going to change and there is one
4289:..\FreeRTOS\Source/tasks.c ****                      * Ready list per priority. */
4290:..\FreeRTOS\Source/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4291:..\FreeRTOS\Source/tasks.c ****                     {
4292:..\FreeRTOS\Source/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4293:..\FreeRTOS\Source/tasks.c ****                         {
4294:..\FreeRTOS\Source/tasks.c ****                             /* It is known that the task is in its ready list so
4295:..\FreeRTOS\Source/tasks.c ****                              * there is no need to check again and the port level
4296:..\FreeRTOS\Source/tasks.c ****                              * reset macro can be called directly. */
4297:..\FreeRTOS\Source/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4298:..\FreeRTOS\Source/tasks.c ****                         }
4299:..\FreeRTOS\Source/tasks.c ****                         else
4300:..\FreeRTOS\Source/tasks.c ****                         {
4301:..\FreeRTOS\Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4302:..\FreeRTOS\Source/tasks.c ****                         }
4303:..\FreeRTOS\Source/tasks.c **** 
4304:..\FreeRTOS\Source/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4305:..\FreeRTOS\Source/tasks.c ****                     }
4306:..\FreeRTOS\Source/tasks.c ****                     else
4307:..\FreeRTOS\Source/tasks.c ****                     {
4308:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4309:..\FreeRTOS\Source/tasks.c ****                     }
4310:..\FreeRTOS\Source/tasks.c ****                 }
4311:..\FreeRTOS\Source/tasks.c ****                 else
4312:..\FreeRTOS\Source/tasks.c ****                 {
4313:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4314:..\FreeRTOS\Source/tasks.c ****                 }
4315:..\FreeRTOS\Source/tasks.c ****             }
4316:..\FreeRTOS\Source/tasks.c ****             else
4317:..\FreeRTOS\Source/tasks.c ****             {
4318:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4319:..\FreeRTOS\Source/tasks.c ****             }
4320:..\FreeRTOS\Source/tasks.c ****         }
4321:..\FreeRTOS\Source/tasks.c ****         else
4322:..\FreeRTOS\Source/tasks.c ****         {
4323:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4324:..\FreeRTOS\Source/tasks.c ****         }
4325:..\FreeRTOS\Source/tasks.c ****     }
4326:..\FreeRTOS\Source/tasks.c **** 
4327:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4328:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4329:..\FreeRTOS\Source/tasks.c **** 
4330:..\FreeRTOS\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4331:..\FreeRTOS\Source/tasks.c **** 
4332:..\FreeRTOS\Source/tasks.c ****     void vTaskEnterCritical( void )
4333:..\FreeRTOS\Source/tasks.c ****     {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 154


4334:..\FreeRTOS\Source/tasks.c ****         portDISABLE_INTERRUPTS();
4335:..\FreeRTOS\Source/tasks.c **** 
4336:..\FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4337:..\FreeRTOS\Source/tasks.c ****         {
4338:..\FreeRTOS\Source/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4339:..\FreeRTOS\Source/tasks.c **** 
4340:..\FreeRTOS\Source/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4341:..\FreeRTOS\Source/tasks.c ****              * function so  assert() if it is being called from an interrupt
4342:..\FreeRTOS\Source/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4343:..\FreeRTOS\Source/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4344:..\FreeRTOS\Source/tasks.c ****              * protect against recursive calls if the assert function also uses a
4345:..\FreeRTOS\Source/tasks.c ****              * critical section. */
4346:..\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4347:..\FreeRTOS\Source/tasks.c ****             {
4348:..\FreeRTOS\Source/tasks.c ****                 portASSERT_IF_IN_ISR();
4349:..\FreeRTOS\Source/tasks.c ****             }
4350:..\FreeRTOS\Source/tasks.c ****         }
4351:..\FreeRTOS\Source/tasks.c ****         else
4352:..\FreeRTOS\Source/tasks.c ****         {
4353:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4354:..\FreeRTOS\Source/tasks.c ****         }
4355:..\FreeRTOS\Source/tasks.c ****     }
4356:..\FreeRTOS\Source/tasks.c **** 
4357:..\FreeRTOS\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4358:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4359:..\FreeRTOS\Source/tasks.c **** 
4360:..\FreeRTOS\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4361:..\FreeRTOS\Source/tasks.c **** 
4362:..\FreeRTOS\Source/tasks.c ****     void vTaskExitCritical( void )
4363:..\FreeRTOS\Source/tasks.c ****     {
4364:..\FreeRTOS\Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4365:..\FreeRTOS\Source/tasks.c ****         {
4366:..\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4367:..\FreeRTOS\Source/tasks.c ****             {
4368:..\FreeRTOS\Source/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4369:..\FreeRTOS\Source/tasks.c **** 
4370:..\FreeRTOS\Source/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4371:..\FreeRTOS\Source/tasks.c ****                 {
4372:..\FreeRTOS\Source/tasks.c ****                     portENABLE_INTERRUPTS();
4373:..\FreeRTOS\Source/tasks.c ****                 }
4374:..\FreeRTOS\Source/tasks.c ****                 else
4375:..\FreeRTOS\Source/tasks.c ****                 {
4376:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4377:..\FreeRTOS\Source/tasks.c ****                 }
4378:..\FreeRTOS\Source/tasks.c ****             }
4379:..\FreeRTOS\Source/tasks.c ****             else
4380:..\FreeRTOS\Source/tasks.c ****             {
4381:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4382:..\FreeRTOS\Source/tasks.c ****             }
4383:..\FreeRTOS\Source/tasks.c ****         }
4384:..\FreeRTOS\Source/tasks.c ****         else
4385:..\FreeRTOS\Source/tasks.c ****         {
4386:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4387:..\FreeRTOS\Source/tasks.c ****         }
4388:..\FreeRTOS\Source/tasks.c ****     }
4389:..\FreeRTOS\Source/tasks.c **** 
4390:..\FreeRTOS\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 155


4391:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4392:..\FreeRTOS\Source/tasks.c **** 
4393:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4394:..\FreeRTOS\Source/tasks.c **** 
4395:..\FreeRTOS\Source/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4396:..\FreeRTOS\Source/tasks.c ****                                         const char * pcTaskName )
4397:..\FreeRTOS\Source/tasks.c ****     {
4398:..\FreeRTOS\Source/tasks.c ****         size_t x;
4399:..\FreeRTOS\Source/tasks.c **** 
4400:..\FreeRTOS\Source/tasks.c ****         /* Start by copying the entire string. */
4401:..\FreeRTOS\Source/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4402:..\FreeRTOS\Source/tasks.c **** 
4403:..\FreeRTOS\Source/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4404:..\FreeRTOS\Source/tasks.c ****          * printed out. */
4405:..\FreeRTOS\Source/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4406:..\FreeRTOS\Source/tasks.c ****         {
4407:..\FreeRTOS\Source/tasks.c ****             pcBuffer[ x ] = ' ';
4408:..\FreeRTOS\Source/tasks.c ****         }
4409:..\FreeRTOS\Source/tasks.c **** 
4410:..\FreeRTOS\Source/tasks.c ****         /* Terminate. */
4411:..\FreeRTOS\Source/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4412:..\FreeRTOS\Source/tasks.c **** 
4413:..\FreeRTOS\Source/tasks.c ****         /* Return the new end of string. */
4414:..\FreeRTOS\Source/tasks.c ****         return &( pcBuffer[ x ] );
4415:..\FreeRTOS\Source/tasks.c ****     }
4416:..\FreeRTOS\Source/tasks.c **** 
4417:..\FreeRTOS\Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4418:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4419:..\FreeRTOS\Source/tasks.c **** 
4420:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4421:..\FreeRTOS\Source/tasks.c **** 
4422:..\FreeRTOS\Source/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4423:..\FreeRTOS\Source/tasks.c ****     {
4424:..\FreeRTOS\Source/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4425:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxArraySize, x;
4426:..\FreeRTOS\Source/tasks.c ****         char cStatus;
4427:..\FreeRTOS\Source/tasks.c **** 
4428:..\FreeRTOS\Source/tasks.c ****         /*
4429:..\FreeRTOS\Source/tasks.c ****          * PLEASE NOTE:
4430:..\FreeRTOS\Source/tasks.c ****          *
4431:..\FreeRTOS\Source/tasks.c ****          * This function is provided for convenience only, and is used by many
4432:..\FreeRTOS\Source/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4433:..\FreeRTOS\Source/tasks.c ****          * scheduler.
4434:..\FreeRTOS\Source/tasks.c ****          *
4435:..\FreeRTOS\Source/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4436:..\FreeRTOS\Source/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4437:..\FreeRTOS\Source/tasks.c ****          * displays task names, states and stack usage.
4438:..\FreeRTOS\Source/tasks.c ****          *
4439:..\FreeRTOS\Source/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4440:..\FreeRTOS\Source/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4441:..\FreeRTOS\Source/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4442:..\FreeRTOS\Source/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4443:..\FreeRTOS\Source/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4444:..\FreeRTOS\Source/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4445:..\FreeRTOS\Source/tasks.c ****          * snprintf() implementation!).
4446:..\FreeRTOS\Source/tasks.c ****          *
4447:..\FreeRTOS\Source/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 156


4448:..\FreeRTOS\Source/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4449:..\FreeRTOS\Source/tasks.c ****          * through a call to vTaskList().
4450:..\FreeRTOS\Source/tasks.c ****          */
4451:..\FreeRTOS\Source/tasks.c **** 
4452:..\FreeRTOS\Source/tasks.c **** 
4453:..\FreeRTOS\Source/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4454:..\FreeRTOS\Source/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4455:..\FreeRTOS\Source/tasks.c **** 
4456:..\FreeRTOS\Source/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4457:..\FreeRTOS\Source/tasks.c ****          * function is executing. */
4458:..\FreeRTOS\Source/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4459:..\FreeRTOS\Source/tasks.c **** 
4460:..\FreeRTOS\Source/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4461:..\FreeRTOS\Source/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4462:..\FreeRTOS\Source/tasks.c ****          * equate to NULL. */
4463:..\FreeRTOS\Source/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4464:..\FreeRTOS\Source/tasks.c **** 
4465:..\FreeRTOS\Source/tasks.c ****         if( pxTaskStatusArray != NULL )
4466:..\FreeRTOS\Source/tasks.c ****         {
4467:..\FreeRTOS\Source/tasks.c ****             /* Generate the (binary) data. */
4468:..\FreeRTOS\Source/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4469:..\FreeRTOS\Source/tasks.c **** 
4470:..\FreeRTOS\Source/tasks.c ****             /* Create a human readable table from the binary data. */
4471:..\FreeRTOS\Source/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4472:..\FreeRTOS\Source/tasks.c ****             {
4473:..\FreeRTOS\Source/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4474:..\FreeRTOS\Source/tasks.c ****                 {
4475:..\FreeRTOS\Source/tasks.c ****                     case eRunning:
4476:..\FreeRTOS\Source/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4477:..\FreeRTOS\Source/tasks.c ****                         break;
4478:..\FreeRTOS\Source/tasks.c **** 
4479:..\FreeRTOS\Source/tasks.c ****                     case eReady:
4480:..\FreeRTOS\Source/tasks.c ****                         cStatus = tskREADY_CHAR;
4481:..\FreeRTOS\Source/tasks.c ****                         break;
4482:..\FreeRTOS\Source/tasks.c **** 
4483:..\FreeRTOS\Source/tasks.c ****                     case eBlocked:
4484:..\FreeRTOS\Source/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4485:..\FreeRTOS\Source/tasks.c ****                         break;
4486:..\FreeRTOS\Source/tasks.c **** 
4487:..\FreeRTOS\Source/tasks.c ****                     case eSuspended:
4488:..\FreeRTOS\Source/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4489:..\FreeRTOS\Source/tasks.c ****                         break;
4490:..\FreeRTOS\Source/tasks.c **** 
4491:..\FreeRTOS\Source/tasks.c ****                     case eDeleted:
4492:..\FreeRTOS\Source/tasks.c ****                         cStatus = tskDELETED_CHAR;
4493:..\FreeRTOS\Source/tasks.c ****                         break;
4494:..\FreeRTOS\Source/tasks.c **** 
4495:..\FreeRTOS\Source/tasks.c ****                     case eInvalid: /* Fall through. */
4496:..\FreeRTOS\Source/tasks.c ****                     default:       /* Should not get here, but it is included
4497:..\FreeRTOS\Source/tasks.c ****                                     * to prevent static checking errors. */
4498:..\FreeRTOS\Source/tasks.c ****                         cStatus = ( char ) 0x00;
4499:..\FreeRTOS\Source/tasks.c ****                         break;
4500:..\FreeRTOS\Source/tasks.c ****                 }
4501:..\FreeRTOS\Source/tasks.c **** 
4502:..\FreeRTOS\Source/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4503:..\FreeRTOS\Source/tasks.c ****                  * can be printed in tabular form more easily. */
4504:..\FreeRTOS\Source/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 157


4505:..\FreeRTOS\Source/tasks.c **** 
4506:..\FreeRTOS\Source/tasks.c ****                 /* Write the rest of the string. */
4507:..\FreeRTOS\Source/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4508:..\FreeRTOS\Source/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4509:..\FreeRTOS\Source/tasks.c ****             }
4510:..\FreeRTOS\Source/tasks.c **** 
4511:..\FreeRTOS\Source/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4512:..\FreeRTOS\Source/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4513:..\FreeRTOS\Source/tasks.c ****             vPortFree( pxTaskStatusArray );
4514:..\FreeRTOS\Source/tasks.c ****         }
4515:..\FreeRTOS\Source/tasks.c ****         else
4516:..\FreeRTOS\Source/tasks.c ****         {
4517:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4518:..\FreeRTOS\Source/tasks.c ****         }
4519:..\FreeRTOS\Source/tasks.c ****     }
4520:..\FreeRTOS\Source/tasks.c **** 
4521:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4522:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
4523:..\FreeRTOS\Source/tasks.c **** 
4524:..\FreeRTOS\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4525:..\FreeRTOS\Source/tasks.c **** 
4526:..\FreeRTOS\Source/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4527:..\FreeRTOS\Source/tasks.c ****     {
4528:..\FreeRTOS\Source/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4529:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxArraySize, x;
4530:..\FreeRTOS\Source/tasks.c ****         uint32_t ulTotalTime, ulStatsAsPercentage;
4531:..\FreeRTOS\Source/tasks.c **** 
4532:..\FreeRTOS\Source/tasks.c ****         #if ( configUSE_TRACE_FACILITY != 1 )
4533:..\FreeRTOS\Source/tasks.c ****             {
4534:..\FreeRTOS\Source/tasks.c ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4535:..\FreeRTOS\Source/tasks.c ****             }
4536:..\FreeRTOS\Source/tasks.c ****         #endif
4537:..\FreeRTOS\Source/tasks.c **** 
4538:..\FreeRTOS\Source/tasks.c ****         /*
4539:..\FreeRTOS\Source/tasks.c ****          * PLEASE NOTE:
4540:..\FreeRTOS\Source/tasks.c ****          *
4541:..\FreeRTOS\Source/tasks.c ****          * This function is provided for convenience only, and is used by many
4542:..\FreeRTOS\Source/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4543:..\FreeRTOS\Source/tasks.c ****          * scheduler.
4544:..\FreeRTOS\Source/tasks.c ****          *
4545:..\FreeRTOS\Source/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4546:..\FreeRTOS\Source/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4547:..\FreeRTOS\Source/tasks.c ****          * displays the amount of time each task has spent in the Running state
4548:..\FreeRTOS\Source/tasks.c ****          * in both absolute and percentage terms.
4549:..\FreeRTOS\Source/tasks.c ****          *
4550:..\FreeRTOS\Source/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4551:..\FreeRTOS\Source/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4552:..\FreeRTOS\Source/tasks.c ****          * provide different results on different platforms.  An alternative,
4553:..\FreeRTOS\Source/tasks.c ****          * tiny, third party, and limited functionality implementation of
4554:..\FreeRTOS\Source/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4555:..\FreeRTOS\Source/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4556:..\FreeRTOS\Source/tasks.c ****          * a full snprintf() implementation!).
4557:..\FreeRTOS\Source/tasks.c ****          *
4558:..\FreeRTOS\Source/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4559:..\FreeRTOS\Source/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4560:..\FreeRTOS\Source/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4561:..\FreeRTOS\Source/tasks.c ****          */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 158


4562:..\FreeRTOS\Source/tasks.c **** 
4563:..\FreeRTOS\Source/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4564:..\FreeRTOS\Source/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4565:..\FreeRTOS\Source/tasks.c **** 
4566:..\FreeRTOS\Source/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4567:..\FreeRTOS\Source/tasks.c ****          * function is executing. */
4568:..\FreeRTOS\Source/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4569:..\FreeRTOS\Source/tasks.c **** 
4570:..\FreeRTOS\Source/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4571:..\FreeRTOS\Source/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4572:..\FreeRTOS\Source/tasks.c ****          * equate to NULL. */
4573:..\FreeRTOS\Source/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4574:..\FreeRTOS\Source/tasks.c **** 
4575:..\FreeRTOS\Source/tasks.c ****         if( pxTaskStatusArray != NULL )
4576:..\FreeRTOS\Source/tasks.c ****         {
4577:..\FreeRTOS\Source/tasks.c ****             /* Generate the (binary) data. */
4578:..\FreeRTOS\Source/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4579:..\FreeRTOS\Source/tasks.c **** 
4580:..\FreeRTOS\Source/tasks.c ****             /* For percentage calculations. */
4581:..\FreeRTOS\Source/tasks.c ****             ulTotalTime /= 100UL;
4582:..\FreeRTOS\Source/tasks.c **** 
4583:..\FreeRTOS\Source/tasks.c ****             /* Avoid divide by zero errors. */
4584:..\FreeRTOS\Source/tasks.c ****             if( ulTotalTime > 0UL )
4585:..\FreeRTOS\Source/tasks.c ****             {
4586:..\FreeRTOS\Source/tasks.c ****                 /* Create a human readable table from the binary data. */
4587:..\FreeRTOS\Source/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4588:..\FreeRTOS\Source/tasks.c ****                 {
4589:..\FreeRTOS\Source/tasks.c ****                     /* What percentage of the total run time has the task used?
4590:..\FreeRTOS\Source/tasks.c ****                      * This will always be rounded down to the nearest integer.
4591:..\FreeRTOS\Source/tasks.c ****                      * ulTotalRunTimeDiv100 has already been divided by 100. */
4592:..\FreeRTOS\Source/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4593:..\FreeRTOS\Source/tasks.c **** 
4594:..\FreeRTOS\Source/tasks.c ****                     /* Write the task name to the string, padding with
4595:..\FreeRTOS\Source/tasks.c ****                      * spaces so it can be printed in tabular form more
4596:..\FreeRTOS\Source/tasks.c ****                      * easily. */
4597:..\FreeRTOS\Source/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4598:..\FreeRTOS\Source/tasks.c **** 
4599:..\FreeRTOS\Source/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4600:..\FreeRTOS\Source/tasks.c ****                     {
4601:..\FreeRTOS\Source/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4602:..\FreeRTOS\Source/tasks.c ****                             {
4603:..\FreeRTOS\Source/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4604:..\FreeRTOS\Source/tasks.c ****                             }
4605:..\FreeRTOS\Source/tasks.c ****                         #else
4606:..\FreeRTOS\Source/tasks.c ****                             {
4607:..\FreeRTOS\Source/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4608:..\FreeRTOS\Source/tasks.c ****                                  * printf() library can be used. */
4609:..\FreeRTOS\Source/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4610:..\FreeRTOS\Source/tasks.c ****                             }
4611:..\FreeRTOS\Source/tasks.c ****                         #endif
4612:..\FreeRTOS\Source/tasks.c ****                     }
4613:..\FreeRTOS\Source/tasks.c ****                     else
4614:..\FreeRTOS\Source/tasks.c ****                     {
4615:..\FreeRTOS\Source/tasks.c ****                         /* If the percentage is zero here then the task has
4616:..\FreeRTOS\Source/tasks.c ****                          * consumed less than 1% of the total run time. */
4617:..\FreeRTOS\Source/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4618:..\FreeRTOS\Source/tasks.c ****                             {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 159


4619:..\FreeRTOS\Source/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4620:..\FreeRTOS\Source/tasks.c ****                             }
4621:..\FreeRTOS\Source/tasks.c ****                         #else
4622:..\FreeRTOS\Source/tasks.c ****                             {
4623:..\FreeRTOS\Source/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4624:..\FreeRTOS\Source/tasks.c ****                                  * printf() library can be used. */
4625:..\FreeRTOS\Source/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4626:..\FreeRTOS\Source/tasks.c ****                             }
4627:..\FreeRTOS\Source/tasks.c ****                         #endif
4628:..\FreeRTOS\Source/tasks.c ****                     }
4629:..\FreeRTOS\Source/tasks.c **** 
4630:..\FreeRTOS\Source/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4631:..\FreeRTOS\Source/tasks.c ****                 }
4632:..\FreeRTOS\Source/tasks.c ****             }
4633:..\FreeRTOS\Source/tasks.c ****             else
4634:..\FreeRTOS\Source/tasks.c ****             {
4635:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4636:..\FreeRTOS\Source/tasks.c ****             }
4637:..\FreeRTOS\Source/tasks.c **** 
4638:..\FreeRTOS\Source/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4639:..\FreeRTOS\Source/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4640:..\FreeRTOS\Source/tasks.c ****             vPortFree( pxTaskStatusArray );
4641:..\FreeRTOS\Source/tasks.c ****         }
4642:..\FreeRTOS\Source/tasks.c ****         else
4643:..\FreeRTOS\Source/tasks.c ****         {
4644:..\FreeRTOS\Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4645:..\FreeRTOS\Source/tasks.c ****         }
4646:..\FreeRTOS\Source/tasks.c ****     }
4647:..\FreeRTOS\Source/tasks.c **** 
4648:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4649:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4650:..\FreeRTOS\Source/tasks.c **** 
4651:..\FreeRTOS\Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4652:..\FreeRTOS\Source/tasks.c **** {
 4338              		.loc 1 4652 0
 4339              		.cfi_startproc
 4340              		@ args = 0, pretend = 0, frame = 8
 4341              		@ frame_needed = 1, uses_anonymous_args = 0
 4342 0000 80B5     		push	{r7, lr}
 4343              		.cfi_def_cfa_offset 8
 4344              		.cfi_offset 7, -8
 4345              		.cfi_offset 14, -4
 4346 0002 82B0     		sub	sp, sp, #8
 4347              		.cfi_def_cfa_offset 16
 4348 0004 00AF     		add	r7, sp, #0
 4349              		.cfi_def_cfa_register 7
4653:..\FreeRTOS\Source/tasks.c ****     TickType_t uxReturn;
4654:..\FreeRTOS\Source/tasks.c **** 
4655:..\FreeRTOS\Source/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4350              		.loc 1 4655 0
 4351 0006 084B     		ldr	r3, .L356
 4352 0008 1B68     		ldr	r3, [r3]
 4353 000a 9B69     		ldr	r3, [r3, #24]
 4354 000c 7B60     		str	r3, [r7, #4]
4656:..\FreeRTOS\Source/tasks.c **** 
4657:..\FreeRTOS\Source/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4658:..\FreeRTOS\Source/tasks.c ****      * queues and semaphores. */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 160


4659:..\FreeRTOS\Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
 4355              		.loc 1 4659 0
 4356 000e 064B     		ldr	r3, .L356
 4357 0010 1B68     		ldr	r3, [r3]
 4358 0012 054A     		ldr	r2, .L356
 4359 0014 1268     		ldr	r2, [r2]
 4360 0016 D26A     		ldr	r2, [r2, #44]
 4361 0018 0521     		movs	r1, #5
 4362 001a 8A1A     		subs	r2, r1, r2
 4363 001c 9A61     		str	r2, [r3, #24]
4660:..\FreeRTOS\Source/tasks.c **** 
4661:..\FreeRTOS\Source/tasks.c ****     return uxReturn;
 4364              		.loc 1 4661 0
 4365 001e 7B68     		ldr	r3, [r7, #4]
4662:..\FreeRTOS\Source/tasks.c **** }
 4366              		.loc 1 4662 0
 4367 0020 1800     		movs	r0, r3
 4368 0022 BD46     		mov	sp, r7
 4369 0024 02B0     		add	sp, sp, #8
 4370              		@ sp needed
 4371 0026 80BD     		pop	{r7, pc}
 4372              	.L357:
 4373              		.align	2
 4374              	.L356:
 4375 0028 00000000 		.word	pxCurrentTCB
 4376              		.cfi_endproc
 4377              	.LFE43:
 4378              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4379              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 4380              		.align	2
 4381              		.global	ulTaskGenericNotifyTake
 4382              		.code	16
 4383              		.thumb_func
 4384              		.type	ulTaskGenericNotifyTake, %function
 4385              	ulTaskGenericNotifyTake:
 4386              	.LFB44:
4663:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4664:..\FreeRTOS\Source/tasks.c **** 
4665:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4666:..\FreeRTOS\Source/tasks.c **** 
4667:..\FreeRTOS\Source/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4668:..\FreeRTOS\Source/tasks.c ****     {
4669:..\FreeRTOS\Source/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4670:..\FreeRTOS\Source/tasks.c ****          * then pxCurrentTCB will be NULL. */
4671:..\FreeRTOS\Source/tasks.c ****         if( pxCurrentTCB != NULL )
4672:..\FreeRTOS\Source/tasks.c ****         {
4673:..\FreeRTOS\Source/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
4674:..\FreeRTOS\Source/tasks.c ****         }
4675:..\FreeRTOS\Source/tasks.c **** 
4676:..\FreeRTOS\Source/tasks.c ****         return pxCurrentTCB;
4677:..\FreeRTOS\Source/tasks.c ****     }
4678:..\FreeRTOS\Source/tasks.c **** 
4679:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4680:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4681:..\FreeRTOS\Source/tasks.c **** 
4682:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4683:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 161


4684:..\FreeRTOS\Source/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4685:..\FreeRTOS\Source/tasks.c ****                                       BaseType_t xClearCountOnExit,
4686:..\FreeRTOS\Source/tasks.c ****                                       TickType_t xTicksToWait )
4687:..\FreeRTOS\Source/tasks.c ****     {
 4387              		.loc 1 4687 0
 4388              		.cfi_startproc
 4389              		@ args = 0, pretend = 0, frame = 24
 4390              		@ frame_needed = 1, uses_anonymous_args = 0
 4391 0000 80B5     		push	{r7, lr}
 4392              		.cfi_def_cfa_offset 8
 4393              		.cfi_offset 7, -8
 4394              		.cfi_offset 14, -4
 4395 0002 86B0     		sub	sp, sp, #24
 4396              		.cfi_def_cfa_offset 32
 4397 0004 00AF     		add	r7, sp, #0
 4398              		.cfi_def_cfa_register 7
 4399 0006 F860     		str	r0, [r7, #12]
 4400 0008 B960     		str	r1, [r7, #8]
 4401 000a 7A60     		str	r2, [r7, #4]
4688:..\FreeRTOS\Source/tasks.c ****         uint32_t ulReturn;
4689:..\FreeRTOS\Source/tasks.c **** 
4690:..\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 4402              		.loc 1 4690 0
 4403 000c 284B     		ldr	r3, .L366
 4404 000e 1B88     		ldrh	r3, [r3]
 4405 0010 002B     		cmp	r3, #0
 4406 0012 01D1     		bne	.L359
 4407              		.loc 1 4690 0 is_stmt 0 discriminator 1
 4408              		.syntax divided
 4409              	@ 4690 "..\FreeRTOS\Source\tasks.c" 1
 4410 0014 72B6     		 cpsid i 
 4411              	@ 0 "" 2
 4412              		.thumb
 4413              		.syntax unified
 4414              	.L360:
 4415 0016 FEE7     		b	.L360
 4416              	.L359:
4691:..\FreeRTOS\Source/tasks.c **** 
4692:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 4417              		.loc 1 4692 0 is_stmt 1
 4418 0018 FFF7FEFF 		bl	vPortEnterCritical
4693:..\FreeRTOS\Source/tasks.c ****         {
4694:..\FreeRTOS\Source/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4695:..\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 4419              		.loc 1 4695 0
 4420 001c 254B     		ldr	r3, .L366+4
 4421 001e 1B68     		ldr	r3, [r3]
 4422 0020 FA68     		ldr	r2, [r7, #12]
 4423 0022 1632     		adds	r2, r2, #22
 4424 0024 9200     		lsls	r2, r2, #2
 4425 0026 D358     		ldr	r3, [r2, r3]
 4426 0028 002B     		cmp	r3, #0
 4427 002a 11D1     		bne	.L361
4696:..\FreeRTOS\Source/tasks.c ****             {
4697:..\FreeRTOS\Source/tasks.c ****                 /* Mark this task as waiting for a notification. */
4698:..\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 4428              		.loc 1 4698 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 162


 4429 002c 214B     		ldr	r3, .L366+4
 4430 002e 1A68     		ldr	r2, [r3]
 4431 0030 6421     		movs	r1, #100
 4432 0032 FB68     		ldr	r3, [r7, #12]
 4433 0034 D318     		adds	r3, r2, r3
 4434 0036 5B18     		adds	r3, r3, r1
 4435 0038 0122     		movs	r2, #1
 4436 003a 1A70     		strb	r2, [r3]
4699:..\FreeRTOS\Source/tasks.c **** 
4700:..\FreeRTOS\Source/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 4437              		.loc 1 4700 0
 4438 003c 7B68     		ldr	r3, [r7, #4]
 4439 003e 002B     		cmp	r3, #0
 4440 0040 06D0     		beq	.L361
4701:..\FreeRTOS\Source/tasks.c ****                 {
4702:..\FreeRTOS\Source/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4441              		.loc 1 4702 0
 4442 0042 7B68     		ldr	r3, [r7, #4]
 4443 0044 0121     		movs	r1, #1
 4444 0046 1800     		movs	r0, r3
 4445 0048 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4703:..\FreeRTOS\Source/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4704:..\FreeRTOS\Source/tasks.c **** 
4705:..\FreeRTOS\Source/tasks.c ****                     /* All ports are written to allow a yield in a critical
4706:..\FreeRTOS\Source/tasks.c ****                      * section (some will yield immediately, others wait until the
4707:..\FreeRTOS\Source/tasks.c ****                      * critical section exits) - but it is not something that
4708:..\FreeRTOS\Source/tasks.c ****                      * application code should ever do. */
4709:..\FreeRTOS\Source/tasks.c ****                     portYIELD_WITHIN_API();
 4446              		.loc 1 4709 0
 4447 004c FFF7FEFF 		bl	vPortYield
 4448              	.L361:
4710:..\FreeRTOS\Source/tasks.c ****                 }
4711:..\FreeRTOS\Source/tasks.c ****                 else
4712:..\FreeRTOS\Source/tasks.c ****                 {
4713:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4714:..\FreeRTOS\Source/tasks.c ****                 }
4715:..\FreeRTOS\Source/tasks.c ****             }
4716:..\FreeRTOS\Source/tasks.c ****             else
4717:..\FreeRTOS\Source/tasks.c ****             {
4718:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4719:..\FreeRTOS\Source/tasks.c ****             }
4720:..\FreeRTOS\Source/tasks.c ****         }
4721:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 4449              		.loc 1 4721 0
 4450 0050 FFF7FEFF 		bl	vPortExitCritical
4722:..\FreeRTOS\Source/tasks.c **** 
4723:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 4451              		.loc 1 4723 0
 4452 0054 FFF7FEFF 		bl	vPortEnterCritical
4724:..\FreeRTOS\Source/tasks.c ****         {
4725:..\FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4726:..\FreeRTOS\Source/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 4453              		.loc 1 4726 0
 4454 0058 164B     		ldr	r3, .L366+4
 4455 005a 1B68     		ldr	r3, [r3]
 4456 005c FA68     		ldr	r2, [r7, #12]
 4457 005e 1632     		adds	r2, r2, #22
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 163


 4458 0060 9200     		lsls	r2, r2, #2
 4459 0062 D358     		ldr	r3, [r2, r3]
 4460 0064 7B61     		str	r3, [r7, #20]
4727:..\FreeRTOS\Source/tasks.c **** 
4728:..\FreeRTOS\Source/tasks.c ****             if( ulReturn != 0UL )
 4461              		.loc 1 4728 0
 4462 0066 7B69     		ldr	r3, [r7, #20]
 4463 0068 002B     		cmp	r3, #0
 4464 006a 12D0     		beq	.L362
4729:..\FreeRTOS\Source/tasks.c ****             {
4730:..\FreeRTOS\Source/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
 4465              		.loc 1 4730 0
 4466 006c BB68     		ldr	r3, [r7, #8]
 4467 006e 002B     		cmp	r3, #0
 4468 0070 07D0     		beq	.L363
4731:..\FreeRTOS\Source/tasks.c ****                 {
4732:..\FreeRTOS\Source/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 4469              		.loc 1 4732 0
 4470 0072 104B     		ldr	r3, .L366+4
 4471 0074 1B68     		ldr	r3, [r3]
 4472 0076 FA68     		ldr	r2, [r7, #12]
 4473 0078 1632     		adds	r2, r2, #22
 4474 007a 9200     		lsls	r2, r2, #2
 4475 007c 0021     		movs	r1, #0
 4476 007e D150     		str	r1, [r2, r3]
 4477 0080 07E0     		b	.L362
 4478              	.L363:
4733:..\FreeRTOS\Source/tasks.c ****                 }
4734:..\FreeRTOS\Source/tasks.c ****                 else
4735:..\FreeRTOS\Source/tasks.c ****                 {
4736:..\FreeRTOS\Source/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 4479              		.loc 1 4736 0
 4480 0082 0C4B     		ldr	r3, .L366+4
 4481 0084 1B68     		ldr	r3, [r3]
 4482 0086 7A69     		ldr	r2, [r7, #20]
 4483 0088 511E     		subs	r1, r2, #1
 4484 008a FA68     		ldr	r2, [r7, #12]
 4485 008c 1632     		adds	r2, r2, #22
 4486 008e 9200     		lsls	r2, r2, #2
 4487 0090 D150     		str	r1, [r2, r3]
 4488              	.L362:
4737:..\FreeRTOS\Source/tasks.c ****                 }
4738:..\FreeRTOS\Source/tasks.c ****             }
4739:..\FreeRTOS\Source/tasks.c ****             else
4740:..\FreeRTOS\Source/tasks.c ****             {
4741:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4742:..\FreeRTOS\Source/tasks.c ****             }
4743:..\FreeRTOS\Source/tasks.c **** 
4744:..\FreeRTOS\Source/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 4489              		.loc 1 4744 0
 4490 0092 084B     		ldr	r3, .L366+4
 4491 0094 1A68     		ldr	r2, [r3]
 4492 0096 6421     		movs	r1, #100
 4493 0098 FB68     		ldr	r3, [r7, #12]
 4494 009a D318     		adds	r3, r2, r3
 4495 009c 5B18     		adds	r3, r3, r1
 4496 009e 0022     		movs	r2, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 164


 4497 00a0 1A70     		strb	r2, [r3]
4745:..\FreeRTOS\Source/tasks.c ****         }
4746:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 4498              		.loc 1 4746 0
 4499 00a2 FFF7FEFF 		bl	vPortExitCritical
4747:..\FreeRTOS\Source/tasks.c **** 
4748:..\FreeRTOS\Source/tasks.c ****         return ulReturn;
 4500              		.loc 1 4748 0
 4501 00a6 7B69     		ldr	r3, [r7, #20]
4749:..\FreeRTOS\Source/tasks.c ****     }
 4502              		.loc 1 4749 0
 4503 00a8 1800     		movs	r0, r3
 4504 00aa BD46     		mov	sp, r7
 4505 00ac 06B0     		add	sp, sp, #24
 4506              		@ sp needed
 4507 00ae 80BD     		pop	{r7, pc}
 4508              	.L367:
 4509              		.align	2
 4510              	.L366:
 4511 00b0 00000000 		.word	x
 4512 00b4 00000000 		.word	pxCurrentTCB
 4513              		.cfi_endproc
 4514              	.LFE44:
 4515              		.size	ulTaskGenericNotifyTake, .-ulTaskGenericNotifyTake
 4516              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 4517              		.align	2
 4518              		.global	xTaskGenericNotifyWait
 4519              		.code	16
 4520              		.thumb_func
 4521              		.type	xTaskGenericNotifyWait, %function
 4522              	xTaskGenericNotifyWait:
 4523              	.LFB45:
4750:..\FreeRTOS\Source/tasks.c **** 
4751:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4752:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4753:..\FreeRTOS\Source/tasks.c **** 
4754:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4755:..\FreeRTOS\Source/tasks.c **** 
4756:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4757:..\FreeRTOS\Source/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4758:..\FreeRTOS\Source/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4759:..\FreeRTOS\Source/tasks.c ****                                        uint32_t * pulNotificationValue,
4760:..\FreeRTOS\Source/tasks.c ****                                        TickType_t xTicksToWait )
4761:..\FreeRTOS\Source/tasks.c ****     {
 4524              		.loc 1 4761 0
 4525              		.cfi_startproc
 4526              		@ args = 4, pretend = 0, frame = 24
 4527              		@ frame_needed = 1, uses_anonymous_args = 0
 4528 0000 80B5     		push	{r7, lr}
 4529              		.cfi_def_cfa_offset 8
 4530              		.cfi_offset 7, -8
 4531              		.cfi_offset 14, -4
 4532 0002 86B0     		sub	sp, sp, #24
 4533              		.cfi_def_cfa_offset 32
 4534 0004 00AF     		add	r7, sp, #0
 4535              		.cfi_def_cfa_register 7
 4536 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 165


 4537 0008 B960     		str	r1, [r7, #8]
 4538 000a 7A60     		str	r2, [r7, #4]
 4539 000c 3B60     		str	r3, [r7]
4762:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
4763:..\FreeRTOS\Source/tasks.c **** 
4764:..\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 4540              		.loc 1 4764 0
 4541 000e 354B     		ldr	r3, .L376
 4542 0010 1B88     		ldrh	r3, [r3]
 4543 0012 002B     		cmp	r3, #0
 4544 0014 01D1     		bne	.L369
 4545              		.loc 1 4764 0 is_stmt 0 discriminator 1
 4546              		.syntax divided
 4547              	@ 4764 "..\FreeRTOS\Source\tasks.c" 1
 4548 0016 72B6     		 cpsid i 
 4549              	@ 0 "" 2
 4550              		.thumb
 4551              		.syntax unified
 4552              	.L370:
 4553 0018 FEE7     		b	.L370
 4554              	.L369:
4765:..\FreeRTOS\Source/tasks.c **** 
4766:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 4555              		.loc 1 4766 0 is_stmt 1
 4556 001a FFF7FEFF 		bl	vPortEnterCritical
4767:..\FreeRTOS\Source/tasks.c ****         {
4768:..\FreeRTOS\Source/tasks.c ****             /* Only block if a notification is not already pending. */
4769:..\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 4557              		.loc 1 4769 0
 4558 001e 324B     		ldr	r3, .L376+4
 4559 0020 1A68     		ldr	r2, [r3]
 4560 0022 6421     		movs	r1, #100
 4561 0024 FB68     		ldr	r3, [r7, #12]
 4562 0026 D318     		adds	r3, r2, r3
 4563 0028 5B18     		adds	r3, r3, r1
 4564 002a 1B78     		ldrb	r3, [r3]
 4565 002c DBB2     		uxtb	r3, r3
 4566 002e 022B     		cmp	r3, #2
 4567 0030 1ED0     		beq	.L371
4770:..\FreeRTOS\Source/tasks.c ****             {
4771:..\FreeRTOS\Source/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4772:..\FreeRTOS\Source/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4773:..\FreeRTOS\Source/tasks.c ****                  * clear the value to zero. */
4774:..\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 4568              		.loc 1 4774 0
 4569 0032 2D4B     		ldr	r3, .L376+4
 4570 0034 1B68     		ldr	r3, [r3]
 4571 0036 FA68     		ldr	r2, [r7, #12]
 4572 0038 1632     		adds	r2, r2, #22
 4573 003a 9200     		lsls	r2, r2, #2
 4574 003c D258     		ldr	r2, [r2, r3]
 4575 003e B968     		ldr	r1, [r7, #8]
 4576 0040 C943     		mvns	r1, r1
 4577 0042 1140     		ands	r1, r2
 4578 0044 FA68     		ldr	r2, [r7, #12]
 4579 0046 1632     		adds	r2, r2, #22
 4580 0048 9200     		lsls	r2, r2, #2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 166


 4581 004a D150     		str	r1, [r2, r3]
4775:..\FreeRTOS\Source/tasks.c **** 
4776:..\FreeRTOS\Source/tasks.c ****                 /* Mark this task as waiting for a notification. */
4777:..\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 4582              		.loc 1 4777 0
 4583 004c 264B     		ldr	r3, .L376+4
 4584 004e 1A68     		ldr	r2, [r3]
 4585 0050 6421     		movs	r1, #100
 4586 0052 FB68     		ldr	r3, [r7, #12]
 4587 0054 D318     		adds	r3, r2, r3
 4588 0056 5B18     		adds	r3, r3, r1
 4589 0058 0122     		movs	r2, #1
 4590 005a 1A70     		strb	r2, [r3]
4778:..\FreeRTOS\Source/tasks.c **** 
4779:..\FreeRTOS\Source/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 4591              		.loc 1 4779 0
 4592 005c 3B6A     		ldr	r3, [r7, #32]
 4593 005e 002B     		cmp	r3, #0
 4594 0060 06D0     		beq	.L371
4780:..\FreeRTOS\Source/tasks.c ****                 {
4781:..\FreeRTOS\Source/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4595              		.loc 1 4781 0
 4596 0062 3B6A     		ldr	r3, [r7, #32]
 4597 0064 0121     		movs	r1, #1
 4598 0066 1800     		movs	r0, r3
 4599 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4782:..\FreeRTOS\Source/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4783:..\FreeRTOS\Source/tasks.c **** 
4784:..\FreeRTOS\Source/tasks.c ****                     /* All ports are written to allow a yield in a critical
4785:..\FreeRTOS\Source/tasks.c ****                      * section (some will yield immediately, others wait until the
4786:..\FreeRTOS\Source/tasks.c ****                      * critical section exits) - but it is not something that
4787:..\FreeRTOS\Source/tasks.c ****                      * application code should ever do. */
4788:..\FreeRTOS\Source/tasks.c ****                     portYIELD_WITHIN_API();
 4600              		.loc 1 4788 0
 4601 006c FFF7FEFF 		bl	vPortYield
 4602              	.L371:
4789:..\FreeRTOS\Source/tasks.c ****                 }
4790:..\FreeRTOS\Source/tasks.c ****                 else
4791:..\FreeRTOS\Source/tasks.c ****                 {
4792:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4793:..\FreeRTOS\Source/tasks.c ****                 }
4794:..\FreeRTOS\Source/tasks.c ****             }
4795:..\FreeRTOS\Source/tasks.c ****             else
4796:..\FreeRTOS\Source/tasks.c ****             {
4797:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4798:..\FreeRTOS\Source/tasks.c ****             }
4799:..\FreeRTOS\Source/tasks.c ****         }
4800:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 4603              		.loc 1 4800 0
 4604 0070 FFF7FEFF 		bl	vPortExitCritical
4801:..\FreeRTOS\Source/tasks.c **** 
4802:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 4605              		.loc 1 4802 0
 4606 0074 FFF7FEFF 		bl	vPortEnterCritical
4803:..\FreeRTOS\Source/tasks.c ****         {
4804:..\FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4805:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 167


4806:..\FreeRTOS\Source/tasks.c ****             if( pulNotificationValue != NULL )
 4607              		.loc 1 4806 0
 4608 0078 3B68     		ldr	r3, [r7]
 4609 007a 002B     		cmp	r3, #0
 4610 007c 07D0     		beq	.L372
4807:..\FreeRTOS\Source/tasks.c ****             {
4808:..\FreeRTOS\Source/tasks.c ****                 /* Output the current notification value, which may or may not
4809:..\FreeRTOS\Source/tasks.c ****                  * have changed. */
4810:..\FreeRTOS\Source/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 4611              		.loc 1 4810 0
 4612 007e 1A4B     		ldr	r3, .L376+4
 4613 0080 1B68     		ldr	r3, [r3]
 4614 0082 FA68     		ldr	r2, [r7, #12]
 4615 0084 1632     		adds	r2, r2, #22
 4616 0086 9200     		lsls	r2, r2, #2
 4617 0088 D258     		ldr	r2, [r2, r3]
 4618 008a 3B68     		ldr	r3, [r7]
 4619 008c 1A60     		str	r2, [r3]
 4620              	.L372:
4811:..\FreeRTOS\Source/tasks.c ****             }
4812:..\FreeRTOS\Source/tasks.c **** 
4813:..\FreeRTOS\Source/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4814:..\FreeRTOS\Source/tasks.c ****              * blocked state (because a notification was already pending) or the
4815:..\FreeRTOS\Source/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4816:..\FreeRTOS\Source/tasks.c ****              * unblocked because of a timeout. */
4817:..\FreeRTOS\Source/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 4621              		.loc 1 4817 0
 4622 008e 164B     		ldr	r3, .L376+4
 4623 0090 1A68     		ldr	r2, [r3]
 4624 0092 6421     		movs	r1, #100
 4625 0094 FB68     		ldr	r3, [r7, #12]
 4626 0096 D318     		adds	r3, r2, r3
 4627 0098 5B18     		adds	r3, r3, r1
 4628 009a 1B78     		ldrb	r3, [r3]
 4629 009c DBB2     		uxtb	r3, r3
 4630 009e 022B     		cmp	r3, #2
 4631 00a0 02D0     		beq	.L373
4818:..\FreeRTOS\Source/tasks.c ****             {
4819:..\FreeRTOS\Source/tasks.c ****                 /* A notification was not received. */
4820:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdFALSE;
 4632              		.loc 1 4820 0
 4633 00a2 0023     		movs	r3, #0
 4634 00a4 7B61     		str	r3, [r7, #20]
 4635 00a6 0EE0     		b	.L374
 4636              	.L373:
4821:..\FreeRTOS\Source/tasks.c ****             }
4822:..\FreeRTOS\Source/tasks.c ****             else
4823:..\FreeRTOS\Source/tasks.c ****             {
4824:..\FreeRTOS\Source/tasks.c ****                 /* A notification was already pending or a notification was
4825:..\FreeRTOS\Source/tasks.c ****                  * received while the task was waiting. */
4826:..\FreeRTOS\Source/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 4637              		.loc 1 4826 0
 4638 00a8 0F4B     		ldr	r3, .L376+4
 4639 00aa 1B68     		ldr	r3, [r3]
 4640 00ac FA68     		ldr	r2, [r7, #12]
 4641 00ae 1632     		adds	r2, r2, #22
 4642 00b0 9200     		lsls	r2, r2, #2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 168


 4643 00b2 D258     		ldr	r2, [r2, r3]
 4644 00b4 7968     		ldr	r1, [r7, #4]
 4645 00b6 C943     		mvns	r1, r1
 4646 00b8 1140     		ands	r1, r2
 4647 00ba FA68     		ldr	r2, [r7, #12]
 4648 00bc 1632     		adds	r2, r2, #22
 4649 00be 9200     		lsls	r2, r2, #2
 4650 00c0 D150     		str	r1, [r2, r3]
4827:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdTRUE;
 4651              		.loc 1 4827 0
 4652 00c2 0123     		movs	r3, #1
 4653 00c4 7B61     		str	r3, [r7, #20]
 4654              	.L374:
4828:..\FreeRTOS\Source/tasks.c ****             }
4829:..\FreeRTOS\Source/tasks.c **** 
4830:..\FreeRTOS\Source/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 4655              		.loc 1 4830 0
 4656 00c6 084B     		ldr	r3, .L376+4
 4657 00c8 1A68     		ldr	r2, [r3]
 4658 00ca 6421     		movs	r1, #100
 4659 00cc FB68     		ldr	r3, [r7, #12]
 4660 00ce D318     		adds	r3, r2, r3
 4661 00d0 5B18     		adds	r3, r3, r1
 4662 00d2 0022     		movs	r2, #0
 4663 00d4 1A70     		strb	r2, [r3]
4831:..\FreeRTOS\Source/tasks.c ****         }
4832:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 4664              		.loc 1 4832 0
 4665 00d6 FFF7FEFF 		bl	vPortExitCritical
4833:..\FreeRTOS\Source/tasks.c **** 
4834:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 4666              		.loc 1 4834 0
 4667 00da 7B69     		ldr	r3, [r7, #20]
4835:..\FreeRTOS\Source/tasks.c ****     }
 4668              		.loc 1 4835 0
 4669 00dc 1800     		movs	r0, r3
 4670 00de BD46     		mov	sp, r7
 4671 00e0 06B0     		add	sp, sp, #24
 4672              		@ sp needed
 4673 00e2 80BD     		pop	{r7, pc}
 4674              	.L377:
 4675              		.align	2
 4676              	.L376:
 4677 00e4 00000000 		.word	x
 4678 00e8 00000000 		.word	pxCurrentTCB
 4679              		.cfi_endproc
 4680              	.LFE45:
 4681              		.size	xTaskGenericNotifyWait, .-xTaskGenericNotifyWait
 4682              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4683              		.align	2
 4684              		.global	xTaskGenericNotify
 4685              		.code	16
 4686              		.thumb_func
 4687              		.type	xTaskGenericNotify, %function
 4688              	xTaskGenericNotify:
 4689              	.LFB46:
4836:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 169


4837:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4838:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4839:..\FreeRTOS\Source/tasks.c **** 
4840:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4841:..\FreeRTOS\Source/tasks.c **** 
4842:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4843:..\FreeRTOS\Source/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4844:..\FreeRTOS\Source/tasks.c ****                                    uint32_t ulValue,
4845:..\FreeRTOS\Source/tasks.c ****                                    eNotifyAction eAction,
4846:..\FreeRTOS\Source/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4847:..\FreeRTOS\Source/tasks.c ****     {
 4690              		.loc 1 4847 0
 4691              		.cfi_startproc
 4692              		@ args = 4, pretend = 0, frame = 32
 4693              		@ frame_needed = 1, uses_anonymous_args = 0
 4694 0000 80B5     		push	{r7, lr}
 4695              		.cfi_def_cfa_offset 8
 4696              		.cfi_offset 7, -8
 4697              		.cfi_offset 14, -4
 4698 0002 88B0     		sub	sp, sp, #32
 4699              		.cfi_def_cfa_offset 40
 4700 0004 00AF     		add	r7, sp, #0
 4701              		.cfi_def_cfa_register 7
 4702 0006 F860     		str	r0, [r7, #12]
 4703 0008 B960     		str	r1, [r7, #8]
 4704 000a 7A60     		str	r2, [r7, #4]
 4705 000c 1A00     		movs	r2, r3
 4706 000e FB1C     		adds	r3, r7, #3
 4707 0010 1A70     		strb	r2, [r3]
4848:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
4849:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdPASS;
 4708              		.loc 1 4849 0
 4709 0012 0123     		movs	r3, #1
 4710 0014 FB61     		str	r3, [r7, #28]
4850:..\FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
4851:..\FreeRTOS\Source/tasks.c **** 
4852:..\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 4711              		.loc 1 4852 0
 4712 0016 524B     		ldr	r3, .L402
 4713 0018 1B88     		ldrh	r3, [r3]
 4714 001a 002B     		cmp	r3, #0
 4715 001c 01D1     		bne	.L379
 4716              		.loc 1 4852 0 is_stmt 0 discriminator 1
 4717              		.syntax divided
 4718              	@ 4852 "..\FreeRTOS\Source\tasks.c" 1
 4719 001e 72B6     		 cpsid i 
 4720              	@ 0 "" 2
 4721              		.thumb
 4722              		.syntax unified
 4723              	.L380:
 4724 0020 FEE7     		b	.L380
 4725              	.L379:
4853:..\FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToNotify );
 4726              		.loc 1 4853 0 is_stmt 1
 4727 0022 4F4B     		ldr	r3, .L402
 4728 0024 1B88     		ldrh	r3, [r3]
 4729 0026 002B     		cmp	r3, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 170


 4730 0028 01D1     		bne	.L381
 4731              		.loc 1 4853 0 is_stmt 0 discriminator 1
 4732              		.syntax divided
 4733              	@ 4853 "..\FreeRTOS\Source\tasks.c" 1
 4734 002a 72B6     		 cpsid i 
 4735              	@ 0 "" 2
 4736              		.thumb
 4737              		.syntax unified
 4738              	.L382:
 4739              		.loc 1 4853 0 discriminator 2
 4740 002c FEE7     		b	.L382
 4741              	.L381:
4854:..\FreeRTOS\Source/tasks.c ****         pxTCB = xTaskToNotify;
 4742              		.loc 1 4854 0 is_stmt 1
 4743 002e FB68     		ldr	r3, [r7, #12]
 4744 0030 BB61     		str	r3, [r7, #24]
4855:..\FreeRTOS\Source/tasks.c **** 
4856:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 4745              		.loc 1 4856 0
 4746 0032 FFF7FEFF 		bl	vPortEnterCritical
4857:..\FreeRTOS\Source/tasks.c ****         {
4858:..\FreeRTOS\Source/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 4747              		.loc 1 4858 0
 4748 0036 BB6A     		ldr	r3, [r7, #40]
 4749 0038 002B     		cmp	r3, #0
 4750 003a 06D0     		beq	.L383
4859:..\FreeRTOS\Source/tasks.c ****             {
4860:..\FreeRTOS\Source/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 4751              		.loc 1 4860 0
 4752 003c BB69     		ldr	r3, [r7, #24]
 4753 003e BA68     		ldr	r2, [r7, #8]
 4754 0040 1632     		adds	r2, r2, #22
 4755 0042 9200     		lsls	r2, r2, #2
 4756 0044 D258     		ldr	r2, [r2, r3]
 4757 0046 BB6A     		ldr	r3, [r7, #40]
 4758 0048 1A60     		str	r2, [r3]
 4759              	.L383:
4861:..\FreeRTOS\Source/tasks.c ****             }
4862:..\FreeRTOS\Source/tasks.c **** 
4863:..\FreeRTOS\Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 4760              		.loc 1 4863 0
 4761 004a 1723     		movs	r3, #23
 4762 004c FB18     		adds	r3, r7, r3
 4763 004e B969     		ldr	r1, [r7, #24]
 4764 0050 6420     		movs	r0, #100
 4765 0052 BA68     		ldr	r2, [r7, #8]
 4766 0054 8A18     		adds	r2, r1, r2
 4767 0056 1218     		adds	r2, r2, r0
 4768 0058 1278     		ldrb	r2, [r2]
 4769 005a 1A70     		strb	r2, [r3]
4864:..\FreeRTOS\Source/tasks.c **** 
4865:..\FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 4770              		.loc 1 4865 0
 4771 005c BA69     		ldr	r2, [r7, #24]
 4772 005e 6421     		movs	r1, #100
 4773 0060 BB68     		ldr	r3, [r7, #8]
 4774 0062 D318     		adds	r3, r2, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 171


 4775 0064 5B18     		adds	r3, r3, r1
 4776 0066 0222     		movs	r2, #2
 4777 0068 1A70     		strb	r2, [r3]
4866:..\FreeRTOS\Source/tasks.c **** 
4867:..\FreeRTOS\Source/tasks.c ****             switch( eAction )
 4778              		.loc 1 4867 0
 4779 006a FB1C     		adds	r3, r7, #3
 4780 006c 1B78     		ldrb	r3, [r3]
 4781 006e 042B     		cmp	r3, #4
 4782 0070 34D8     		bhi	.L384
 4783 0072 9A00     		lsls	r2, r3, #2
 4784 0074 3B4B     		ldr	r3, .L402+4
 4785 0076 D318     		adds	r3, r2, r3
 4786 0078 1B68     		ldr	r3, [r3]
 4787 007a 9F46     		mov	pc, r3
 4788              		.section	.rodata
 4789 0005 000000   		.align	2
 4790              	.L386:
 4791 0008 EE000000 		.word	.L401
 4792 000c 7C000000 		.word	.L387
 4793 0010 98000000 		.word	.L388
 4794 0014 B0000000 		.word	.L389
 4795 0018 BE000000 		.word	.L390
 4796              		.section	.text.xTaskGenericNotify
 4797              	.L387:
4868:..\FreeRTOS\Source/tasks.c ****             {
4869:..\FreeRTOS\Source/tasks.c ****                 case eSetBits:
4870:..\FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 4798              		.loc 1 4870 0
 4799 007c BB69     		ldr	r3, [r7, #24]
 4800 007e BA68     		ldr	r2, [r7, #8]
 4801 0080 1632     		adds	r2, r2, #22
 4802 0082 9200     		lsls	r2, r2, #2
 4803 0084 D258     		ldr	r2, [r2, r3]
 4804 0086 7B68     		ldr	r3, [r7, #4]
 4805 0088 1A43     		orrs	r2, r3
 4806 008a 1100     		movs	r1, r2
 4807 008c BB69     		ldr	r3, [r7, #24]
 4808 008e BA68     		ldr	r2, [r7, #8]
 4809 0090 1632     		adds	r2, r2, #22
 4810 0092 9200     		lsls	r2, r2, #2
 4811 0094 D150     		str	r1, [r2, r3]
4871:..\FreeRTOS\Source/tasks.c ****                     break;
 4812              		.loc 1 4871 0
 4813 0096 2BE0     		b	.L391
 4814              	.L388:
4872:..\FreeRTOS\Source/tasks.c **** 
4873:..\FreeRTOS\Source/tasks.c ****                 case eIncrement:
4874:..\FreeRTOS\Source/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 4815              		.loc 1 4874 0
 4816 0098 BB69     		ldr	r3, [r7, #24]
 4817 009a BA68     		ldr	r2, [r7, #8]
 4818 009c 1632     		adds	r2, r2, #22
 4819 009e 9200     		lsls	r2, r2, #2
 4820 00a0 D358     		ldr	r3, [r2, r3]
 4821 00a2 591C     		adds	r1, r3, #1
 4822 00a4 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 172


 4823 00a6 BA68     		ldr	r2, [r7, #8]
 4824 00a8 1632     		adds	r2, r2, #22
 4825 00aa 9200     		lsls	r2, r2, #2
 4826 00ac D150     		str	r1, [r2, r3]
4875:..\FreeRTOS\Source/tasks.c ****                     break;
 4827              		.loc 1 4875 0
 4828 00ae 1FE0     		b	.L391
 4829              	.L389:
4876:..\FreeRTOS\Source/tasks.c **** 
4877:..\FreeRTOS\Source/tasks.c ****                 case eSetValueWithOverwrite:
4878:..\FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 4830              		.loc 1 4878 0
 4831 00b0 BB69     		ldr	r3, [r7, #24]
 4832 00b2 BA68     		ldr	r2, [r7, #8]
 4833 00b4 1632     		adds	r2, r2, #22
 4834 00b6 9200     		lsls	r2, r2, #2
 4835 00b8 7968     		ldr	r1, [r7, #4]
 4836 00ba D150     		str	r1, [r2, r3]
4879:..\FreeRTOS\Source/tasks.c ****                     break;
 4837              		.loc 1 4879 0
 4838 00bc 18E0     		b	.L391
 4839              	.L390:
4880:..\FreeRTOS\Source/tasks.c **** 
4881:..\FreeRTOS\Source/tasks.c ****                 case eSetValueWithoutOverwrite:
4882:..\FreeRTOS\Source/tasks.c **** 
4883:..\FreeRTOS\Source/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 4840              		.loc 1 4883 0
 4841 00be 1723     		movs	r3, #23
 4842 00c0 FB18     		adds	r3, r7, r3
 4843 00c2 1B78     		ldrb	r3, [r3]
 4844 00c4 022B     		cmp	r3, #2
 4845 00c6 06D0     		beq	.L392
4884:..\FreeRTOS\Source/tasks.c ****                     {
4885:..\FreeRTOS\Source/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 4846              		.loc 1 4885 0
 4847 00c8 BB69     		ldr	r3, [r7, #24]
 4848 00ca BA68     		ldr	r2, [r7, #8]
 4849 00cc 1632     		adds	r2, r2, #22
 4850 00ce 9200     		lsls	r2, r2, #2
 4851 00d0 7968     		ldr	r1, [r7, #4]
 4852 00d2 D150     		str	r1, [r2, r3]
4886:..\FreeRTOS\Source/tasks.c ****                     }
4887:..\FreeRTOS\Source/tasks.c ****                     else
4888:..\FreeRTOS\Source/tasks.c ****                     {
4889:..\FreeRTOS\Source/tasks.c ****                         /* The value could not be written to the task. */
4890:..\FreeRTOS\Source/tasks.c ****                         xReturn = pdFAIL;
4891:..\FreeRTOS\Source/tasks.c ****                     }
4892:..\FreeRTOS\Source/tasks.c **** 
4893:..\FreeRTOS\Source/tasks.c ****                     break;
 4853              		.loc 1 4893 0
 4854 00d4 0CE0     		b	.L391
 4855              	.L392:
4890:..\FreeRTOS\Source/tasks.c ****                     }
 4856              		.loc 1 4890 0
 4857 00d6 0023     		movs	r3, #0
 4858 00d8 FB61     		str	r3, [r7, #28]
 4859              		.loc 1 4893 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 173


 4860 00da 09E0     		b	.L391
 4861              	.L384:
4894:..\FreeRTOS\Source/tasks.c **** 
4895:..\FreeRTOS\Source/tasks.c ****                 case eNoAction:
4896:..\FreeRTOS\Source/tasks.c **** 
4897:..\FreeRTOS\Source/tasks.c ****                     /* The task is being notified without its notify value being
4898:..\FreeRTOS\Source/tasks.c ****                      * updated. */
4899:..\FreeRTOS\Source/tasks.c ****                     break;
4900:..\FreeRTOS\Source/tasks.c **** 
4901:..\FreeRTOS\Source/tasks.c ****                 default:
4902:..\FreeRTOS\Source/tasks.c **** 
4903:..\FreeRTOS\Source/tasks.c ****                     /* Should not get here if all enums are handled.
4904:..\FreeRTOS\Source/tasks.c ****                      * Artificially force an assert by testing a value the
4905:..\FreeRTOS\Source/tasks.c ****                      * compiler can't assume is const. */
4906:..\FreeRTOS\Source/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 4862              		.loc 1 4906 0
 4863 00dc 204B     		ldr	r3, .L402
 4864 00de 1B88     		ldrh	r3, [r3]
 4865 00e0 002B     		cmp	r3, #0
 4866 00e2 01D1     		bne	.L394
 4867              		.loc 1 4906 0 is_stmt 0 discriminator 1
 4868              		.syntax divided
 4869              	@ 4906 "..\FreeRTOS\Source\tasks.c" 1
 4870 00e4 72B6     		 cpsid i 
 4871              	@ 0 "" 2
 4872              		.thumb
 4873              		.syntax unified
 4874              	.L395:
 4875              		.loc 1 4906 0 discriminator 3
 4876 00e6 FEE7     		b	.L395
 4877              	.L394:
 4878              		.loc 1 4906 0 discriminator 2
 4879 00e8 1F4B     		ldr	r3, .L402+8
 4880 00ea 1B68     		ldr	r3, [r3]
4907:..\FreeRTOS\Source/tasks.c **** 
4908:..\FreeRTOS\Source/tasks.c ****                     break;
 4881              		.loc 1 4908 0 is_stmt 1 discriminator 2
 4882 00ec 00E0     		b	.L391
 4883              	.L401:
4899:..\FreeRTOS\Source/tasks.c **** 
 4884              		.loc 1 4899 0
 4885 00ee C046     		nop
 4886              	.L391:
4909:..\FreeRTOS\Source/tasks.c ****             }
4910:..\FreeRTOS\Source/tasks.c **** 
4911:..\FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4912:..\FreeRTOS\Source/tasks.c **** 
4913:..\FreeRTOS\Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4914:..\FreeRTOS\Source/tasks.c ****              * notification then unblock it now. */
4915:..\FreeRTOS\Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 4887              		.loc 1 4915 0
 4888 00f0 1723     		movs	r3, #23
 4889 00f2 FB18     		adds	r3, r7, r3
 4890 00f4 1B78     		ldrb	r3, [r3]
 4891 00f6 012B     		cmp	r3, #1
 4892 00f8 2BD1     		bne	.L396
4916:..\FreeRTOS\Source/tasks.c ****             {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 174


4917:..\FreeRTOS\Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4893              		.loc 1 4917 0
 4894 00fa BB69     		ldr	r3, [r7, #24]
 4895 00fc 0433     		adds	r3, r3, #4
 4896 00fe 1800     		movs	r0, r3
 4897 0100 FFF7FEFF 		bl	uxListRemove
4918:..\FreeRTOS\Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 4898              		.loc 1 4918 0
 4899 0104 BB69     		ldr	r3, [r7, #24]
 4900 0106 DA6A     		ldr	r2, [r3, #44]
 4901 0108 184B     		ldr	r3, .L402+12
 4902 010a 1B68     		ldr	r3, [r3]
 4903 010c 9A42     		cmp	r2, r3
 4904 010e 03D9     		bls	.L397
 4905              		.loc 1 4918 0 is_stmt 0 discriminator 1
 4906 0110 BB69     		ldr	r3, [r7, #24]
 4907 0112 DA6A     		ldr	r2, [r3, #44]
 4908 0114 154B     		ldr	r3, .L402+12
 4909 0116 1A60     		str	r2, [r3]
 4910              	.L397:
 4911              		.loc 1 4918 0 discriminator 3
 4912 0118 BB69     		ldr	r3, [r7, #24]
 4913 011a DA6A     		ldr	r2, [r3, #44]
 4914 011c 1300     		movs	r3, r2
 4915 011e 9B00     		lsls	r3, r3, #2
 4916 0120 9B18     		adds	r3, r3, r2
 4917 0122 9B00     		lsls	r3, r3, #2
 4918 0124 124A     		ldr	r2, .L402+16
 4919 0126 9A18     		adds	r2, r3, r2
 4920 0128 BB69     		ldr	r3, [r7, #24]
 4921 012a 0433     		adds	r3, r3, #4
 4922 012c 1900     		movs	r1, r3
 4923 012e 1000     		movs	r0, r2
 4924 0130 FFF7FEFF 		bl	vListInsertEnd
4919:..\FreeRTOS\Source/tasks.c **** 
4920:..\FreeRTOS\Source/tasks.c ****                 /* The task should not have been on an event list. */
4921:..\FreeRTOS\Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 4925              		.loc 1 4921 0 is_stmt 1 discriminator 3
 4926 0134 0A4B     		ldr	r3, .L402
 4927 0136 1B88     		ldrh	r3, [r3]
 4928 0138 002B     		cmp	r3, #0
 4929 013a 01D1     		bne	.L398
 4930              		.loc 1 4921 0 is_stmt 0 discriminator 1
 4931              		.syntax divided
 4932              	@ 4921 "..\FreeRTOS\Source\tasks.c" 1
 4933 013c 72B6     		 cpsid i 
 4934              	@ 0 "" 2
 4935              		.thumb
 4936              		.syntax unified
 4937              	.L399:
 4938              		.loc 1 4921 0 discriminator 4
 4939 013e FEE7     		b	.L399
 4940              	.L398:
4922:..\FreeRTOS\Source/tasks.c **** 
4923:..\FreeRTOS\Source/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4924:..\FreeRTOS\Source/tasks.c ****                     {
4925:..\FreeRTOS\Source/tasks.c ****                         /* If a task is blocked waiting for a notification then
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 175


4926:..\FreeRTOS\Source/tasks.c ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4927:..\FreeRTOS\Source/tasks.c ****                          * out time.  If the task is unblocked for a reason other than
4928:..\FreeRTOS\Source/tasks.c ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4929:..\FreeRTOS\Source/tasks.c ****                          * because it will automatically get reset to a new value when
4930:..\FreeRTOS\Source/tasks.c ****                          * the tick count equals xNextTaskUnblockTime.  However if
4931:..\FreeRTOS\Source/tasks.c ****                          * tickless idling is used it might be more important to enter
4932:..\FreeRTOS\Source/tasks.c ****                          * sleep mode at the earliest possible time - so reset
4933:..\FreeRTOS\Source/tasks.c ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4934:..\FreeRTOS\Source/tasks.c ****                          * earliest possible time. */
4935:..\FreeRTOS\Source/tasks.c ****                         prvResetNextTaskUnblockTime();
4936:..\FreeRTOS\Source/tasks.c ****                     }
4937:..\FreeRTOS\Source/tasks.c ****                 #endif
4938:..\FreeRTOS\Source/tasks.c **** 
4939:..\FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4941              		.loc 1 4939 0 is_stmt 1 discriminator 2
 4942 0140 BB69     		ldr	r3, [r7, #24]
 4943 0142 DA6A     		ldr	r2, [r3, #44]
 4944 0144 0B4B     		ldr	r3, .L402+20
 4945 0146 1B68     		ldr	r3, [r3]
 4946 0148 DB6A     		ldr	r3, [r3, #44]
 4947 014a 9A42     		cmp	r2, r3
 4948 014c 01D9     		bls	.L396
4940:..\FreeRTOS\Source/tasks.c ****                 {
4941:..\FreeRTOS\Source/tasks.c ****                     /* The notified task has a priority above the currently
4942:..\FreeRTOS\Source/tasks.c ****                      * executing task so a yield is required. */
4943:..\FreeRTOS\Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 4949              		.loc 1 4943 0
 4950 014e FFF7FEFF 		bl	vPortYield
 4951              	.L396:
4944:..\FreeRTOS\Source/tasks.c ****                 }
4945:..\FreeRTOS\Source/tasks.c ****                 else
4946:..\FreeRTOS\Source/tasks.c ****                 {
4947:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4948:..\FreeRTOS\Source/tasks.c ****                 }
4949:..\FreeRTOS\Source/tasks.c ****             }
4950:..\FreeRTOS\Source/tasks.c ****             else
4951:..\FreeRTOS\Source/tasks.c ****             {
4952:..\FreeRTOS\Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4953:..\FreeRTOS\Source/tasks.c ****             }
4954:..\FreeRTOS\Source/tasks.c ****         }
4955:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 4952              		.loc 1 4955 0
 4953 0152 FFF7FEFF 		bl	vPortExitCritical
4956:..\FreeRTOS\Source/tasks.c **** 
4957:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 4954              		.loc 1 4957 0
 4955 0156 FB69     		ldr	r3, [r7, #28]
4958:..\FreeRTOS\Source/tasks.c ****     }
 4956              		.loc 1 4958 0
 4957 0158 1800     		movs	r0, r3
 4958 015a BD46     		mov	sp, r7
 4959 015c 08B0     		add	sp, sp, #32
 4960              		@ sp needed
 4961 015e 80BD     		pop	{r7, pc}
 4962              	.L403:
 4963              		.align	2
 4964              	.L402:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 176


 4965 0160 00000000 		.word	x
 4966 0164 08000000 		.word	.L386
 4967 0168 DC000000 		.word	xTickCount
 4968 016c E0000000 		.word	uxTopReadyPriority
 4969 0170 04000000 		.word	pxReadyTasksLists
 4970 0174 00000000 		.word	pxCurrentTCB
 4971              		.cfi_endproc
 4972              	.LFE46:
 4973              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4974              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4975              		.align	2
 4976              		.global	xTaskGenericNotifyFromISR
 4977              		.code	16
 4978              		.thumb_func
 4979              		.type	xTaskGenericNotifyFromISR, %function
 4980              	xTaskGenericNotifyFromISR:
 4981              	.LFB47:
4959:..\FreeRTOS\Source/tasks.c **** 
4960:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4961:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4962:..\FreeRTOS\Source/tasks.c **** 
4963:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4964:..\FreeRTOS\Source/tasks.c **** 
4965:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4966:..\FreeRTOS\Source/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4967:..\FreeRTOS\Source/tasks.c ****                                           uint32_t ulValue,
4968:..\FreeRTOS\Source/tasks.c ****                                           eNotifyAction eAction,
4969:..\FreeRTOS\Source/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4970:..\FreeRTOS\Source/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4971:..\FreeRTOS\Source/tasks.c ****     {
 4982              		.loc 1 4971 0
 4983              		.cfi_startproc
 4984              		@ args = 8, pretend = 0, frame = 32
 4985              		@ frame_needed = 1, uses_anonymous_args = 0
 4986 0000 80B5     		push	{r7, lr}
 4987              		.cfi_def_cfa_offset 8
 4988              		.cfi_offset 7, -8
 4989              		.cfi_offset 14, -4
 4990 0002 88B0     		sub	sp, sp, #32
 4991              		.cfi_def_cfa_offset 40
 4992 0004 00AF     		add	r7, sp, #0
 4993              		.cfi_def_cfa_register 7
 4994 0006 F860     		str	r0, [r7, #12]
 4995 0008 B960     		str	r1, [r7, #8]
 4996 000a 7A60     		str	r2, [r7, #4]
 4997 000c 1A00     		movs	r2, r3
 4998 000e FB1C     		adds	r3, r7, #3
 4999 0010 1A70     		strb	r2, [r3]
4972:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
4973:..\FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
4974:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn = pdPASS;
 5000              		.loc 1 4974 0
 5001 0012 0123     		movs	r3, #1
 5002 0014 FB61     		str	r3, [r7, #28]
4975:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4976:..\FreeRTOS\Source/tasks.c **** 
4977:..\FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToNotify );
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 177


 5003              		.loc 1 4977 0
 5004 0016 5E4B     		ldr	r3, .L431
 5005 0018 1B88     		ldrh	r3, [r3]
 5006 001a 002B     		cmp	r3, #0
 5007 001c 01D1     		bne	.L405
 5008              		.loc 1 4977 0 is_stmt 0 discriminator 1
 5009              		.syntax divided
 5010              	@ 4977 "..\FreeRTOS\Source\tasks.c" 1
 5011 001e 72B6     		 cpsid i 
 5012              	@ 0 "" 2
 5013              		.thumb
 5014              		.syntax unified
 5015              	.L406:
 5016 0020 FEE7     		b	.L406
 5017              	.L405:
4978:..\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5018              		.loc 1 4978 0 is_stmt 1
 5019 0022 5B4B     		ldr	r3, .L431
 5020 0024 1B88     		ldrh	r3, [r3]
 5021 0026 002B     		cmp	r3, #0
 5022 0028 01D1     		bne	.L407
 5023              		.loc 1 4978 0 is_stmt 0 discriminator 1
 5024              		.syntax divided
 5025              	@ 4978 "..\FreeRTOS\Source\tasks.c" 1
 5026 002a 72B6     		 cpsid i 
 5027              	@ 0 "" 2
 5028              		.thumb
 5029              		.syntax unified
 5030              	.L408:
 5031              		.loc 1 4978 0 discriminator 2
 5032 002c FEE7     		b	.L408
 5033              	.L407:
4979:..\FreeRTOS\Source/tasks.c **** 
4980:..\FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4981:..\FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4982:..\FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4983:..\FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4984:..\FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4985:..\FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
4986:..\FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4987:..\FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4988:..\FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
4989:..\FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4990:..\FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4991:..\FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4992:..\FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
4993:..\FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
4994:..\FreeRTOS\Source/tasks.c ****          * provided on the following link:
4995:..\FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
4996:..\FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4997:..\FreeRTOS\Source/tasks.c **** 
4998:..\FreeRTOS\Source/tasks.c ****         pxTCB = xTaskToNotify;
 5034              		.loc 1 4998 0 is_stmt 1
 5035 002e FB68     		ldr	r3, [r7, #12]
 5036 0030 BB61     		str	r3, [r7, #24]
4999:..\FreeRTOS\Source/tasks.c **** 
5000:..\FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 178


 5037              		.loc 1 5000 0
 5038 0032 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 5039 0036 0300     		movs	r3, r0
 5040 0038 7B61     		str	r3, [r7, #20]
5001:..\FreeRTOS\Source/tasks.c ****         {
5002:..\FreeRTOS\Source/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 5041              		.loc 1 5002 0
 5042 003a BB6A     		ldr	r3, [r7, #40]
 5043 003c 002B     		cmp	r3, #0
 5044 003e 06D0     		beq	.L409
5003:..\FreeRTOS\Source/tasks.c ****             {
5004:..\FreeRTOS\Source/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 5045              		.loc 1 5004 0
 5046 0040 BB69     		ldr	r3, [r7, #24]
 5047 0042 BA68     		ldr	r2, [r7, #8]
 5048 0044 1632     		adds	r2, r2, #22
 5049 0046 9200     		lsls	r2, r2, #2
 5050 0048 D258     		ldr	r2, [r2, r3]
 5051 004a BB6A     		ldr	r3, [r7, #40]
 5052 004c 1A60     		str	r2, [r3]
 5053              	.L409:
5005:..\FreeRTOS\Source/tasks.c ****             }
5006:..\FreeRTOS\Source/tasks.c **** 
5007:..\FreeRTOS\Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 5054              		.loc 1 5007 0
 5055 004e 1323     		movs	r3, #19
 5056 0050 FB18     		adds	r3, r7, r3
 5057 0052 B969     		ldr	r1, [r7, #24]
 5058 0054 6420     		movs	r0, #100
 5059 0056 BA68     		ldr	r2, [r7, #8]
 5060 0058 8A18     		adds	r2, r1, r2
 5061 005a 1218     		adds	r2, r2, r0
 5062 005c 1278     		ldrb	r2, [r2]
 5063 005e 1A70     		strb	r2, [r3]
5008:..\FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 5064              		.loc 1 5008 0
 5065 0060 BA69     		ldr	r2, [r7, #24]
 5066 0062 6421     		movs	r1, #100
 5067 0064 BB68     		ldr	r3, [r7, #8]
 5068 0066 D318     		adds	r3, r2, r3
 5069 0068 5B18     		adds	r3, r3, r1
 5070 006a 0222     		movs	r2, #2
 5071 006c 1A70     		strb	r2, [r3]
5009:..\FreeRTOS\Source/tasks.c **** 
5010:..\FreeRTOS\Source/tasks.c ****             switch( eAction )
 5072              		.loc 1 5010 0
 5073 006e FB1C     		adds	r3, r7, #3
 5074 0070 1B78     		ldrb	r3, [r3]
 5075 0072 042B     		cmp	r3, #4
 5076 0074 34D8     		bhi	.L410
 5077 0076 9A00     		lsls	r2, r3, #2
 5078 0078 464B     		ldr	r3, .L431+4
 5079 007a D318     		adds	r3, r2, r3
 5080 007c 1B68     		ldr	r3, [r3]
 5081 007e 9F46     		mov	pc, r3
 5082              		.section	.rodata
 5083              		.align	2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 179


 5084              	.L412:
 5085 001c F2000000 		.word	.L430
 5086 0020 80000000 		.word	.L413
 5087 0024 9C000000 		.word	.L414
 5088 0028 B4000000 		.word	.L415
 5089 002c C2000000 		.word	.L416
 5090              		.section	.text.xTaskGenericNotifyFromISR
 5091              	.L413:
5011:..\FreeRTOS\Source/tasks.c ****             {
5012:..\FreeRTOS\Source/tasks.c ****                 case eSetBits:
5013:..\FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 5092              		.loc 1 5013 0
 5093 0080 BB69     		ldr	r3, [r7, #24]
 5094 0082 BA68     		ldr	r2, [r7, #8]
 5095 0084 1632     		adds	r2, r2, #22
 5096 0086 9200     		lsls	r2, r2, #2
 5097 0088 D258     		ldr	r2, [r2, r3]
 5098 008a 7B68     		ldr	r3, [r7, #4]
 5099 008c 1A43     		orrs	r2, r3
 5100 008e 1100     		movs	r1, r2
 5101 0090 BB69     		ldr	r3, [r7, #24]
 5102 0092 BA68     		ldr	r2, [r7, #8]
 5103 0094 1632     		adds	r2, r2, #22
 5104 0096 9200     		lsls	r2, r2, #2
 5105 0098 D150     		str	r1, [r2, r3]
5014:..\FreeRTOS\Source/tasks.c ****                     break;
 5106              		.loc 1 5014 0
 5107 009a 2BE0     		b	.L417
 5108              	.L414:
5015:..\FreeRTOS\Source/tasks.c **** 
5016:..\FreeRTOS\Source/tasks.c ****                 case eIncrement:
5017:..\FreeRTOS\Source/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 5109              		.loc 1 5017 0
 5110 009c BB69     		ldr	r3, [r7, #24]
 5111 009e BA68     		ldr	r2, [r7, #8]
 5112 00a0 1632     		adds	r2, r2, #22
 5113 00a2 9200     		lsls	r2, r2, #2
 5114 00a4 D358     		ldr	r3, [r2, r3]
 5115 00a6 591C     		adds	r1, r3, #1
 5116 00a8 BB69     		ldr	r3, [r7, #24]
 5117 00aa BA68     		ldr	r2, [r7, #8]
 5118 00ac 1632     		adds	r2, r2, #22
 5119 00ae 9200     		lsls	r2, r2, #2
 5120 00b0 D150     		str	r1, [r2, r3]
5018:..\FreeRTOS\Source/tasks.c ****                     break;
 5121              		.loc 1 5018 0
 5122 00b2 1FE0     		b	.L417
 5123              	.L415:
5019:..\FreeRTOS\Source/tasks.c **** 
5020:..\FreeRTOS\Source/tasks.c ****                 case eSetValueWithOverwrite:
5021:..\FreeRTOS\Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 5124              		.loc 1 5021 0
 5125 00b4 BB69     		ldr	r3, [r7, #24]
 5126 00b6 BA68     		ldr	r2, [r7, #8]
 5127 00b8 1632     		adds	r2, r2, #22
 5128 00ba 9200     		lsls	r2, r2, #2
 5129 00bc 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 180


 5130 00be D150     		str	r1, [r2, r3]
5022:..\FreeRTOS\Source/tasks.c ****                     break;
 5131              		.loc 1 5022 0
 5132 00c0 18E0     		b	.L417
 5133              	.L416:
5023:..\FreeRTOS\Source/tasks.c **** 
5024:..\FreeRTOS\Source/tasks.c ****                 case eSetValueWithoutOverwrite:
5025:..\FreeRTOS\Source/tasks.c **** 
5026:..\FreeRTOS\Source/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5134              		.loc 1 5026 0
 5135 00c2 1323     		movs	r3, #19
 5136 00c4 FB18     		adds	r3, r7, r3
 5137 00c6 1B78     		ldrb	r3, [r3]
 5138 00c8 022B     		cmp	r3, #2
 5139 00ca 06D0     		beq	.L418
5027:..\FreeRTOS\Source/tasks.c ****                     {
5028:..\FreeRTOS\Source/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 5140              		.loc 1 5028 0
 5141 00cc BB69     		ldr	r3, [r7, #24]
 5142 00ce BA68     		ldr	r2, [r7, #8]
 5143 00d0 1632     		adds	r2, r2, #22
 5144 00d2 9200     		lsls	r2, r2, #2
 5145 00d4 7968     		ldr	r1, [r7, #4]
 5146 00d6 D150     		str	r1, [r2, r3]
5029:..\FreeRTOS\Source/tasks.c ****                     }
5030:..\FreeRTOS\Source/tasks.c ****                     else
5031:..\FreeRTOS\Source/tasks.c ****                     {
5032:..\FreeRTOS\Source/tasks.c ****                         /* The value could not be written to the task. */
5033:..\FreeRTOS\Source/tasks.c ****                         xReturn = pdFAIL;
5034:..\FreeRTOS\Source/tasks.c ****                     }
5035:..\FreeRTOS\Source/tasks.c **** 
5036:..\FreeRTOS\Source/tasks.c ****                     break;
 5147              		.loc 1 5036 0
 5148 00d8 0CE0     		b	.L417
 5149              	.L418:
5033:..\FreeRTOS\Source/tasks.c ****                     }
 5150              		.loc 1 5033 0
 5151 00da 0023     		movs	r3, #0
 5152 00dc FB61     		str	r3, [r7, #28]
 5153              		.loc 1 5036 0
 5154 00de 09E0     		b	.L417
 5155              	.L410:
5037:..\FreeRTOS\Source/tasks.c **** 
5038:..\FreeRTOS\Source/tasks.c ****                 case eNoAction:
5039:..\FreeRTOS\Source/tasks.c **** 
5040:..\FreeRTOS\Source/tasks.c ****                     /* The task is being notified without its notify value being
5041:..\FreeRTOS\Source/tasks.c ****                      * updated. */
5042:..\FreeRTOS\Source/tasks.c ****                     break;
5043:..\FreeRTOS\Source/tasks.c **** 
5044:..\FreeRTOS\Source/tasks.c ****                 default:
5045:..\FreeRTOS\Source/tasks.c **** 
5046:..\FreeRTOS\Source/tasks.c ****                     /* Should not get here if all enums are handled.
5047:..\FreeRTOS\Source/tasks.c ****                      * Artificially force an assert by testing a value the
5048:..\FreeRTOS\Source/tasks.c ****                      * compiler can't assume is const. */
5049:..\FreeRTOS\Source/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 5156              		.loc 1 5049 0
 5157 00e0 2B4B     		ldr	r3, .L431
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 181


 5158 00e2 1B88     		ldrh	r3, [r3]
 5159 00e4 002B     		cmp	r3, #0
 5160 00e6 01D1     		bne	.L420
 5161              		.loc 1 5049 0 is_stmt 0 discriminator 1
 5162              		.syntax divided
 5163              	@ 5049 "..\FreeRTOS\Source\tasks.c" 1
 5164 00e8 72B6     		 cpsid i 
 5165              	@ 0 "" 2
 5166              		.thumb
 5167              		.syntax unified
 5168              	.L421:
 5169              		.loc 1 5049 0 discriminator 3
 5170 00ea FEE7     		b	.L421
 5171              	.L420:
 5172              		.loc 1 5049 0 discriminator 2
 5173 00ec 2A4B     		ldr	r3, .L431+8
 5174 00ee 1B68     		ldr	r3, [r3]
5050:..\FreeRTOS\Source/tasks.c ****                     break;
 5175              		.loc 1 5050 0 is_stmt 1 discriminator 2
 5176 00f0 00E0     		b	.L417
 5177              	.L430:
5042:..\FreeRTOS\Source/tasks.c **** 
 5178              		.loc 1 5042 0
 5179 00f2 C046     		nop
 5180              	.L417:
5051:..\FreeRTOS\Source/tasks.c ****             }
5052:..\FreeRTOS\Source/tasks.c **** 
5053:..\FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5054:..\FreeRTOS\Source/tasks.c **** 
5055:..\FreeRTOS\Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5056:..\FreeRTOS\Source/tasks.c ****              * notification then unblock it now. */
5057:..\FreeRTOS\Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5181              		.loc 1 5057 0
 5182 00f4 1323     		movs	r3, #19
 5183 00f6 FB18     		adds	r3, r7, r3
 5184 00f8 1B78     		ldrb	r3, [r3]
 5185 00fa 012B     		cmp	r3, #1
 5186 00fc 3FD1     		bne	.L422
5058:..\FreeRTOS\Source/tasks.c ****             {
5059:..\FreeRTOS\Source/tasks.c ****                 /* The task should not have been on an event list. */
5060:..\FreeRTOS\Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5187              		.loc 1 5060 0
 5188 00fe 244B     		ldr	r3, .L431
 5189 0100 1B88     		ldrh	r3, [r3]
 5190 0102 002B     		cmp	r3, #0
 5191 0104 01D1     		bne	.L423
 5192              		.loc 1 5060 0 is_stmt 0 discriminator 1
 5193              		.syntax divided
 5194              	@ 5060 "..\FreeRTOS\Source\tasks.c" 1
 5195 0106 72B6     		 cpsid i 
 5196              	@ 0 "" 2
 5197              		.thumb
 5198              		.syntax unified
 5199              	.L424:
 5200              		.loc 1 5060 0 discriminator 4
 5201 0108 FEE7     		b	.L424
 5202              	.L423:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 182


5061:..\FreeRTOS\Source/tasks.c **** 
5062:..\FreeRTOS\Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5203              		.loc 1 5062 0 is_stmt 1 discriminator 2
 5204 010a 244B     		ldr	r3, .L431+12
 5205 010c 1B68     		ldr	r3, [r3]
 5206 010e 002B     		cmp	r3, #0
 5207 0110 1DD1     		bne	.L425
5063:..\FreeRTOS\Source/tasks.c ****                 {
5064:..\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5208              		.loc 1 5064 0
 5209 0112 BB69     		ldr	r3, [r7, #24]
 5210 0114 0433     		adds	r3, r3, #4
 5211 0116 1800     		movs	r0, r3
 5212 0118 FFF7FEFF 		bl	uxListRemove
5065:..\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5213              		.loc 1 5065 0
 5214 011c BB69     		ldr	r3, [r7, #24]
 5215 011e DA6A     		ldr	r2, [r3, #44]
 5216 0120 1F4B     		ldr	r3, .L431+16
 5217 0122 1B68     		ldr	r3, [r3]
 5218 0124 9A42     		cmp	r2, r3
 5219 0126 03D9     		bls	.L426
 5220              		.loc 1 5065 0 is_stmt 0 discriminator 1
 5221 0128 BB69     		ldr	r3, [r7, #24]
 5222 012a DA6A     		ldr	r2, [r3, #44]
 5223 012c 1C4B     		ldr	r3, .L431+16
 5224 012e 1A60     		str	r2, [r3]
 5225              	.L426:
 5226              		.loc 1 5065 0 discriminator 3
 5227 0130 BB69     		ldr	r3, [r7, #24]
 5228 0132 DA6A     		ldr	r2, [r3, #44]
 5229 0134 1300     		movs	r3, r2
 5230 0136 9B00     		lsls	r3, r3, #2
 5231 0138 9B18     		adds	r3, r3, r2
 5232 013a 9B00     		lsls	r3, r3, #2
 5233 013c 194A     		ldr	r2, .L431+20
 5234 013e 9A18     		adds	r2, r3, r2
 5235 0140 BB69     		ldr	r3, [r7, #24]
 5236 0142 0433     		adds	r3, r3, #4
 5237 0144 1900     		movs	r1, r3
 5238 0146 1000     		movs	r0, r2
 5239 0148 FFF7FEFF 		bl	vListInsertEnd
 5240 014c 07E0     		b	.L427
 5241              	.L425:
5066:..\FreeRTOS\Source/tasks.c ****                 }
5067:..\FreeRTOS\Source/tasks.c ****                 else
5068:..\FreeRTOS\Source/tasks.c ****                 {
5069:..\FreeRTOS\Source/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5070:..\FreeRTOS\Source/tasks.c ****                      * this task pending until the scheduler is resumed. */
5071:..\FreeRTOS\Source/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5242              		.loc 1 5071 0 is_stmt 1
 5243 014e BB69     		ldr	r3, [r7, #24]
 5244 0150 1833     		adds	r3, r3, #24
 5245 0152 1A00     		movs	r2, r3
 5246 0154 144B     		ldr	r3, .L431+24
 5247 0156 1100     		movs	r1, r2
 5248 0158 1800     		movs	r0, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 183


 5249 015a FFF7FEFF 		bl	vListInsertEnd
 5250              	.L427:
5072:..\FreeRTOS\Source/tasks.c ****                 }
5073:..\FreeRTOS\Source/tasks.c **** 
5074:..\FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5251              		.loc 1 5074 0
 5252 015e BB69     		ldr	r3, [r7, #24]
 5253 0160 DA6A     		ldr	r2, [r3, #44]
 5254 0162 124B     		ldr	r3, .L431+28
 5255 0164 1B68     		ldr	r3, [r3]
 5256 0166 DB6A     		ldr	r3, [r3, #44]
 5257 0168 9A42     		cmp	r2, r3
 5258 016a 08D9     		bls	.L422
5075:..\FreeRTOS\Source/tasks.c ****                 {
5076:..\FreeRTOS\Source/tasks.c ****                     /* The notified task has a priority above the currently
5077:..\FreeRTOS\Source/tasks.c ****                      * executing task so a yield is required. */
5078:..\FreeRTOS\Source/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 5259              		.loc 1 5078 0
 5260 016c FB6A     		ldr	r3, [r7, #44]
 5261 016e 002B     		cmp	r3, #0
 5262 0170 02D0     		beq	.L428
5079:..\FreeRTOS\Source/tasks.c ****                     {
5080:..\FreeRTOS\Source/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 5263              		.loc 1 5080 0
 5264 0172 FB6A     		ldr	r3, [r7, #44]
 5265 0174 0122     		movs	r2, #1
 5266 0176 1A60     		str	r2, [r3]
 5267              	.L428:
5081:..\FreeRTOS\Source/tasks.c ****                     }
5082:..\FreeRTOS\Source/tasks.c **** 
5083:..\FreeRTOS\Source/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5084:..\FreeRTOS\Source/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5085:..\FreeRTOS\Source/tasks.c ****                      * safe FreeRTOS function. */
5086:..\FreeRTOS\Source/tasks.c ****                     xYieldPending = pdTRUE;
 5268              		.loc 1 5086 0
 5269 0178 0D4B     		ldr	r3, .L431+32
 5270 017a 0122     		movs	r2, #1
 5271 017c 1A60     		str	r2, [r3]
 5272              	.L422:
5087:..\FreeRTOS\Source/tasks.c ****                 }
5088:..\FreeRTOS\Source/tasks.c ****                 else
5089:..\FreeRTOS\Source/tasks.c ****                 {
5090:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5091:..\FreeRTOS\Source/tasks.c ****                 }
5092:..\FreeRTOS\Source/tasks.c ****             }
5093:..\FreeRTOS\Source/tasks.c ****         }
5094:..\FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 5273              		.loc 1 5094 0
 5274 017e 7B69     		ldr	r3, [r7, #20]
 5275 0180 1800     		movs	r0, r3
 5276 0182 FFF7FEFF 		bl	vClearInterruptMaskFromISR
5095:..\FreeRTOS\Source/tasks.c **** 
5096:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 5277              		.loc 1 5096 0
 5278 0186 FB69     		ldr	r3, [r7, #28]
5097:..\FreeRTOS\Source/tasks.c ****     }
 5279              		.loc 1 5097 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 184


 5280 0188 1800     		movs	r0, r3
 5281 018a BD46     		mov	sp, r7
 5282 018c 08B0     		add	sp, sp, #32
 5283              		@ sp needed
 5284 018e 80BD     		pop	{r7, pc}
 5285              	.L432:
 5286              		.align	2
 5287              	.L431:
 5288 0190 00000000 		.word	x
 5289 0194 1C000000 		.word	.L412
 5290 0198 DC000000 		.word	xTickCount
 5291 019c 00010000 		.word	uxSchedulerSuspended
 5292 01a0 E0000000 		.word	uxTopReadyPriority
 5293 01a4 04000000 		.word	pxReadyTasksLists
 5294 01a8 98000000 		.word	xPendingReadyList
 5295 01ac 00000000 		.word	pxCurrentTCB
 5296 01b0 EC000000 		.word	xYieldPending
 5297              		.cfi_endproc
 5298              	.LFE47:
 5299              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 5300              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 5301              		.align	2
 5302              		.global	vTaskGenericNotifyGiveFromISR
 5303              		.code	16
 5304              		.thumb_func
 5305              		.type	vTaskGenericNotifyGiveFromISR, %function
 5306              	vTaskGenericNotifyGiveFromISR:
 5307              	.LFB48:
5098:..\FreeRTOS\Source/tasks.c **** 
5099:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5100:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5101:..\FreeRTOS\Source/tasks.c **** 
5102:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5103:..\FreeRTOS\Source/tasks.c **** 
5104:..\FreeRTOS\Source/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5105:..\FreeRTOS\Source/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5106:..\FreeRTOS\Source/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5107:..\FreeRTOS\Source/tasks.c ****     {
 5308              		.loc 1 5107 0
 5309              		.cfi_startproc
 5310              		@ args = 0, pretend = 0, frame = 32
 5311              		@ frame_needed = 1, uses_anonymous_args = 0
 5312 0000 80B5     		push	{r7, lr}
 5313              		.cfi_def_cfa_offset 8
 5314              		.cfi_offset 7, -8
 5315              		.cfi_offset 14, -4
 5316 0002 88B0     		sub	sp, sp, #32
 5317              		.cfi_def_cfa_offset 40
 5318 0004 00AF     		add	r7, sp, #0
 5319              		.cfi_def_cfa_register 7
 5320 0006 F860     		str	r0, [r7, #12]
 5321 0008 B960     		str	r1, [r7, #8]
 5322 000a 7A60     		str	r2, [r7, #4]
5108:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
5109:..\FreeRTOS\Source/tasks.c ****         uint8_t ucOriginalNotifyState;
5110:..\FreeRTOS\Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5111:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 185


5112:..\FreeRTOS\Source/tasks.c ****         configASSERT( xTaskToNotify );
 5323              		.loc 1 5112 0
 5324 000c 3C4B     		ldr	r3, .L445
 5325 000e 1B88     		ldrh	r3, [r3]
 5326 0010 002B     		cmp	r3, #0
 5327 0012 01D1     		bne	.L434
 5328              		.loc 1 5112 0 is_stmt 0 discriminator 1
 5329              		.syntax divided
 5330              	@ 5112 "..\FreeRTOS\Source\tasks.c" 1
 5331 0014 72B6     		 cpsid i 
 5332              	@ 0 "" 2
 5333              		.thumb
 5334              		.syntax unified
 5335              	.L435:
 5336 0016 FEE7     		b	.L435
 5337              	.L434:
5113:..\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5338              		.loc 1 5113 0 is_stmt 1
 5339 0018 394B     		ldr	r3, .L445
 5340 001a 1B88     		ldrh	r3, [r3]
 5341 001c 002B     		cmp	r3, #0
 5342 001e 01D1     		bne	.L436
 5343              		.loc 1 5113 0 is_stmt 0 discriminator 1
 5344              		.syntax divided
 5345              	@ 5113 "..\FreeRTOS\Source\tasks.c" 1
 5346 0020 72B6     		 cpsid i 
 5347              	@ 0 "" 2
 5348              		.thumb
 5349              		.syntax unified
 5350              	.L437:
 5351              		.loc 1 5113 0 discriminator 2
 5352 0022 FEE7     		b	.L437
 5353              	.L436:
5114:..\FreeRTOS\Source/tasks.c **** 
5115:..\FreeRTOS\Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5116:..\FreeRTOS\Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5117:..\FreeRTOS\Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5118:..\FreeRTOS\Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5119:..\FreeRTOS\Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5120:..\FreeRTOS\Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
5121:..\FreeRTOS\Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5122:..\FreeRTOS\Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5123:..\FreeRTOS\Source/tasks.c ****          * been assigned a priority above the configured maximum system call
5124:..\FreeRTOS\Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5125:..\FreeRTOS\Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5126:..\FreeRTOS\Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5127:..\FreeRTOS\Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5128:..\FreeRTOS\Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5129:..\FreeRTOS\Source/tasks.c ****          * provided on the following link:
5130:..\FreeRTOS\Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5131:..\FreeRTOS\Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5132:..\FreeRTOS\Source/tasks.c **** 
5133:..\FreeRTOS\Source/tasks.c ****         pxTCB = xTaskToNotify;
 5354              		.loc 1 5133 0 is_stmt 1
 5355 0024 FB68     		ldr	r3, [r7, #12]
 5356 0026 FB61     		str	r3, [r7, #28]
5134:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 186


5135:..\FreeRTOS\Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5357              		.loc 1 5135 0
 5358 0028 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 5359 002c 0300     		movs	r3, r0
 5360 002e BB61     		str	r3, [r7, #24]
5136:..\FreeRTOS\Source/tasks.c ****         {
5137:..\FreeRTOS\Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 5361              		.loc 1 5137 0
 5362 0030 1723     		movs	r3, #23
 5363 0032 FB18     		adds	r3, r7, r3
 5364 0034 F969     		ldr	r1, [r7, #28]
 5365 0036 6420     		movs	r0, #100
 5366 0038 BA68     		ldr	r2, [r7, #8]
 5367 003a 8A18     		adds	r2, r1, r2
 5368 003c 1218     		adds	r2, r2, r0
 5369 003e 1278     		ldrb	r2, [r2]
 5370 0040 1A70     		strb	r2, [r3]
5138:..\FreeRTOS\Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 5371              		.loc 1 5138 0
 5372 0042 FA69     		ldr	r2, [r7, #28]
 5373 0044 6421     		movs	r1, #100
 5374 0046 BB68     		ldr	r3, [r7, #8]
 5375 0048 D318     		adds	r3, r2, r3
 5376 004a 5B18     		adds	r3, r3, r1
 5377 004c 0222     		movs	r2, #2
 5378 004e 1A70     		strb	r2, [r3]
5139:..\FreeRTOS\Source/tasks.c **** 
5140:..\FreeRTOS\Source/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5141:..\FreeRTOS\Source/tasks.c ****              * semaphore. */
5142:..\FreeRTOS\Source/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 5379              		.loc 1 5142 0
 5380 0050 FB69     		ldr	r3, [r7, #28]
 5381 0052 BA68     		ldr	r2, [r7, #8]
 5382 0054 1632     		adds	r2, r2, #22
 5383 0056 9200     		lsls	r2, r2, #2
 5384 0058 D358     		ldr	r3, [r2, r3]
 5385 005a 591C     		adds	r1, r3, #1
 5386 005c FB69     		ldr	r3, [r7, #28]
 5387 005e BA68     		ldr	r2, [r7, #8]
 5388 0060 1632     		adds	r2, r2, #22
 5389 0062 9200     		lsls	r2, r2, #2
 5390 0064 D150     		str	r1, [r2, r3]
5143:..\FreeRTOS\Source/tasks.c **** 
5144:..\FreeRTOS\Source/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5145:..\FreeRTOS\Source/tasks.c **** 
5146:..\FreeRTOS\Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5147:..\FreeRTOS\Source/tasks.c ****              * notification then unblock it now. */
5148:..\FreeRTOS\Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5391              		.loc 1 5148 0
 5392 0066 1723     		movs	r3, #23
 5393 0068 FB18     		adds	r3, r7, r3
 5394 006a 1B78     		ldrb	r3, [r3]
 5395 006c 012B     		cmp	r3, #1
 5396 006e 3FD1     		bne	.L438
5149:..\FreeRTOS\Source/tasks.c ****             {
5150:..\FreeRTOS\Source/tasks.c ****                 /* The task should not have been on an event list. */
5151:..\FreeRTOS\Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 187


 5397              		.loc 1 5151 0
 5398 0070 234B     		ldr	r3, .L445
 5399 0072 1B88     		ldrh	r3, [r3]
 5400 0074 002B     		cmp	r3, #0
 5401 0076 01D1     		bne	.L439
 5402              		.loc 1 5151 0 is_stmt 0 discriminator 1
 5403              		.syntax divided
 5404              	@ 5151 "..\FreeRTOS\Source\tasks.c" 1
 5405 0078 72B6     		 cpsid i 
 5406              	@ 0 "" 2
 5407              		.thumb
 5408              		.syntax unified
 5409              	.L440:
 5410              		.loc 1 5151 0 discriminator 3
 5411 007a FEE7     		b	.L440
 5412              	.L439:
5152:..\FreeRTOS\Source/tasks.c **** 
5153:..\FreeRTOS\Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5413              		.loc 1 5153 0 is_stmt 1 discriminator 2
 5414 007c 214B     		ldr	r3, .L445+4
 5415 007e 1B68     		ldr	r3, [r3]
 5416 0080 002B     		cmp	r3, #0
 5417 0082 1DD1     		bne	.L441
5154:..\FreeRTOS\Source/tasks.c ****                 {
5155:..\FreeRTOS\Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5418              		.loc 1 5155 0
 5419 0084 FB69     		ldr	r3, [r7, #28]
 5420 0086 0433     		adds	r3, r3, #4
 5421 0088 1800     		movs	r0, r3
 5422 008a FFF7FEFF 		bl	uxListRemove
5156:..\FreeRTOS\Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5423              		.loc 1 5156 0
 5424 008e FB69     		ldr	r3, [r7, #28]
 5425 0090 DA6A     		ldr	r2, [r3, #44]
 5426 0092 1D4B     		ldr	r3, .L445+8
 5427 0094 1B68     		ldr	r3, [r3]
 5428 0096 9A42     		cmp	r2, r3
 5429 0098 03D9     		bls	.L442
 5430              		.loc 1 5156 0 is_stmt 0 discriminator 1
 5431 009a FB69     		ldr	r3, [r7, #28]
 5432 009c DA6A     		ldr	r2, [r3, #44]
 5433 009e 1A4B     		ldr	r3, .L445+8
 5434 00a0 1A60     		str	r2, [r3]
 5435              	.L442:
 5436              		.loc 1 5156 0 discriminator 3
 5437 00a2 FB69     		ldr	r3, [r7, #28]
 5438 00a4 DA6A     		ldr	r2, [r3, #44]
 5439 00a6 1300     		movs	r3, r2
 5440 00a8 9B00     		lsls	r3, r3, #2
 5441 00aa 9B18     		adds	r3, r3, r2
 5442 00ac 9B00     		lsls	r3, r3, #2
 5443 00ae 174A     		ldr	r2, .L445+12
 5444 00b0 9A18     		adds	r2, r3, r2
 5445 00b2 FB69     		ldr	r3, [r7, #28]
 5446 00b4 0433     		adds	r3, r3, #4
 5447 00b6 1900     		movs	r1, r3
 5448 00b8 1000     		movs	r0, r2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 188


 5449 00ba FFF7FEFF 		bl	vListInsertEnd
 5450 00be 07E0     		b	.L443
 5451              	.L441:
5157:..\FreeRTOS\Source/tasks.c ****                 }
5158:..\FreeRTOS\Source/tasks.c ****                 else
5159:..\FreeRTOS\Source/tasks.c ****                 {
5160:..\FreeRTOS\Source/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5161:..\FreeRTOS\Source/tasks.c ****                      * this task pending until the scheduler is resumed. */
5162:..\FreeRTOS\Source/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5452              		.loc 1 5162 0 is_stmt 1
 5453 00c0 FB69     		ldr	r3, [r7, #28]
 5454 00c2 1833     		adds	r3, r3, #24
 5455 00c4 1A00     		movs	r2, r3
 5456 00c6 124B     		ldr	r3, .L445+16
 5457 00c8 1100     		movs	r1, r2
 5458 00ca 1800     		movs	r0, r3
 5459 00cc FFF7FEFF 		bl	vListInsertEnd
 5460              	.L443:
5163:..\FreeRTOS\Source/tasks.c ****                 }
5164:..\FreeRTOS\Source/tasks.c **** 
5165:..\FreeRTOS\Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5461              		.loc 1 5165 0
 5462 00d0 FB69     		ldr	r3, [r7, #28]
 5463 00d2 DA6A     		ldr	r2, [r3, #44]
 5464 00d4 0F4B     		ldr	r3, .L445+20
 5465 00d6 1B68     		ldr	r3, [r3]
 5466 00d8 DB6A     		ldr	r3, [r3, #44]
 5467 00da 9A42     		cmp	r2, r3
 5468 00dc 08D9     		bls	.L438
5166:..\FreeRTOS\Source/tasks.c ****                 {
5167:..\FreeRTOS\Source/tasks.c ****                     /* The notified task has a priority above the currently
5168:..\FreeRTOS\Source/tasks.c ****                      * executing task so a yield is required. */
5169:..\FreeRTOS\Source/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 5469              		.loc 1 5169 0
 5470 00de 7B68     		ldr	r3, [r7, #4]
 5471 00e0 002B     		cmp	r3, #0
 5472 00e2 02D0     		beq	.L444
5170:..\FreeRTOS\Source/tasks.c ****                     {
5171:..\FreeRTOS\Source/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 5473              		.loc 1 5171 0
 5474 00e4 7B68     		ldr	r3, [r7, #4]
 5475 00e6 0122     		movs	r2, #1
 5476 00e8 1A60     		str	r2, [r3]
 5477              	.L444:
5172:..\FreeRTOS\Source/tasks.c ****                     }
5173:..\FreeRTOS\Source/tasks.c **** 
5174:..\FreeRTOS\Source/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5175:..\FreeRTOS\Source/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5176:..\FreeRTOS\Source/tasks.c ****                      * safe FreeRTOS function. */
5177:..\FreeRTOS\Source/tasks.c ****                     xYieldPending = pdTRUE;
 5478              		.loc 1 5177 0
 5479 00ea 0B4B     		ldr	r3, .L445+24
 5480 00ec 0122     		movs	r2, #1
 5481 00ee 1A60     		str	r2, [r3]
 5482              	.L438:
5178:..\FreeRTOS\Source/tasks.c ****                 }
5179:..\FreeRTOS\Source/tasks.c ****                 else
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 189


5180:..\FreeRTOS\Source/tasks.c ****                 {
5181:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5182:..\FreeRTOS\Source/tasks.c ****                 }
5183:..\FreeRTOS\Source/tasks.c ****             }
5184:..\FreeRTOS\Source/tasks.c ****         }
5185:..\FreeRTOS\Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 5483              		.loc 1 5185 0
 5484 00f0 BB69     		ldr	r3, [r7, #24]
 5485 00f2 1800     		movs	r0, r3
 5486 00f4 FFF7FEFF 		bl	vClearInterruptMaskFromISR
5186:..\FreeRTOS\Source/tasks.c ****     }
 5487              		.loc 1 5186 0
 5488 00f8 C046     		nop
 5489 00fa BD46     		mov	sp, r7
 5490 00fc 08B0     		add	sp, sp, #32
 5491              		@ sp needed
 5492 00fe 80BD     		pop	{r7, pc}
 5493              	.L446:
 5494              		.align	2
 5495              	.L445:
 5496 0100 00000000 		.word	x
 5497 0104 00010000 		.word	uxSchedulerSuspended
 5498 0108 E0000000 		.word	uxTopReadyPriority
 5499 010c 04000000 		.word	pxReadyTasksLists
 5500 0110 98000000 		.word	xPendingReadyList
 5501 0114 00000000 		.word	pxCurrentTCB
 5502 0118 EC000000 		.word	xYieldPending
 5503              		.cfi_endproc
 5504              	.LFE48:
 5505              		.size	vTaskGenericNotifyGiveFromISR, .-vTaskGenericNotifyGiveFromISR
 5506              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 5507              		.align	2
 5508              		.global	xTaskGenericNotifyStateClear
 5509              		.code	16
 5510              		.thumb_func
 5511              		.type	xTaskGenericNotifyStateClear, %function
 5512              	xTaskGenericNotifyStateClear:
 5513              	.LFB49:
5187:..\FreeRTOS\Source/tasks.c **** 
5188:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5189:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5190:..\FreeRTOS\Source/tasks.c **** 
5191:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5192:..\FreeRTOS\Source/tasks.c **** 
5193:..\FreeRTOS\Source/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5194:..\FreeRTOS\Source/tasks.c ****                                              UBaseType_t uxIndexToClear )
5195:..\FreeRTOS\Source/tasks.c ****     {
 5514              		.loc 1 5195 0
 5515              		.cfi_startproc
 5516              		@ args = 0, pretend = 0, frame = 16
 5517              		@ frame_needed = 1, uses_anonymous_args = 0
 5518 0000 80B5     		push	{r7, lr}
 5519              		.cfi_def_cfa_offset 8
 5520              		.cfi_offset 7, -8
 5521              		.cfi_offset 14, -4
 5522 0002 84B0     		sub	sp, sp, #16
 5523              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 190


 5524 0004 00AF     		add	r7, sp, #0
 5525              		.cfi_def_cfa_register 7
 5526 0006 7860     		str	r0, [r7, #4]
 5527 0008 3960     		str	r1, [r7]
5196:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
5197:..\FreeRTOS\Source/tasks.c ****         BaseType_t xReturn;
5198:..\FreeRTOS\Source/tasks.c **** 
5199:..\FreeRTOS\Source/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5528              		.loc 1 5199 0
 5529 000a 164B     		ldr	r3, .L455
 5530 000c 1B88     		ldrh	r3, [r3]
 5531 000e 002B     		cmp	r3, #0
 5532 0010 01D1     		bne	.L448
 5533              		.loc 1 5199 0 is_stmt 0 discriminator 1
 5534              		.syntax divided
 5535              	@ 5199 "..\FreeRTOS\Source\tasks.c" 1
 5536 0012 72B6     		 cpsid i 
 5537              	@ 0 "" 2
 5538              		.thumb
 5539              		.syntax unified
 5540              	.L449:
 5541 0014 FEE7     		b	.L449
 5542              	.L448:
5200:..\FreeRTOS\Source/tasks.c **** 
5201:..\FreeRTOS\Source/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5202:..\FreeRTOS\Source/tasks.c ****          * its notification state cleared. */
5203:..\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 5543              		.loc 1 5203 0 is_stmt 1
 5544 0016 7B68     		ldr	r3, [r7, #4]
 5545 0018 002B     		cmp	r3, #0
 5546 001a 02D1     		bne	.L450
 5547              		.loc 1 5203 0 is_stmt 0 discriminator 1
 5548 001c 124B     		ldr	r3, .L455+4
 5549 001e 1B68     		ldr	r3, [r3]
 5550 0020 00E0     		b	.L451
 5551              	.L450:
 5552              		.loc 1 5203 0 discriminator 2
 5553 0022 7B68     		ldr	r3, [r7, #4]
 5554              	.L451:
 5555              		.loc 1 5203 0 discriminator 4
 5556 0024 BB60     		str	r3, [r7, #8]
5204:..\FreeRTOS\Source/tasks.c **** 
5205:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 5557              		.loc 1 5205 0 is_stmt 1 discriminator 4
 5558 0026 FFF7FEFF 		bl	vPortEnterCritical
5206:..\FreeRTOS\Source/tasks.c ****         {
5207:..\FreeRTOS\Source/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 5559              		.loc 1 5207 0 discriminator 4
 5560 002a BA68     		ldr	r2, [r7, #8]
 5561 002c 6421     		movs	r1, #100
 5562 002e 3B68     		ldr	r3, [r7]
 5563 0030 D318     		adds	r3, r2, r3
 5564 0032 5B18     		adds	r3, r3, r1
 5565 0034 1B78     		ldrb	r3, [r3]
 5566 0036 DBB2     		uxtb	r3, r3
 5567 0038 022B     		cmp	r3, #2
 5568 003a 09D1     		bne	.L452
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 191


5208:..\FreeRTOS\Source/tasks.c ****             {
5209:..\FreeRTOS\Source/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 5569              		.loc 1 5209 0
 5570 003c BA68     		ldr	r2, [r7, #8]
 5571 003e 6421     		movs	r1, #100
 5572 0040 3B68     		ldr	r3, [r7]
 5573 0042 D318     		adds	r3, r2, r3
 5574 0044 5B18     		adds	r3, r3, r1
 5575 0046 0022     		movs	r2, #0
 5576 0048 1A70     		strb	r2, [r3]
5210:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdPASS;
 5577              		.loc 1 5210 0
 5578 004a 0123     		movs	r3, #1
 5579 004c FB60     		str	r3, [r7, #12]
 5580 004e 01E0     		b	.L453
 5581              	.L452:
5211:..\FreeRTOS\Source/tasks.c ****             }
5212:..\FreeRTOS\Source/tasks.c ****             else
5213:..\FreeRTOS\Source/tasks.c ****             {
5214:..\FreeRTOS\Source/tasks.c ****                 xReturn = pdFAIL;
 5582              		.loc 1 5214 0
 5583 0050 0023     		movs	r3, #0
 5584 0052 FB60     		str	r3, [r7, #12]
 5585              	.L453:
5215:..\FreeRTOS\Source/tasks.c ****             }
5216:..\FreeRTOS\Source/tasks.c ****         }
5217:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 5586              		.loc 1 5217 0
 5587 0054 FFF7FEFF 		bl	vPortExitCritical
5218:..\FreeRTOS\Source/tasks.c **** 
5219:..\FreeRTOS\Source/tasks.c ****         return xReturn;
 5588              		.loc 1 5219 0
 5589 0058 FB68     		ldr	r3, [r7, #12]
5220:..\FreeRTOS\Source/tasks.c ****     }
 5590              		.loc 1 5220 0
 5591 005a 1800     		movs	r0, r3
 5592 005c BD46     		mov	sp, r7
 5593 005e 04B0     		add	sp, sp, #16
 5594              		@ sp needed
 5595 0060 80BD     		pop	{r7, pc}
 5596              	.L456:
 5597 0062 C046     		.align	2
 5598              	.L455:
 5599 0064 00000000 		.word	x
 5600 0068 00000000 		.word	pxCurrentTCB
 5601              		.cfi_endproc
 5602              	.LFE49:
 5603              		.size	xTaskGenericNotifyStateClear, .-xTaskGenericNotifyStateClear
 5604              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 5605              		.align	2
 5606              		.global	ulTaskGenericNotifyValueClear
 5607              		.code	16
 5608              		.thumb_func
 5609              		.type	ulTaskGenericNotifyValueClear, %function
 5610              	ulTaskGenericNotifyValueClear:
 5611              	.LFB50:
5221:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 192


5222:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5223:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5224:..\FreeRTOS\Source/tasks.c **** 
5225:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5226:..\FreeRTOS\Source/tasks.c **** 
5227:..\FreeRTOS\Source/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5228:..\FreeRTOS\Source/tasks.c ****                                             UBaseType_t uxIndexToClear,
5229:..\FreeRTOS\Source/tasks.c ****                                             uint32_t ulBitsToClear )
5230:..\FreeRTOS\Source/tasks.c ****     {
 5612              		.loc 1 5230 0
 5613              		.cfi_startproc
 5614              		@ args = 0, pretend = 0, frame = 24
 5615              		@ frame_needed = 1, uses_anonymous_args = 0
 5616 0000 80B5     		push	{r7, lr}
 5617              		.cfi_def_cfa_offset 8
 5618              		.cfi_offset 7, -8
 5619              		.cfi_offset 14, -4
 5620 0002 86B0     		sub	sp, sp, #24
 5621              		.cfi_def_cfa_offset 32
 5622 0004 00AF     		add	r7, sp, #0
 5623              		.cfi_def_cfa_register 7
 5624 0006 F860     		str	r0, [r7, #12]
 5625 0008 B960     		str	r1, [r7, #8]
 5626 000a 7A60     		str	r2, [r7, #4]
5231:..\FreeRTOS\Source/tasks.c ****         TCB_t * pxTCB;
5232:..\FreeRTOS\Source/tasks.c ****         uint32_t ulReturn;
5233:..\FreeRTOS\Source/tasks.c **** 
5234:..\FreeRTOS\Source/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5235:..\FreeRTOS\Source/tasks.c ****          * its notification state cleared. */
5236:..\FreeRTOS\Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 5627              		.loc 1 5236 0
 5628 000c FB68     		ldr	r3, [r7, #12]
 5629 000e 002B     		cmp	r3, #0
 5630 0010 02D1     		bne	.L458
 5631              		.loc 1 5236 0 is_stmt 0 discriminator 1
 5632 0012 114B     		ldr	r3, .L461
 5633 0014 1B68     		ldr	r3, [r3]
 5634 0016 00E0     		b	.L459
 5635              	.L458:
 5636              		.loc 1 5236 0 discriminator 2
 5637 0018 FB68     		ldr	r3, [r7, #12]
 5638              	.L459:
 5639              		.loc 1 5236 0 discriminator 4
 5640 001a 7B61     		str	r3, [r7, #20]
5237:..\FreeRTOS\Source/tasks.c **** 
5238:..\FreeRTOS\Source/tasks.c ****         taskENTER_CRITICAL();
 5641              		.loc 1 5238 0 is_stmt 1 discriminator 4
 5642 001c FFF7FEFF 		bl	vPortEnterCritical
5239:..\FreeRTOS\Source/tasks.c ****         {
5240:..\FreeRTOS\Source/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5241:..\FreeRTOS\Source/tasks.c ****              * then clear the bit mask. */
5242:..\FreeRTOS\Source/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 5643              		.loc 1 5242 0 discriminator 4
 5644 0020 7B69     		ldr	r3, [r7, #20]
 5645 0022 BA68     		ldr	r2, [r7, #8]
 5646 0024 1632     		adds	r2, r2, #22
 5647 0026 9200     		lsls	r2, r2, #2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 193


 5648 0028 D358     		ldr	r3, [r2, r3]
 5649 002a 3B61     		str	r3, [r7, #16]
5243:..\FreeRTOS\Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 5650              		.loc 1 5243 0 discriminator 4
 5651 002c 7B69     		ldr	r3, [r7, #20]
 5652 002e BA68     		ldr	r2, [r7, #8]
 5653 0030 1632     		adds	r2, r2, #22
 5654 0032 9200     		lsls	r2, r2, #2
 5655 0034 D358     		ldr	r3, [r2, r3]
 5656 0036 7A68     		ldr	r2, [r7, #4]
 5657 0038 D243     		mvns	r2, r2
 5658 003a 1A40     		ands	r2, r3
 5659 003c 1100     		movs	r1, r2
 5660 003e 7B69     		ldr	r3, [r7, #20]
 5661 0040 BA68     		ldr	r2, [r7, #8]
 5662 0042 1632     		adds	r2, r2, #22
 5663 0044 9200     		lsls	r2, r2, #2
 5664 0046 D150     		str	r1, [r2, r3]
5244:..\FreeRTOS\Source/tasks.c ****         }
5245:..\FreeRTOS\Source/tasks.c ****         taskEXIT_CRITICAL();
 5665              		.loc 1 5245 0 discriminator 4
 5666 0048 FFF7FEFF 		bl	vPortExitCritical
5246:..\FreeRTOS\Source/tasks.c **** 
5247:..\FreeRTOS\Source/tasks.c ****         return ulReturn;
 5667              		.loc 1 5247 0 discriminator 4
 5668 004c 3B69     		ldr	r3, [r7, #16]
5248:..\FreeRTOS\Source/tasks.c ****     }
 5669              		.loc 1 5248 0 discriminator 4
 5670 004e 1800     		movs	r0, r3
 5671 0050 BD46     		mov	sp, r7
 5672 0052 06B0     		add	sp, sp, #24
 5673              		@ sp needed
 5674 0054 80BD     		pop	{r7, pc}
 5675              	.L462:
 5676 0056 C046     		.align	2
 5677              	.L461:
 5678 0058 00000000 		.word	pxCurrentTCB
 5679              		.cfi_endproc
 5680              	.LFE50:
 5681              		.size	ulTaskGenericNotifyValueClear, .-ulTaskGenericNotifyValueClear
 5682              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 5683              		.align	2
 5684              		.code	16
 5685              		.thumb_func
 5686              		.type	prvAddCurrentTaskToDelayedList, %function
 5687              	prvAddCurrentTaskToDelayedList:
 5688              	.LFB51:
5249:..\FreeRTOS\Source/tasks.c **** 
5250:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5251:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5252:..\FreeRTOS\Source/tasks.c **** 
5253:..\FreeRTOS\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5254:..\FreeRTOS\Source/tasks.c **** 
5255:..\FreeRTOS\Source/tasks.c ****     uint32_t ulTaskGetIdleRunTimeCounter( void )
5256:..\FreeRTOS\Source/tasks.c ****     {
5257:..\FreeRTOS\Source/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5258:..\FreeRTOS\Source/tasks.c ****     }
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 194


5259:..\FreeRTOS\Source/tasks.c **** 
5260:..\FreeRTOS\Source/tasks.c **** #endif
5261:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5262:..\FreeRTOS\Source/tasks.c **** 
5263:..\FreeRTOS\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5264:..\FreeRTOS\Source/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5265:..\FreeRTOS\Source/tasks.c **** {
 5689              		.loc 1 5265 0
 5690              		.cfi_startproc
 5691              		@ args = 0, pretend = 0, frame = 16
 5692              		@ frame_needed = 1, uses_anonymous_args = 0
 5693 0000 80B5     		push	{r7, lr}
 5694              		.cfi_def_cfa_offset 8
 5695              		.cfi_offset 7, -8
 5696              		.cfi_offset 14, -4
 5697 0002 84B0     		sub	sp, sp, #16
 5698              		.cfi_def_cfa_offset 24
 5699 0004 00AF     		add	r7, sp, #0
 5700              		.cfi_def_cfa_register 7
 5701 0006 7860     		str	r0, [r7, #4]
 5702 0008 3960     		str	r1, [r7]
5266:..\FreeRTOS\Source/tasks.c ****     TickType_t xTimeToWake;
5267:..\FreeRTOS\Source/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 5703              		.loc 1 5267 0
 5704 000a 214B     		ldr	r3, .L468
 5705 000c 1B68     		ldr	r3, [r3]
 5706 000e FB60     		str	r3, [r7, #12]
5268:..\FreeRTOS\Source/tasks.c **** 
5269:..\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5270:..\FreeRTOS\Source/tasks.c ****         {
5271:..\FreeRTOS\Source/tasks.c ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5272:..\FreeRTOS\Source/tasks.c ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5273:..\FreeRTOS\Source/tasks.c ****              * when the task leaves the Blocked state. */
5274:..\FreeRTOS\Source/tasks.c ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
5275:..\FreeRTOS\Source/tasks.c ****         }
5276:..\FreeRTOS\Source/tasks.c ****     #endif
5277:..\FreeRTOS\Source/tasks.c **** 
5278:..\FreeRTOS\Source/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5279:..\FreeRTOS\Source/tasks.c ****      * as the same list item is used for both lists. */
5280:..\FreeRTOS\Source/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5707              		.loc 1 5280 0
 5708 0010 204B     		ldr	r3, .L468+4
 5709 0012 1B68     		ldr	r3, [r3]
 5710 0014 0433     		adds	r3, r3, #4
 5711 0016 1800     		movs	r0, r3
 5712 0018 FFF7FEFF 		bl	uxListRemove
5281:..\FreeRTOS\Source/tasks.c ****     {
5282:..\FreeRTOS\Source/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5283:..\FreeRTOS\Source/tasks.c ****          * check, and the port reset macro can be called directly. */
5284:..\FreeRTOS\Source/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
5285:..\FreeRTOS\Source/tasks.c ****     }
5286:..\FreeRTOS\Source/tasks.c ****     else
5287:..\FreeRTOS\Source/tasks.c ****     {
5288:..\FreeRTOS\Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
5289:..\FreeRTOS\Source/tasks.c ****     }
5290:..\FreeRTOS\Source/tasks.c **** 
5291:..\FreeRTOS\Source/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 195


5292:..\FreeRTOS\Source/tasks.c ****         {
5293:..\FreeRTOS\Source/tasks.c ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 5713              		.loc 1 5293 0
 5714 001c 7B68     		ldr	r3, [r7, #4]
 5715 001e 0133     		adds	r3, r3, #1
 5716 0020 0BD1     		bne	.L464
 5717              		.loc 1 5293 0 is_stmt 0 discriminator 1
 5718 0022 3B68     		ldr	r3, [r7]
 5719 0024 002B     		cmp	r3, #0
 5720 0026 08D0     		beq	.L464
5294:..\FreeRTOS\Source/tasks.c ****             {
5295:..\FreeRTOS\Source/tasks.c ****                 /* Add the task to the suspended task list instead of a delayed task
5296:..\FreeRTOS\Source/tasks.c ****                  * list to ensure it is not woken by a timing event.  It will block
5297:..\FreeRTOS\Source/tasks.c ****                  * indefinitely. */
5298:..\FreeRTOS\Source/tasks.c ****                 vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 5721              		.loc 1 5298 0 is_stmt 1
 5722 0028 1A4B     		ldr	r3, .L468+4
 5723 002a 1B68     		ldr	r3, [r3]
 5724 002c 1A1D     		adds	r2, r3, #4
 5725 002e 1A4B     		ldr	r3, .L468+8
 5726 0030 1100     		movs	r1, r2
 5727 0032 1800     		movs	r0, r3
 5728 0034 FFF7FEFF 		bl	vListInsertEnd
5299:..\FreeRTOS\Source/tasks.c ****             }
5300:..\FreeRTOS\Source/tasks.c ****             else
5301:..\FreeRTOS\Source/tasks.c ****             {
5302:..\FreeRTOS\Source/tasks.c ****                 /* Calculate the time at which the task should be woken if the event
5303:..\FreeRTOS\Source/tasks.c ****                  * does not occur.  This may overflow but this doesn't matter, the
5304:..\FreeRTOS\Source/tasks.c ****                  * kernel will manage it correctly. */
5305:..\FreeRTOS\Source/tasks.c ****                 xTimeToWake = xConstTickCount + xTicksToWait;
5306:..\FreeRTOS\Source/tasks.c **** 
5307:..\FreeRTOS\Source/tasks.c ****                 /* The list item will be inserted in wake time order. */
5308:..\FreeRTOS\Source/tasks.c ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5309:..\FreeRTOS\Source/tasks.c **** 
5310:..\FreeRTOS\Source/tasks.c ****                 if( xTimeToWake < xConstTickCount )
5311:..\FreeRTOS\Source/tasks.c ****                 {
5312:..\FreeRTOS\Source/tasks.c ****                     /* Wake time has overflowed.  Place this item in the overflow
5313:..\FreeRTOS\Source/tasks.c ****                      * list. */
5314:..\FreeRTOS\Source/tasks.c ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5315:..\FreeRTOS\Source/tasks.c ****                 }
5316:..\FreeRTOS\Source/tasks.c ****                 else
5317:..\FreeRTOS\Source/tasks.c ****                 {
5318:..\FreeRTOS\Source/tasks.c ****                     /* The wake time has not overflowed, so the current block list
5319:..\FreeRTOS\Source/tasks.c ****                      * is used. */
5320:..\FreeRTOS\Source/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5321:..\FreeRTOS\Source/tasks.c **** 
5322:..\FreeRTOS\Source/tasks.c ****                     /* If the task entering the blocked state was placed at the
5323:..\FreeRTOS\Source/tasks.c ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5324:..\FreeRTOS\Source/tasks.c ****                      * needs to be updated too. */
5325:..\FreeRTOS\Source/tasks.c ****                     if( xTimeToWake < xNextTaskUnblockTime )
5326:..\FreeRTOS\Source/tasks.c ****                     {
5327:..\FreeRTOS\Source/tasks.c ****                         xNextTaskUnblockTime = xTimeToWake;
5328:..\FreeRTOS\Source/tasks.c ****                     }
5329:..\FreeRTOS\Source/tasks.c ****                     else
5330:..\FreeRTOS\Source/tasks.c ****                     {
5331:..\FreeRTOS\Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5332:..\FreeRTOS\Source/tasks.c ****                     }
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 196


5333:..\FreeRTOS\Source/tasks.c ****                 }
5334:..\FreeRTOS\Source/tasks.c ****             }
5335:..\FreeRTOS\Source/tasks.c ****         }
5336:..\FreeRTOS\Source/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5337:..\FreeRTOS\Source/tasks.c ****         {
5338:..\FreeRTOS\Source/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5339:..\FreeRTOS\Source/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the kernel
5340:..\FreeRTOS\Source/tasks.c ****              * will manage it correctly. */
5341:..\FreeRTOS\Source/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
5342:..\FreeRTOS\Source/tasks.c **** 
5343:..\FreeRTOS\Source/tasks.c ****             /* The list item will be inserted in wake time order. */
5344:..\FreeRTOS\Source/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5345:..\FreeRTOS\Source/tasks.c **** 
5346:..\FreeRTOS\Source/tasks.c ****             if( xTimeToWake < xConstTickCount )
5347:..\FreeRTOS\Source/tasks.c ****             {
5348:..\FreeRTOS\Source/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow list. */
5349:..\FreeRTOS\Source/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5350:..\FreeRTOS\Source/tasks.c ****             }
5351:..\FreeRTOS\Source/tasks.c ****             else
5352:..\FreeRTOS\Source/tasks.c ****             {
5353:..\FreeRTOS\Source/tasks.c ****                 /* The wake time has not overflowed, so the current block list is used. */
5354:..\FreeRTOS\Source/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5355:..\FreeRTOS\Source/tasks.c **** 
5356:..\FreeRTOS\Source/tasks.c ****                 /* If the task entering the blocked state was placed at the head of the
5357:..\FreeRTOS\Source/tasks.c ****                  * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5358:..\FreeRTOS\Source/tasks.c ****                  * too. */
5359:..\FreeRTOS\Source/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5360:..\FreeRTOS\Source/tasks.c ****                 {
5361:..\FreeRTOS\Source/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5362:..\FreeRTOS\Source/tasks.c ****                 }
5363:..\FreeRTOS\Source/tasks.c ****                 else
5364:..\FreeRTOS\Source/tasks.c ****                 {
5365:..\FreeRTOS\Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5366:..\FreeRTOS\Source/tasks.c ****                 }
5367:..\FreeRTOS\Source/tasks.c ****             }
5368:..\FreeRTOS\Source/tasks.c **** 
5369:..\FreeRTOS\Source/tasks.c ****             /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5370:..\FreeRTOS\Source/tasks.c ****             ( void ) xCanBlockIndefinitely;
5371:..\FreeRTOS\Source/tasks.c ****         }
5372:..\FreeRTOS\Source/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5373:..\FreeRTOS\Source/tasks.c **** }
 5729              		.loc 1 5373 0
 5730 0038 26E0     		b	.L467
 5731              	.L464:
5305:..\FreeRTOS\Source/tasks.c **** 
 5732              		.loc 1 5305 0
 5733 003a FA68     		ldr	r2, [r7, #12]
 5734 003c 7B68     		ldr	r3, [r7, #4]
 5735 003e D318     		adds	r3, r2, r3
 5736 0040 BB60     		str	r3, [r7, #8]
5308:..\FreeRTOS\Source/tasks.c **** 
 5737              		.loc 1 5308 0
 5738 0042 144B     		ldr	r3, .L468+4
 5739 0044 1B68     		ldr	r3, [r3]
 5740 0046 BA68     		ldr	r2, [r7, #8]
 5741 0048 5A60     		str	r2, [r3, #4]
5310:..\FreeRTOS\Source/tasks.c ****                 {
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 197


 5742              		.loc 1 5310 0
 5743 004a BA68     		ldr	r2, [r7, #8]
 5744 004c FB68     		ldr	r3, [r7, #12]
 5745 004e 9A42     		cmp	r2, r3
 5746 0050 09D2     		bcs	.L466
5314:..\FreeRTOS\Source/tasks.c ****                 }
 5747              		.loc 1 5314 0
 5748 0052 124B     		ldr	r3, .L468+12
 5749 0054 1A68     		ldr	r2, [r3]
 5750 0056 0F4B     		ldr	r3, .L468+4
 5751 0058 1B68     		ldr	r3, [r3]
 5752 005a 0433     		adds	r3, r3, #4
 5753 005c 1900     		movs	r1, r3
 5754 005e 1000     		movs	r0, r2
 5755 0060 FFF7FEFF 		bl	vListInsert
 5756              		.loc 1 5373 0
 5757 0064 10E0     		b	.L467
 5758              	.L466:
5320:..\FreeRTOS\Source/tasks.c **** 
 5759              		.loc 1 5320 0
 5760 0066 0E4B     		ldr	r3, .L468+16
 5761 0068 1A68     		ldr	r2, [r3]
 5762 006a 0A4B     		ldr	r3, .L468+4
 5763 006c 1B68     		ldr	r3, [r3]
 5764 006e 0433     		adds	r3, r3, #4
 5765 0070 1900     		movs	r1, r3
 5766 0072 1000     		movs	r0, r2
 5767 0074 FFF7FEFF 		bl	vListInsert
5325:..\FreeRTOS\Source/tasks.c ****                     {
 5768              		.loc 1 5325 0
 5769 0078 0A4B     		ldr	r3, .L468+20
 5770 007a 1B68     		ldr	r3, [r3]
 5771 007c BA68     		ldr	r2, [r7, #8]
 5772 007e 9A42     		cmp	r2, r3
 5773 0080 02D2     		bcs	.L467
5327:..\FreeRTOS\Source/tasks.c ****                     }
 5774              		.loc 1 5327 0
 5775 0082 084B     		ldr	r3, .L468+20
 5776 0084 BA68     		ldr	r2, [r7, #8]
 5777 0086 1A60     		str	r2, [r3]
 5778              	.L467:
 5779              		.loc 1 5373 0
 5780 0088 C046     		nop
 5781 008a BD46     		mov	sp, r7
 5782 008c 04B0     		add	sp, sp, #16
 5783              		@ sp needed
 5784 008e 80BD     		pop	{r7, pc}
 5785              	.L469:
 5786              		.align	2
 5787              	.L468:
 5788 0090 DC000000 		.word	xTickCount
 5789 0094 00000000 		.word	pxCurrentTCB
 5790 0098 C4000000 		.word	xSuspendedTaskList
 5791 009c 94000000 		.word	pxOverflowDelayedTaskList
 5792 00a0 90000000 		.word	pxDelayedTaskList
 5793 00a4 F8000000 		.word	xNextTaskUnblockTime
 5794              		.cfi_endproc
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 198


 5795              	.LFE51:
 5796              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 5797              		.text
 5798              	.Letext0:
 5799              		.file 2 "d:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5800              		.file 3 "d:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5801              		.file 4 "d:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5802              		.file 5 "..\\FreeRTOS\\Source\\include/projdefs.h"
 5803              		.file 6 "..\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM0/portmacro.h"
 5804              		.file 7 "..\\FreeRTOS\\Source\\include/FreeRTOS.h"
 5805              		.file 8 "..\\FreeRTOS\\Source\\include/list.h"
 5806              		.file 9 "..\\FreeRTOS\\Source\\include/task.h"
 5807              		.file 10 "./FreeRTOSConfig.h"
 5808              		.section	.debug_info,"",%progbits
 5809              	.Ldebug_info0:
 5810 0000 A3160000 		.4byte	0x16a3
 5811 0004 0400     		.2byte	0x4
 5812 0006 00000000 		.4byte	.Ldebug_abbrev0
 5813 000a 04       		.byte	0x4
 5814 000b 01       		.uleb128 0x1
 5815 000c FF010000 		.4byte	.LASF224
 5816 0010 0C       		.byte	0xc
 5817 0011 8F040000 		.4byte	.LASF225
 5818 0015 8B010000 		.4byte	.LASF226
 5819 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5820 001d 00000000 		.4byte	0
 5821 0021 00000000 		.4byte	.Ldebug_line0
 5822 0025 02       		.uleb128 0x2
 5823 0026 1E050000 		.4byte	.LASF4
 5824 002a 02       		.byte	0x2
 5825 002b D8       		.byte	0xd8
 5826 002c 30000000 		.4byte	0x30
 5827 0030 03       		.uleb128 0x3
 5828 0031 04       		.byte	0x4
 5829 0032 07       		.byte	0x7
 5830 0033 EC000000 		.4byte	.LASF0
 5831 0037 04       		.uleb128 0x4
 5832 0038 04       		.byte	0x4
 5833 0039 05       		.byte	0x5
 5834 003a 696E7400 		.ascii	"int\000"
 5835 003e 03       		.uleb128 0x3
 5836 003f 08       		.byte	0x8
 5837 0040 05       		.byte	0x5
 5838 0041 15080000 		.4byte	.LASF1
 5839 0045 03       		.uleb128 0x3
 5840 0046 08       		.byte	0x8
 5841 0047 04       		.byte	0x4
 5842 0048 D7090000 		.4byte	.LASF2
 5843 004c 03       		.uleb128 0x3
 5844 004d 01       		.byte	0x1
 5845 004e 06       		.byte	0x6
 5846 004f D00D0000 		.4byte	.LASF3
 5847 0053 02       		.uleb128 0x2
 5848 0054 430B0000 		.4byte	.LASF5
 5849 0058 03       		.byte	0x3
 5850 0059 1D       		.byte	0x1d
 5851 005a 5E000000 		.4byte	0x5e
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 199


 5852 005e 03       		.uleb128 0x3
 5853 005f 01       		.byte	0x1
 5854 0060 08       		.byte	0x8
 5855 0061 530C0000 		.4byte	.LASF6
 5856 0065 03       		.uleb128 0x3
 5857 0066 02       		.byte	0x2
 5858 0067 05       		.byte	0x5
 5859 0068 5F0A0000 		.4byte	.LASF7
 5860 006c 02       		.uleb128 0x2
 5861 006d AA040000 		.4byte	.LASF8
 5862 0071 03       		.byte	0x3
 5863 0072 2B       		.byte	0x2b
 5864 0073 77000000 		.4byte	0x77
 5865 0077 03       		.uleb128 0x3
 5866 0078 02       		.byte	0x2
 5867 0079 07       		.byte	0x7
 5868 007a DC0D0000 		.4byte	.LASF9
 5869 007e 03       		.uleb128 0x3
 5870 007f 04       		.byte	0x4
 5871 0080 05       		.byte	0x5
 5872 0081 810A0000 		.4byte	.LASF10
 5873 0085 02       		.uleb128 0x2
 5874 0086 800C0000 		.4byte	.LASF11
 5875 008a 03       		.byte	0x3
 5876 008b 41       		.byte	0x41
 5877 008c 90000000 		.4byte	0x90
 5878 0090 03       		.uleb128 0x3
 5879 0091 04       		.byte	0x4
 5880 0092 07       		.byte	0x7
 5881 0093 A70B0000 		.4byte	.LASF12
 5882 0097 03       		.uleb128 0x3
 5883 0098 08       		.byte	0x8
 5884 0099 07       		.byte	0x7
 5885 009a 17040000 		.4byte	.LASF13
 5886 009e 03       		.uleb128 0x3
 5887 009f 04       		.byte	0x4
 5888 00a0 07       		.byte	0x7
 5889 00a1 8D0B0000 		.4byte	.LASF14
 5890 00a5 05       		.uleb128 0x5
 5891 00a6 04       		.byte	0x4
 5892 00a7 06       		.uleb128 0x6
 5893 00a8 04       		.byte	0x4
 5894 00a9 AD000000 		.4byte	0xad
 5895 00ad 03       		.uleb128 0x3
 5896 00ae 01       		.byte	0x1
 5897 00af 08       		.byte	0x8
 5898 00b0 A8060000 		.4byte	.LASF15
 5899 00b4 06       		.uleb128 0x6
 5900 00b5 04       		.byte	0x4
 5901 00b6 BA000000 		.4byte	0xba
 5902 00ba 07       		.uleb128 0x7
 5903 00bb AD000000 		.4byte	0xad
 5904 00bf 02       		.uleb128 0x2
 5905 00c0 AD070000 		.4byte	.LASF16
 5906 00c4 04       		.byte	0x4
 5907 00c5 18       		.byte	0x18
 5908 00c6 53000000 		.4byte	0x53
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 200


 5909 00ca 02       		.uleb128 0x2
 5910 00cb 080A0000 		.4byte	.LASF17
 5911 00cf 04       		.byte	0x4
 5912 00d0 24       		.byte	0x24
 5913 00d1 6C000000 		.4byte	0x6c
 5914 00d5 02       		.uleb128 0x2
 5915 00d6 8C030000 		.4byte	.LASF18
 5916 00da 04       		.byte	0x4
 5917 00db 30       		.byte	0x30
 5918 00dc 85000000 		.4byte	0x85
 5919 00e0 02       		.uleb128 0x2
 5920 00e1 B3080000 		.4byte	.LASF19
 5921 00e5 05       		.byte	0x5
 5922 00e6 22       		.byte	0x22
 5923 00e7 EB000000 		.4byte	0xeb
 5924 00eb 06       		.uleb128 0x6
 5925 00ec 04       		.byte	0x4
 5926 00ed F1000000 		.4byte	0xf1
 5927 00f1 08       		.uleb128 0x8
 5928 00f2 FC000000 		.4byte	0xfc
 5929 00f6 09       		.uleb128 0x9
 5930 00f7 A5000000 		.4byte	0xa5
 5931 00fb 00       		.byte	0
 5932 00fc 02       		.uleb128 0x2
 5933 00fd 1F010000 		.4byte	.LASF20
 5934 0101 06       		.byte	0x6
 5935 0102 37       		.byte	0x37
 5936 0103 D5000000 		.4byte	0xd5
 5937 0107 02       		.uleb128 0x2
 5938 0108 6E080000 		.4byte	.LASF21
 5939 010c 06       		.byte	0x6
 5940 010d 38       		.byte	0x38
 5941 010e 7E000000 		.4byte	0x7e
 5942 0112 02       		.uleb128 0x2
 5943 0113 D2060000 		.4byte	.LASF22
 5944 0117 06       		.byte	0x6
 5945 0118 39       		.byte	0x39
 5946 0119 90000000 		.4byte	0x90
 5947 011d 02       		.uleb128 0x2
 5948 011e A3090000 		.4byte	.LASF23
 5949 0122 06       		.byte	0x6
 5950 0123 3F       		.byte	0x3f
 5951 0124 D5000000 		.4byte	0xd5
 5952 0128 0A       		.uleb128 0xa
 5953 0129 5E0B0000 		.4byte	.LASF27
 5954 012d 14       		.byte	0x14
 5955 012e 07       		.byte	0x7
 5956 012f 5904     		.2byte	0x459
 5957 0131 50010000 		.4byte	0x150
 5958 0135 0B       		.uleb128 0xb
 5959 0136 290D0000 		.4byte	.LASF24
 5960 013a 07       		.byte	0x7
 5961 013b 5E04     		.2byte	0x45e
 5962 013d 1D010000 		.4byte	0x11d
 5963 0141 00       		.byte	0
 5964 0142 0B       		.uleb128 0xb
 5965 0143 B0050000 		.4byte	.LASF25
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 201


 5966 0147 07       		.byte	0x7
 5967 0148 5F04     		.2byte	0x45f
 5968 014a 50010000 		.4byte	0x150
 5969 014e 04       		.byte	0x4
 5970 014f 00       		.byte	0
 5971 0150 0C       		.uleb128 0xc
 5972 0151 A5000000 		.4byte	0xa5
 5973 0155 60010000 		.4byte	0x160
 5974 0159 0D       		.uleb128 0xd
 5975 015a 9E000000 		.4byte	0x9e
 5976 015e 03       		.byte	0x3
 5977 015f 00       		.byte	0
 5978 0160 0E       		.uleb128 0xe
 5979 0161 40050000 		.4byte	.LASF26
 5980 0165 07       		.byte	0x7
 5981 0166 6404     		.2byte	0x464
 5982 0168 28010000 		.4byte	0x128
 5983 016c 0A       		.uleb128 0xa
 5984 016d 370B0000 		.4byte	.LASF28
 5985 0171 68       		.byte	0x68
 5986 0172 07       		.byte	0x7
 5987 0173 8C04     		.2byte	0x48c
 5988 0175 EF010000 		.4byte	0x1ef
 5989 0179 0B       		.uleb128 0xb
 5990 017a 02080000 		.4byte	.LASF29
 5991 017e 07       		.byte	0x7
 5992 017f 8E04     		.2byte	0x48e
 5993 0181 A5000000 		.4byte	0xa5
 5994 0185 00       		.byte	0
 5995 0186 0B       		.uleb128 0xb
 5996 0187 310D0000 		.4byte	.LASF30
 5997 018b 07       		.byte	0x7
 5998 018c 9204     		.2byte	0x492
 5999 018e EF010000 		.4byte	0x1ef
 6000 0192 04       		.byte	0x4
 6001 0193 0B       		.uleb128 0xb
 6002 0194 D3050000 		.4byte	.LASF31
 6003 0198 07       		.byte	0x7
 6004 0199 9304     		.2byte	0x493
 6005 019b 12010000 		.4byte	0x112
 6006 019f 2C       		.byte	0x2c
 6007 01a0 0B       		.uleb128 0xb
 6008 01a1 23080000 		.4byte	.LASF32
 6009 01a5 07       		.byte	0x7
 6010 01a6 9404     		.2byte	0x494
 6011 01a8 A5000000 		.4byte	0xa5
 6012 01ac 30       		.byte	0x30
 6013 01ad 0B       		.uleb128 0xb
 6014 01ae 1D0A0000 		.4byte	.LASF33
 6015 01b2 07       		.byte	0x7
 6016 01b3 9504     		.2byte	0x495
 6017 01b5 FF010000 		.4byte	0x1ff
 6018 01b9 34       		.byte	0x34
 6019 01ba 0B       		.uleb128 0xb
 6020 01bb 050D0000 		.4byte	.LASF34
 6021 01bf 07       		.byte	0x7
 6022 01c0 A604     		.2byte	0x4a6
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 202


 6023 01c2 0F020000 		.4byte	0x20f
 6024 01c6 44       		.byte	0x44
 6025 01c7 0B       		.uleb128 0xb
 6026 01c8 540B0000 		.4byte	.LASF35
 6027 01cc 07       		.byte	0x7
 6028 01cd AF04     		.2byte	0x4af
 6029 01cf 1F020000 		.4byte	0x21f
 6030 01d3 58       		.byte	0x58
 6031 01d4 0B       		.uleb128 0xb
 6032 01d5 0B080000 		.4byte	.LASF36
 6033 01d9 07       		.byte	0x7
 6034 01da B004     		.2byte	0x4b0
 6035 01dc 2F020000 		.4byte	0x22f
 6036 01e0 64       		.byte	0x64
 6037 01e1 0B       		.uleb128 0xb
 6038 01e2 F5010000 		.4byte	.LASF37
 6039 01e6 07       		.byte	0x7
 6040 01e7 B304     		.2byte	0x4b3
 6041 01e9 BF000000 		.4byte	0xbf
 6042 01ed 67       		.byte	0x67
 6043 01ee 00       		.byte	0
 6044 01ef 0C       		.uleb128 0xc
 6045 01f0 60010000 		.4byte	0x160
 6046 01f4 FF010000 		.4byte	0x1ff
 6047 01f8 0D       		.uleb128 0xd
 6048 01f9 9E000000 		.4byte	0x9e
 6049 01fd 01       		.byte	0x1
 6050 01fe 00       		.byte	0
 6051 01ff 0C       		.uleb128 0xc
 6052 0200 BF000000 		.4byte	0xbf
 6053 0204 0F020000 		.4byte	0x20f
 6054 0208 0D       		.uleb128 0xd
 6055 0209 9E000000 		.4byte	0x9e
 6056 020d 0F       		.byte	0xf
 6057 020e 00       		.byte	0
 6058 020f 0C       		.uleb128 0xc
 6059 0210 A5000000 		.4byte	0xa5
 6060 0214 1F020000 		.4byte	0x21f
 6061 0218 0D       		.uleb128 0xd
 6062 0219 9E000000 		.4byte	0x9e
 6063 021d 04       		.byte	0x4
 6064 021e 00       		.byte	0
 6065 021f 0C       		.uleb128 0xc
 6066 0220 D5000000 		.4byte	0xd5
 6067 0224 2F020000 		.4byte	0x22f
 6068 0228 0D       		.uleb128 0xd
 6069 0229 9E000000 		.4byte	0x9e
 6070 022d 02       		.byte	0x2
 6071 022e 00       		.byte	0
 6072 022f 0C       		.uleb128 0xc
 6073 0230 BF000000 		.4byte	0xbf
 6074 0234 3F020000 		.4byte	0x23f
 6075 0238 0D       		.uleb128 0xd
 6076 0239 9E000000 		.4byte	0x9e
 6077 023d 02       		.byte	0x2
 6078 023e 00       		.byte	0
 6079 023f 0E       		.uleb128 0xe
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 203


 6080 0240 00000000 		.4byte	.LASF38
 6081 0244 07       		.byte	0x7
 6082 0245 BC04     		.2byte	0x4bc
 6083 0247 6C010000 		.4byte	0x16c
 6084 024b 0F       		.uleb128 0xf
 6085 024c 6E010000 		.4byte	.LASF39
 6086 0250 14       		.byte	0x14
 6087 0251 08       		.byte	0x8
 6088 0252 8E       		.byte	0x8e
 6089 0253 94020000 		.4byte	0x294
 6090 0257 10       		.uleb128 0x10
 6091 0258 760A0000 		.4byte	.LASF40
 6092 025c 08       		.byte	0x8
 6093 025d 91       		.byte	0x91
 6094 025e 1D010000 		.4byte	0x11d
 6095 0262 00       		.byte	0
 6096 0263 10       		.uleb128 0x10
 6097 0264 C2080000 		.4byte	.LASF41
 6098 0268 08       		.byte	0x8
 6099 0269 92       		.byte	0x92
 6100 026a 94020000 		.4byte	0x294
 6101 026e 04       		.byte	0x4
 6102 026f 10       		.uleb128 0x10
 6103 0270 84040000 		.4byte	.LASF42
 6104 0274 08       		.byte	0x8
 6105 0275 93       		.byte	0x93
 6106 0276 94020000 		.4byte	0x294
 6107 027a 08       		.byte	0x8
 6108 027b 10       		.uleb128 0x10
 6109 027c FD0C0000 		.4byte	.LASF43
 6110 0280 08       		.byte	0x8
 6111 0281 94       		.byte	0x94
 6112 0282 A5000000 		.4byte	0xa5
 6113 0286 0C       		.byte	0xc
 6114 0287 10       		.uleb128 0x10
 6115 0288 1B0C0000 		.4byte	.LASF44
 6116 028c 08       		.byte	0x8
 6117 028d 95       		.byte	0x95
 6118 028e CB020000 		.4byte	0x2cb
 6119 0292 10       		.byte	0x10
 6120 0293 00       		.byte	0
 6121 0294 06       		.uleb128 0x6
 6122 0295 04       		.byte	0x4
 6123 0296 4B020000 		.4byte	0x24b
 6124 029a 0F       		.uleb128 0xf
 6125 029b 5C050000 		.4byte	.LASF45
 6126 029f 14       		.byte	0x14
 6127 02a0 08       		.byte	0x8
 6128 02a1 A6       		.byte	0xa6
 6129 02a2 CB020000 		.4byte	0x2cb
 6130 02a6 10       		.uleb128 0x10
 6131 02a7 18000000 		.4byte	.LASF46
 6132 02ab 08       		.byte	0x8
 6133 02ac A9       		.byte	0xa9
 6134 02ad 18030000 		.4byte	0x318
 6135 02b1 00       		.byte	0
 6136 02b2 10       		.uleb128 0x10
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 204


 6137 02b3 17010000 		.4byte	.LASF47
 6138 02b7 08       		.byte	0x8
 6139 02b8 AA       		.byte	0xaa
 6140 02b9 1D030000 		.4byte	0x31d
 6141 02bd 04       		.byte	0x4
 6142 02be 10       		.uleb128 0x10
 6143 02bf 38070000 		.4byte	.LASF48
 6144 02c3 08       		.byte	0x8
 6145 02c4 AB       		.byte	0xab
 6146 02c5 0D030000 		.4byte	0x30d
 6147 02c9 08       		.byte	0x8
 6148 02ca 00       		.byte	0
 6149 02cb 06       		.uleb128 0x6
 6150 02cc 04       		.byte	0x4
 6151 02cd 9A020000 		.4byte	0x29a
 6152 02d1 02       		.uleb128 0x2
 6153 02d2 AD060000 		.4byte	.LASF49
 6154 02d6 08       		.byte	0x8
 6155 02d7 98       		.byte	0x98
 6156 02d8 4B020000 		.4byte	0x24b
 6157 02dc 0F       		.uleb128 0xf
 6158 02dd 30050000 		.4byte	.LASF50
 6159 02e1 0C       		.byte	0xc
 6160 02e2 08       		.byte	0x8
 6161 02e3 9A       		.byte	0x9a
 6162 02e4 0D030000 		.4byte	0x30d
 6163 02e8 10       		.uleb128 0x10
 6164 02e9 760A0000 		.4byte	.LASF40
 6165 02ed 08       		.byte	0x8
 6166 02ee 9D       		.byte	0x9d
 6167 02ef 1D010000 		.4byte	0x11d
 6168 02f3 00       		.byte	0
 6169 02f4 10       		.uleb128 0x10
 6170 02f5 C2080000 		.4byte	.LASF41
 6171 02f9 08       		.byte	0x8
 6172 02fa 9E       		.byte	0x9e
 6173 02fb 94020000 		.4byte	0x294
 6174 02ff 04       		.byte	0x4
 6175 0300 10       		.uleb128 0x10
 6176 0301 84040000 		.4byte	.LASF42
 6177 0305 08       		.byte	0x8
 6178 0306 9F       		.byte	0x9f
 6179 0307 94020000 		.4byte	0x294
 6180 030b 08       		.byte	0x8
 6181 030c 00       		.byte	0
 6182 030d 02       		.uleb128 0x2
 6183 030e 79070000 		.4byte	.LASF51
 6184 0312 08       		.byte	0x8
 6185 0313 A1       		.byte	0xa1
 6186 0314 DC020000 		.4byte	0x2dc
 6187 0318 11       		.uleb128 0x11
 6188 0319 12010000 		.4byte	0x112
 6189 031d 06       		.uleb128 0x6
 6190 031e 04       		.byte	0x4
 6191 031f D1020000 		.4byte	0x2d1
 6192 0323 02       		.uleb128 0x2
 6193 0324 8F090000 		.4byte	.LASF52
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 205


 6194 0328 08       		.byte	0x8
 6195 0329 AD       		.byte	0xad
 6196 032a 9A020000 		.4byte	0x29a
 6197 032e 02       		.uleb128 0x2
 6198 032f 4F090000 		.4byte	.LASF53
 6199 0333 09       		.byte	0x9
 6200 0334 4E       		.byte	0x4e
 6201 0335 39030000 		.4byte	0x339
 6202 0339 06       		.uleb128 0x6
 6203 033a 04       		.byte	0x4
 6204 033b 3F030000 		.4byte	0x33f
 6205 033f 0F       		.uleb128 0xf
 6206 0340 3F000000 		.4byte	.LASF54
 6207 0344 68       		.byte	0x68
 6208 0345 01       		.byte	0x1
 6209 0346 FD       		.byte	0xfd
 6210 0347 CD030000 		.4byte	0x3cd
 6211 034b 10       		.uleb128 0x10
 6212 034c 700E0000 		.4byte	.LASF55
 6213 0350 01       		.byte	0x1
 6214 0351 FF       		.byte	0xff
 6215 0352 75040000 		.4byte	0x475
 6216 0356 00       		.byte	0
 6217 0357 0B       		.uleb128 0xb
 6218 0358 FB0D0000 		.4byte	.LASF56
 6219 035c 01       		.byte	0x1
 6220 035d 0501     		.2byte	0x105
 6221 035f D1020000 		.4byte	0x2d1
 6222 0363 04       		.byte	0x4
 6223 0364 0B       		.uleb128 0xb
 6224 0365 B50C0000 		.4byte	.LASF57
 6225 0369 01       		.byte	0x1
 6226 036a 0601     		.2byte	0x106
 6227 036c D1020000 		.4byte	0x2d1
 6228 0370 18       		.byte	0x18
 6229 0371 0B       		.uleb128 0xb
 6230 0372 28000000 		.4byte	.LASF58
 6231 0376 01       		.byte	0x1
 6232 0377 0701     		.2byte	0x107
 6233 0379 12010000 		.4byte	0x112
 6234 037d 2C       		.byte	0x2c
 6235 037e 0B       		.uleb128 0xb
 6236 037f E20A0000 		.4byte	.LASF59
 6237 0383 01       		.byte	0x1
 6238 0384 0801     		.2byte	0x108
 6239 0386 6F040000 		.4byte	0x46f
 6240 038a 30       		.byte	0x30
 6241 038b 0B       		.uleb128 0xb
 6242 038c 0D000000 		.4byte	.LASF60
 6243 0390 01       		.byte	0x1
 6244 0391 0901     		.2byte	0x109
 6245 0393 80040000 		.4byte	0x480
 6246 0397 34       		.byte	0x34
 6247 0398 0B       		.uleb128 0xb
 6248 0399 F3040000 		.4byte	.LASF61
 6249 039d 01       		.byte	0x1
 6250 039e 2201     		.2byte	0x122
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 206


 6251 03a0 0F020000 		.4byte	0x20f
 6252 03a4 44       		.byte	0x44
 6253 03a5 0B       		.uleb128 0xb
 6254 03a6 1A060000 		.4byte	.LASF62
 6255 03aa 01       		.byte	0x1
 6256 03ab 3901     		.2byte	0x139
 6257 03ad A5040000 		.4byte	0x4a5
 6258 03b1 58       		.byte	0x58
 6259 03b2 0B       		.uleb128 0xb
 6260 03b3 95030000 		.4byte	.LASF63
 6261 03b7 01       		.byte	0x1
 6262 03b8 3A01     		.2byte	0x13a
 6263 03ba BF040000 		.4byte	0x4bf
 6264 03be 64       		.byte	0x64
 6265 03bf 0B       		.uleb128 0xb
 6266 03c0 E3050000 		.4byte	.LASF64
 6267 03c4 01       		.byte	0x1
 6268 03c5 4001     		.2byte	0x140
 6269 03c7 BF000000 		.4byte	0xbf
 6270 03cb 67       		.byte	0x67
 6271 03cc 00       		.byte	0
 6272 03cd 12       		.uleb128 0x12
 6273 03ce 01       		.byte	0x1
 6274 03cf 5E000000 		.4byte	0x5e
 6275 03d3 09       		.byte	0x9
 6276 03d4 63       		.byte	0x63
 6277 03d5 F8030000 		.4byte	0x3f8
 6278 03d9 13       		.uleb128 0x13
 6279 03da CF000000 		.4byte	.LASF65
 6280 03de 00       		.byte	0
 6281 03df 13       		.uleb128 0x13
 6282 03e0 CE090000 		.4byte	.LASF66
 6283 03e4 01       		.byte	0x1
 6284 03e5 13       		.uleb128 0x13
 6285 03e6 25050000 		.4byte	.LASF67
 6286 03ea 02       		.byte	0x2
 6287 03eb 13       		.uleb128 0x13
 6288 03ec 00040000 		.4byte	.LASF68
 6289 03f0 03       		.byte	0x3
 6290 03f1 13       		.uleb128 0x13
 6291 03f2 B8060000 		.4byte	.LASF69
 6292 03f6 04       		.byte	0x4
 6293 03f7 00       		.byte	0
 6294 03f8 02       		.uleb128 0x2
 6295 03f9 10050000 		.4byte	.LASF70
 6296 03fd 09       		.byte	0x9
 6297 03fe 69       		.byte	0x69
 6298 03ff CD030000 		.4byte	0x3cd
 6299 0403 0F       		.uleb128 0xf
 6300 0404 2B010000 		.4byte	.LASF71
 6301 0408 08       		.byte	0x8
 6302 0409 09       		.byte	0x9
 6303 040a 6E       		.byte	0x6e
 6304 040b 28040000 		.4byte	0x428
 6305 040f 10       		.uleb128 0x10
 6306 0410 12030000 		.4byte	.LASF72
 6307 0414 09       		.byte	0x9
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 207


 6308 0415 70       		.byte	0x70
 6309 0416 07010000 		.4byte	0x107
 6310 041a 00       		.byte	0
 6311 041b 10       		.uleb128 0x10
 6312 041c 95080000 		.4byte	.LASF73
 6313 0420 09       		.byte	0x9
 6314 0421 71       		.byte	0x71
 6315 0422 1D010000 		.4byte	0x11d
 6316 0426 04       		.byte	0x4
 6317 0427 00       		.byte	0
 6318 0428 02       		.uleb128 0x2
 6319 0429 1B090000 		.4byte	.LASF74
 6320 042d 09       		.byte	0x9
 6321 042e 72       		.byte	0x72
 6322 042f 03040000 		.4byte	0x403
 6323 0433 0F       		.uleb128 0xf
 6324 0434 F9090000 		.4byte	.LASF75
 6325 0438 0C       		.byte	0xc
 6326 0439 09       		.byte	0x9
 6327 043a 77       		.byte	0x77
 6328 043b 64040000 		.4byte	0x464
 6329 043f 10       		.uleb128 0x10
 6330 0440 02070000 		.4byte	.LASF76
 6331 0444 09       		.byte	0x9
 6332 0445 79       		.byte	0x79
 6333 0446 A5000000 		.4byte	0xa5
 6334 044a 00       		.byte	0
 6335 044b 10       		.uleb128 0x10
 6336 044c 5E080000 		.4byte	.LASF77
 6337 0450 09       		.byte	0x9
 6338 0451 7A       		.byte	0x7a
 6339 0452 D5000000 		.4byte	0xd5
 6340 0456 04       		.byte	0x4
 6341 0457 10       		.uleb128 0x10
 6342 0458 33030000 		.4byte	.LASF78
 6343 045c 09       		.byte	0x9
 6344 045d 7B       		.byte	0x7b
 6345 045e D5000000 		.4byte	0xd5
 6346 0462 08       		.byte	0x8
 6347 0463 00       		.byte	0
 6348 0464 02       		.uleb128 0x2
 6349 0465 DE070000 		.4byte	.LASF79
 6350 0469 09       		.byte	0x9
 6351 046a 7C       		.byte	0x7c
 6352 046b 33040000 		.4byte	0x433
 6353 046f 06       		.uleb128 0x6
 6354 0470 04       		.byte	0x4
 6355 0471 FC000000 		.4byte	0xfc
 6356 0475 06       		.uleb128 0x6
 6357 0476 04       		.byte	0x4
 6358 0477 7B040000 		.4byte	0x47b
 6359 047b 11       		.uleb128 0x11
 6360 047c FC000000 		.4byte	0xfc
 6361 0480 0C       		.uleb128 0xc
 6362 0481 AD000000 		.4byte	0xad
 6363 0485 90040000 		.4byte	0x490
 6364 0489 0D       		.uleb128 0xd
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 208


 6365 048a 9E000000 		.4byte	0x9e
 6366 048e 0F       		.byte	0xf
 6367 048f 00       		.byte	0
 6368 0490 0C       		.uleb128 0xc
 6369 0491 A0040000 		.4byte	0x4a0
 6370 0495 A0040000 		.4byte	0x4a0
 6371 0499 0D       		.uleb128 0xd
 6372 049a 9E000000 		.4byte	0x9e
 6373 049e 02       		.byte	0x2
 6374 049f 00       		.byte	0
 6375 04a0 11       		.uleb128 0x11
 6376 04a1 D5000000 		.4byte	0xd5
 6377 04a5 11       		.uleb128 0x11
 6378 04a6 90040000 		.4byte	0x490
 6379 04aa 0C       		.uleb128 0xc
 6380 04ab BA040000 		.4byte	0x4ba
 6381 04af BA040000 		.4byte	0x4ba
 6382 04b3 0D       		.uleb128 0xd
 6383 04b4 9E000000 		.4byte	0x9e
 6384 04b8 02       		.byte	0x2
 6385 04b9 00       		.byte	0
 6386 04ba 11       		.uleb128 0x11
 6387 04bb BF000000 		.4byte	0xbf
 6388 04bf 11       		.uleb128 0x11
 6389 04c0 AA040000 		.4byte	0x4aa
 6390 04c4 0E       		.uleb128 0xe
 6391 04c5 6E030000 		.4byte	.LASF80
 6392 04c9 01       		.byte	0x1
 6393 04ca 4A01     		.2byte	0x14a
 6394 04cc 3F030000 		.4byte	0x33f
 6395 04d0 0E       		.uleb128 0xe
 6396 04d1 DA0C0000 		.4byte	.LASF81
 6397 04d5 01       		.byte	0x1
 6398 04d6 4E01     		.2byte	0x14e
 6399 04d8 C4040000 		.4byte	0x4c4
 6400 04dc 14       		.uleb128 0x14
 6401 04dd BC090000 		.4byte	.LASF91
 6402 04e1 01       		.byte	0x1
 6403 04e2 3D02     		.2byte	0x23d
 6404 04e4 2E030000 		.4byte	0x32e
 6405 04e8 00000000 		.4byte	.LFB0
 6406 04ec 94000000 		.4byte	.LFE0-.LFB0
 6407 04f0 01       		.uleb128 0x1
 6408 04f1 9C       		.byte	0x9c
 6409 04f2 97050000 		.4byte	0x597
 6410 04f6 15       		.uleb128 0x15
 6411 04f7 C4070000 		.4byte	.LASF82
 6412 04fb 01       		.byte	0x1
 6413 04fc 3D02     		.2byte	0x23d
 6414 04fe E0000000 		.4byte	0xe0
 6415 0502 02       		.uleb128 0x2
 6416 0503 91       		.byte	0x91
 6417 0504 5C       		.sleb128 -36
 6418 0505 15       		.uleb128 0x15
 6419 0506 A9050000 		.4byte	.LASF83
 6420 050a 01       		.byte	0x1
 6421 050b 3E02     		.2byte	0x23e
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 209


 6422 050d 97050000 		.4byte	0x597
 6423 0511 02       		.uleb128 0x2
 6424 0512 91       		.byte	0x91
 6425 0513 58       		.sleb128 -40
 6426 0514 15       		.uleb128 0x15
 6427 0515 DE060000 		.4byte	.LASF84
 6428 0519 01       		.byte	0x1
 6429 051a 3F02     		.2byte	0x23f
 6430 051c 9C050000 		.4byte	0x59c
 6431 0520 02       		.uleb128 0x2
 6432 0521 91       		.byte	0x91
 6433 0522 54       		.sleb128 -44
 6434 0523 15       		.uleb128 0x15
 6435 0524 690A0000 		.4byte	.LASF85
 6436 0528 01       		.byte	0x1
 6437 0529 4002     		.2byte	0x240
 6438 052b A1050000 		.4byte	0x5a1
 6439 052f 02       		.uleb128 0x2
 6440 0530 91       		.byte	0x91
 6441 0531 50       		.sleb128 -48
 6442 0532 15       		.uleb128 0x15
 6443 0533 28000000 		.4byte	.LASF58
 6444 0537 01       		.byte	0x1
 6445 0538 4102     		.2byte	0x241
 6446 053a 12010000 		.4byte	0x112
 6447 053e 02       		.uleb128 0x2
 6448 053f 91       		.byte	0x91
 6449 0540 00       		.sleb128 0
 6450 0541 15       		.uleb128 0x15
 6451 0542 610E0000 		.4byte	.LASF86
 6452 0546 01       		.byte	0x1
 6453 0547 4202     		.2byte	0x242
 6454 0549 A6050000 		.4byte	0x5a6
 6455 054d 02       		.uleb128 0x2
 6456 054e 91       		.byte	0x91
 6457 054f 04       		.sleb128 4
 6458 0550 15       		.uleb128 0x15
 6459 0551 CE020000 		.4byte	.LASF87
 6460 0555 01       		.byte	0x1
 6461 0556 4302     		.2byte	0x243
 6462 0558 B1050000 		.4byte	0x5b1
 6463 055c 02       		.uleb128 0x2
 6464 055d 91       		.byte	0x91
 6465 055e 08       		.sleb128 8
 6466 055f 16       		.uleb128 0x16
 6467 0560 B5070000 		.4byte	.LASF88
 6468 0564 01       		.byte	0x1
 6469 0565 4502     		.2byte	0x245
 6470 0567 B6050000 		.4byte	0x5b6
 6471 056b 02       		.uleb128 0x2
 6472 056c 91       		.byte	0x91
 6473 056d 6C       		.sleb128 -20
 6474 056e 16       		.uleb128 0x16
 6475 056f 850B0000 		.4byte	.LASF89
 6476 0573 01       		.byte	0x1
 6477 0574 4602     		.2byte	0x246
 6478 0576 2E030000 		.4byte	0x32e
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 210


 6479 057a 02       		.uleb128 0x2
 6480 057b 91       		.byte	0x91
 6481 057c 68       		.sleb128 -24
 6482 057d 17       		.uleb128 0x17
 6483 057e 26000000 		.4byte	.LBB2
 6484 0582 14000000 		.4byte	.LBE2-.LBB2
 6485 0586 16       		.uleb128 0x16
 6486 0587 590A0000 		.4byte	.LASF90
 6487 058b 01       		.byte	0x1
 6488 058c 5002     		.2byte	0x250
 6489 058e BC050000 		.4byte	0x5bc
 6490 0592 02       		.uleb128 0x2
 6491 0593 91       		.byte	0x91
 6492 0594 64       		.sleb128 -28
 6493 0595 00       		.byte	0
 6494 0596 00       		.byte	0
 6495 0597 07       		.uleb128 0x7
 6496 0598 B4000000 		.4byte	0xb4
 6497 059c 07       		.uleb128 0x7
 6498 059d D5000000 		.4byte	0xd5
 6499 05a1 07       		.uleb128 0x7
 6500 05a2 A5000000 		.4byte	0xa5
 6501 05a6 07       		.uleb128 0x7
 6502 05a7 6F040000 		.4byte	0x46f
 6503 05ab 06       		.uleb128 0x6
 6504 05ac 04       		.byte	0x4
 6505 05ad 3F020000 		.4byte	0x23f
 6506 05b1 07       		.uleb128 0x7
 6507 05b2 AB050000 		.4byte	0x5ab
 6508 05b6 06       		.uleb128 0x6
 6509 05b7 04       		.byte	0x4
 6510 05b8 D0040000 		.4byte	0x4d0
 6511 05bc 11       		.uleb128 0x11
 6512 05bd 25000000 		.4byte	0x25
 6513 05c1 14       		.uleb128 0x14
 6514 05c2 88070000 		.4byte	.LASF92
 6515 05c6 01       		.byte	0x1
 6516 05c7 D602     		.2byte	0x2d6
 6517 05c9 07010000 		.4byte	0x107
 6518 05cd 00000000 		.4byte	.LFB1
 6519 05d1 98000000 		.4byte	.LFE1-.LFB1
 6520 05d5 01       		.uleb128 0x1
 6521 05d6 9C       		.byte	0x9c
 6522 05d7 6D060000 		.4byte	0x66d
 6523 05db 15       		.uleb128 0x15
 6524 05dc C4070000 		.4byte	.LASF82
 6525 05e0 01       		.byte	0x1
 6526 05e1 D602     		.2byte	0x2d6
 6527 05e3 E0000000 		.4byte	0xe0
 6528 05e7 02       		.uleb128 0x2
 6529 05e8 91       		.byte	0x91
 6530 05e9 5C       		.sleb128 -36
 6531 05ea 15       		.uleb128 0x15
 6532 05eb A9050000 		.4byte	.LASF83
 6533 05ef 01       		.byte	0x1
 6534 05f0 D702     		.2byte	0x2d7
 6535 05f2 97050000 		.4byte	0x597
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 211


 6536 05f6 02       		.uleb128 0x2
 6537 05f7 91       		.byte	0x91
 6538 05f8 58       		.sleb128 -40
 6539 05f9 15       		.uleb128 0x15
 6540 05fa D4030000 		.4byte	.LASF93
 6541 05fe 01       		.byte	0x1
 6542 05ff D802     		.2byte	0x2d8
 6543 0601 6D060000 		.4byte	0x66d
 6544 0605 02       		.uleb128 0x2
 6545 0606 91       		.byte	0x91
 6546 0607 56       		.sleb128 -42
 6547 0608 15       		.uleb128 0x15
 6548 0609 690A0000 		.4byte	.LASF85
 6549 060d 01       		.byte	0x1
 6550 060e D902     		.2byte	0x2d9
 6551 0610 A1050000 		.4byte	0x5a1
 6552 0614 02       		.uleb128 0x2
 6553 0615 91       		.byte	0x91
 6554 0616 50       		.sleb128 -48
 6555 0617 15       		.uleb128 0x15
 6556 0618 28000000 		.4byte	.LASF58
 6557 061c 01       		.byte	0x1
 6558 061d DA02     		.2byte	0x2da
 6559 061f 12010000 		.4byte	0x112
 6560 0623 02       		.uleb128 0x2
 6561 0624 91       		.byte	0x91
 6562 0625 00       		.sleb128 0
 6563 0626 15       		.uleb128 0x15
 6564 0627 B80E0000 		.4byte	.LASF94
 6565 062b 01       		.byte	0x1
 6566 062c DB02     		.2byte	0x2db
 6567 062e 78060000 		.4byte	0x678
 6568 0632 02       		.uleb128 0x2
 6569 0633 91       		.byte	0x91
 6570 0634 04       		.sleb128 4
 6571 0635 16       		.uleb128 0x16
 6572 0636 B5070000 		.4byte	.LASF88
 6573 063a 01       		.byte	0x1
 6574 063b DD02     		.2byte	0x2dd
 6575 063d B6050000 		.4byte	0x5b6
 6576 0641 02       		.uleb128 0x2
 6577 0642 91       		.byte	0x91
 6578 0643 6C       		.sleb128 -20
 6579 0644 16       		.uleb128 0x16
 6580 0645 850B0000 		.4byte	.LASF89
 6581 0649 01       		.byte	0x1
 6582 064a DE02     		.2byte	0x2de
 6583 064c 07010000 		.4byte	0x107
 6584 0650 02       		.uleb128 0x2
 6585 0651 91       		.byte	0x91
 6586 0652 68       		.sleb128 -24
 6587 0653 17       		.uleb128 0x17
 6588 0654 10000000 		.4byte	.LBB3
 6589 0658 3C000000 		.4byte	.LBE3-.LBB3
 6590 065c 16       		.uleb128 0x16
 6591 065d E20A0000 		.4byte	.LASF59
 6592 0661 01       		.byte	0x1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 212


 6593 0662 FB02     		.2byte	0x2fb
 6594 0664 6F040000 		.4byte	0x46f
 6595 0668 02       		.uleb128 0x2
 6596 0669 91       		.byte	0x91
 6597 066a 64       		.sleb128 -28
 6598 066b 00       		.byte	0
 6599 066c 00       		.byte	0
 6600 066d 07       		.uleb128 0x7
 6601 066e CA000000 		.4byte	0xca
 6602 0672 06       		.uleb128 0x6
 6603 0673 04       		.byte	0x4
 6604 0674 2E030000 		.4byte	0x32e
 6605 0678 07       		.uleb128 0x7
 6606 0679 72060000 		.4byte	0x672
 6607 067d 18       		.uleb128 0x18
 6608 067e 89000000 		.4byte	.LASF96
 6609 0682 01       		.byte	0x1
 6610 0683 3103     		.2byte	0x331
 6611 0685 00000000 		.4byte	.LFB2
 6612 0689 10010000 		.4byte	.LFE2-.LFB2
 6613 068d 01       		.uleb128 0x1
 6614 068e 9C       		.byte	0x9c
 6615 068f 28070000 		.4byte	0x728
 6616 0693 15       		.uleb128 0x15
 6617 0694 C4070000 		.4byte	.LASF82
 6618 0698 01       		.byte	0x1
 6619 0699 3103     		.2byte	0x331
 6620 069b E0000000 		.4byte	0xe0
 6621 069f 02       		.uleb128 0x2
 6622 06a0 91       		.byte	0x91
 6623 06a1 6C       		.sleb128 -20
 6624 06a2 15       		.uleb128 0x15
 6625 06a3 A9050000 		.4byte	.LASF83
 6626 06a7 01       		.byte	0x1
 6627 06a8 3203     		.2byte	0x332
 6628 06aa 97050000 		.4byte	0x597
 6629 06ae 02       		.uleb128 0x2
 6630 06af 91       		.byte	0x91
 6631 06b0 68       		.sleb128 -24
 6632 06b1 15       		.uleb128 0x15
 6633 06b2 DE060000 		.4byte	.LASF84
 6634 06b6 01       		.byte	0x1
 6635 06b7 3303     		.2byte	0x333
 6636 06b9 9C050000 		.4byte	0x59c
 6637 06bd 02       		.uleb128 0x2
 6638 06be 91       		.byte	0x91
 6639 06bf 64       		.sleb128 -28
 6640 06c0 15       		.uleb128 0x15
 6641 06c1 690A0000 		.4byte	.LASF85
 6642 06c5 01       		.byte	0x1
 6643 06c6 3403     		.2byte	0x334
 6644 06c8 A1050000 		.4byte	0x5a1
 6645 06cc 02       		.uleb128 0x2
 6646 06cd 91       		.byte	0x91
 6647 06ce 60       		.sleb128 -32
 6648 06cf 15       		.uleb128 0x15
 6649 06d0 28000000 		.4byte	.LASF58
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 213


 6650 06d4 01       		.byte	0x1
 6651 06d5 3503     		.2byte	0x335
 6652 06d7 12010000 		.4byte	0x112
 6653 06db 02       		.uleb128 0x2
 6654 06dc 91       		.byte	0x91
 6655 06dd 00       		.sleb128 0
 6656 06de 15       		.uleb128 0x15
 6657 06df B80E0000 		.4byte	.LASF94
 6658 06e3 01       		.byte	0x1
 6659 06e4 3603     		.2byte	0x336
 6660 06e6 78060000 		.4byte	0x678
 6661 06ea 02       		.uleb128 0x2
 6662 06eb 91       		.byte	0x91
 6663 06ec 04       		.sleb128 4
 6664 06ed 15       		.uleb128 0x15
 6665 06ee B5070000 		.4byte	.LASF88
 6666 06f2 01       		.byte	0x1
 6667 06f3 3703     		.2byte	0x337
 6668 06f5 B6050000 		.4byte	0x5b6
 6669 06f9 02       		.uleb128 0x2
 6670 06fa 91       		.byte	0x91
 6671 06fb 08       		.sleb128 8
 6672 06fc 15       		.uleb128 0x15
 6673 06fd 800D0000 		.4byte	.LASF95
 6674 0701 01       		.byte	0x1
 6675 0702 3803     		.2byte	0x338
 6676 0704 33070000 		.4byte	0x733
 6677 0708 02       		.uleb128 0x2
 6678 0709 91       		.byte	0x91
 6679 070a 0C       		.sleb128 12
 6680 070b 16       		.uleb128 0x16
 6681 070c 700E0000 		.4byte	.LASF55
 6682 0710 01       		.byte	0x1
 6683 0711 3A03     		.2byte	0x33a
 6684 0713 6F040000 		.4byte	0x46f
 6685 0717 02       		.uleb128 0x2
 6686 0718 91       		.byte	0x91
 6687 0719 70       		.sleb128 -16
 6688 071a 19       		.uleb128 0x19
 6689 071b 7800     		.ascii	"x\000"
 6690 071d 01       		.byte	0x1
 6691 071e 3B03     		.2byte	0x33b
 6692 0720 12010000 		.4byte	0x112
 6693 0724 02       		.uleb128 0x2
 6694 0725 91       		.byte	0x91
 6695 0726 74       		.sleb128 -12
 6696 0727 00       		.byte	0
 6697 0728 06       		.uleb128 0x6
 6698 0729 04       		.byte	0x4
 6699 072a 2E070000 		.4byte	0x72e
 6700 072e 07       		.uleb128 0x7
 6701 072f 64040000 		.4byte	0x464
 6702 0733 07       		.uleb128 0x7
 6703 0734 28070000 		.4byte	0x728
 6704 0738 18       		.uleb128 0x18
 6705 0739 94070000 		.4byte	.LASF97
 6706 073d 01       		.byte	0x1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 214


 6707 073e 2C04     		.2byte	0x42c
 6708 0740 00000000 		.4byte	.LFB3
 6709 0744 C8000000 		.4byte	.LFE3-.LFB3
 6710 0748 01       		.uleb128 0x1
 6711 0749 9C       		.byte	0x9c
 6712 074a 5E070000 		.4byte	0x75e
 6713 074e 15       		.uleb128 0x15
 6714 074f B5070000 		.4byte	.LASF88
 6715 0753 01       		.byte	0x1
 6716 0754 2C04     		.2byte	0x42c
 6717 0756 B6050000 		.4byte	0x5b6
 6718 075a 02       		.uleb128 0x2
 6719 075b 91       		.byte	0x91
 6720 075c 74       		.sleb128 -12
 6721 075d 00       		.byte	0
 6722 075e 1A       		.uleb128 0x1a
 6723 075f 110A0000 		.4byte	.LASF107
 6724 0763 01       		.byte	0x1
 6725 0764 8204     		.2byte	0x482
 6726 0766 00000000 		.4byte	.LFB4
 6727 076a D0000000 		.4byte	.LFE4-.LFB4
 6728 076e 01       		.uleb128 0x1
 6729 076f 9C       		.byte	0x9c
 6730 0770 93070000 		.4byte	0x793
 6731 0774 15       		.uleb128 0x15
 6732 0775 EA0A0000 		.4byte	.LASF98
 6733 0779 01       		.byte	0x1
 6734 077a 8204     		.2byte	0x482
 6735 077c 2E030000 		.4byte	0x32e
 6736 0780 02       		.uleb128 0x2
 6737 0781 91       		.byte	0x91
 6738 0782 6C       		.sleb128 -20
 6739 0783 16       		.uleb128 0x16
 6740 0784 290E0000 		.4byte	.LASF99
 6741 0788 01       		.byte	0x1
 6742 0789 8404     		.2byte	0x484
 6743 078b B6050000 		.4byte	0x5b6
 6744 078f 02       		.uleb128 0x2
 6745 0790 91       		.byte	0x91
 6746 0791 74       		.sleb128 -12
 6747 0792 00       		.byte	0
 6748 0793 14       		.uleb128 0x14
 6749 0794 D20A0000 		.4byte	.LASF100
 6750 0798 01       		.byte	0x1
 6751 0799 E104     		.2byte	0x4e1
 6752 079b 07010000 		.4byte	0x107
 6753 079f 00000000 		.4byte	.LFB5
 6754 07a3 C4000000 		.4byte	.LFE5-.LFB5
 6755 07a7 01       		.uleb128 0x1
 6756 07a8 9C       		.byte	0x9c
 6757 07a9 12080000 		.4byte	0x812
 6758 07ad 15       		.uleb128 0x15
 6759 07ae 240B0000 		.4byte	.LASF101
 6760 07b2 01       		.byte	0x1
 6761 07b3 E104     		.2byte	0x4e1
 6762 07b5 18080000 		.4byte	0x818
 6763 07b9 02       		.uleb128 0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 215


 6764 07ba 91       		.byte	0x91
 6765 07bb 64       		.sleb128 -28
 6766 07bc 15       		.uleb128 0x15
 6767 07bd C10D0000 		.4byte	.LASF102
 6768 07c1 01       		.byte	0x1
 6769 07c2 E204     		.2byte	0x4e2
 6770 07c4 1D080000 		.4byte	0x81d
 6771 07c8 02       		.uleb128 0x2
 6772 07c9 91       		.byte	0x91
 6773 07ca 60       		.sleb128 -32
 6774 07cb 16       		.uleb128 0x16
 6775 07cc EF0D0000 		.4byte	.LASF103
 6776 07d0 01       		.byte	0x1
 6777 07d1 E404     		.2byte	0x4e4
 6778 07d3 1D010000 		.4byte	0x11d
 6779 07d7 02       		.uleb128 0x2
 6780 07d8 91       		.byte	0x91
 6781 07d9 6C       		.sleb128 -20
 6782 07da 16       		.uleb128 0x16
 6783 07db 390D0000 		.4byte	.LASF104
 6784 07df 01       		.byte	0x1
 6785 07e0 E504     		.2byte	0x4e5
 6786 07e2 07010000 		.4byte	0x107
 6787 07e6 02       		.uleb128 0x2
 6788 07e7 91       		.byte	0x91
 6789 07e8 68       		.sleb128 -24
 6790 07e9 16       		.uleb128 0x16
 6791 07ea 1F070000 		.4byte	.LASF105
 6792 07ee 01       		.byte	0x1
 6793 07ef E504     		.2byte	0x4e5
 6794 07f1 07010000 		.4byte	0x107
 6795 07f5 02       		.uleb128 0x2
 6796 07f6 91       		.byte	0x91
 6797 07f7 74       		.sleb128 -12
 6798 07f8 17       		.uleb128 0x17
 6799 07f9 3A000000 		.4byte	.LBB4
 6800 07fd 62000000 		.4byte	.LBE4-.LBB4
 6801 0801 16       		.uleb128 0x16
 6802 0802 86050000 		.4byte	.LASF106
 6803 0806 01       		.byte	0x1
 6804 0807 EF04     		.2byte	0x4ef
 6805 0809 1D080000 		.4byte	0x81d
 6806 080d 02       		.uleb128 0x2
 6807 080e 91       		.byte	0x91
 6808 080f 70       		.sleb128 -16
 6809 0810 00       		.byte	0
 6810 0811 00       		.byte	0
 6811 0812 06       		.uleb128 0x6
 6812 0813 04       		.byte	0x4
 6813 0814 1D010000 		.4byte	0x11d
 6814 0818 07       		.uleb128 0x7
 6815 0819 12080000 		.4byte	0x812
 6816 081d 07       		.uleb128 0x7
 6817 081e 1D010000 		.4byte	0x11d
 6818 0822 1A       		.uleb128 0x1a
 6819 0823 0F060000 		.4byte	.LASF108
 6820 0827 01       		.byte	0x1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 216


 6821 0828 3805     		.2byte	0x538
 6822 082a 00000000 		.4byte	.LFB6
 6823 082e 54000000 		.4byte	.LFE6-.LFB6
 6824 0832 01       		.uleb128 0x1
 6825 0833 9C       		.byte	0x9c
 6826 0834 57080000 		.4byte	0x857
 6827 0838 15       		.uleb128 0x15
 6828 0839 270C0000 		.4byte	.LASF109
 6829 083d 01       		.byte	0x1
 6830 083e 3805     		.2byte	0x538
 6831 0840 1D080000 		.4byte	0x81d
 6832 0844 02       		.uleb128 0x2
 6833 0845 91       		.byte	0x91
 6834 0846 6C       		.sleb128 -20
 6835 0847 16       		.uleb128 0x16
 6836 0848 390D0000 		.4byte	.LASF104
 6837 084c 01       		.byte	0x1
 6838 084d 3A05     		.2byte	0x53a
 6839 084f 07010000 		.4byte	0x107
 6840 0853 02       		.uleb128 0x2
 6841 0854 91       		.byte	0x91
 6842 0855 74       		.sleb128 -12
 6843 0856 00       		.byte	0
 6844 0857 14       		.uleb128 0x14
 6845 0858 74050000 		.4byte	.LASF110
 6846 085c 01       		.byte	0x1
 6847 085d C605     		.2byte	0x5c6
 6848 085f 12010000 		.4byte	0x112
 6849 0863 00000000 		.4byte	.LFB7
 6850 0867 34000000 		.4byte	.LFE7-.LFB7
 6851 086b 01       		.uleb128 0x1
 6852 086c 9C       		.byte	0x9c
 6853 086d 9F080000 		.4byte	0x89f
 6854 0871 15       		.uleb128 0x15
 6855 0872 BE070000 		.4byte	.LASF111
 6856 0876 01       		.byte	0x1
 6857 0877 C605     		.2byte	0x5c6
 6858 0879 9F080000 		.4byte	0x89f
 6859 087d 02       		.uleb128 0x2
 6860 087e 91       		.byte	0x91
 6861 087f 6C       		.sleb128 -20
 6862 0880 16       		.uleb128 0x16
 6863 0881 290E0000 		.4byte	.LASF99
 6864 0885 01       		.byte	0x1
 6865 0886 C805     		.2byte	0x5c8
 6866 0888 A4080000 		.4byte	0x8a4
 6867 088c 02       		.uleb128 0x2
 6868 088d 91       		.byte	0x91
 6869 088e 74       		.sleb128 -12
 6870 088f 16       		.uleb128 0x16
 6871 0890 4E030000 		.4byte	.LASF112
 6872 0894 01       		.byte	0x1
 6873 0895 C905     		.2byte	0x5c9
 6874 0897 12010000 		.4byte	0x112
 6875 089b 02       		.uleb128 0x2
 6876 089c 91       		.byte	0x91
 6877 089d 70       		.sleb128 -16
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 217


 6878 089e 00       		.byte	0
 6879 089f 07       		.uleb128 0x7
 6880 08a0 2E030000 		.4byte	0x32e
 6881 08a4 06       		.uleb128 0x6
 6882 08a5 04       		.byte	0x4
 6883 08a6 AA080000 		.4byte	0x8aa
 6884 08aa 07       		.uleb128 0x7
 6885 08ab D0040000 		.4byte	0x4d0
 6886 08af 14       		.uleb128 0x14
 6887 08b0 F0080000 		.4byte	.LASF113
 6888 08b4 01       		.byte	0x1
 6889 08b5 DC05     		.2byte	0x5dc
 6890 08b7 12010000 		.4byte	0x112
 6891 08bb 00000000 		.4byte	.LFB8
 6892 08bf 3C000000 		.4byte	.LFE8-.LFB8
 6893 08c3 01       		.uleb128 0x1
 6894 08c4 9C       		.byte	0x9c
 6895 08c5 06090000 		.4byte	0x906
 6896 08c9 15       		.uleb128 0x15
 6897 08ca BE070000 		.4byte	.LASF111
 6898 08ce 01       		.byte	0x1
 6899 08cf DC05     		.2byte	0x5dc
 6900 08d1 9F080000 		.4byte	0x89f
 6901 08d5 02       		.uleb128 0x2
 6902 08d6 91       		.byte	0x91
 6903 08d7 64       		.sleb128 -28
 6904 08d8 16       		.uleb128 0x16
 6905 08d9 290E0000 		.4byte	.LASF99
 6906 08dd 01       		.byte	0x1
 6907 08de DE05     		.2byte	0x5de
 6908 08e0 A4080000 		.4byte	0x8a4
 6909 08e4 02       		.uleb128 0x2
 6910 08e5 91       		.byte	0x91
 6911 08e6 70       		.sleb128 -16
 6912 08e7 16       		.uleb128 0x16
 6913 08e8 4E030000 		.4byte	.LASF112
 6914 08ec 01       		.byte	0x1
 6915 08ed DF05     		.2byte	0x5df
 6916 08ef 12010000 		.4byte	0x112
 6917 08f3 02       		.uleb128 0x2
 6918 08f4 91       		.byte	0x91
 6919 08f5 6C       		.sleb128 -20
 6920 08f6 16       		.uleb128 0x16
 6921 08f7 47040000 		.4byte	.LASF114
 6922 08fb 01       		.byte	0x1
 6923 08fc DF05     		.2byte	0x5df
 6924 08fe 12010000 		.4byte	0x112
 6925 0902 02       		.uleb128 0x2
 6926 0903 91       		.byte	0x91
 6927 0904 74       		.sleb128 -12
 6928 0905 00       		.byte	0
 6929 0906 1A       		.uleb128 0x1a
 6930 0907 7E090000 		.4byte	.LASF115
 6931 090b 01       		.byte	0x1
 6932 090c 0406     		.2byte	0x604
 6933 090e 00000000 		.4byte	.LFB9
 6934 0912 0C010000 		.4byte	.LFE9-.LFB9
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 218


 6935 0916 01       		.uleb128 0x1
 6936 0917 9C       		.byte	0x9c
 6937 0918 77090000 		.4byte	0x977
 6938 091c 15       		.uleb128 0x15
 6939 091d BE070000 		.4byte	.LASF111
 6940 0921 01       		.byte	0x1
 6941 0922 0406     		.2byte	0x604
 6942 0924 2E030000 		.4byte	0x32e
 6943 0928 02       		.uleb128 0x2
 6944 0929 91       		.byte	0x91
 6945 092a 64       		.sleb128 -28
 6946 092b 15       		.uleb128 0x15
 6947 092c A5080000 		.4byte	.LASF116
 6948 0930 01       		.byte	0x1
 6949 0931 0506     		.2byte	0x605
 6950 0933 12010000 		.4byte	0x112
 6951 0937 02       		.uleb128 0x2
 6952 0938 91       		.byte	0x91
 6953 0939 60       		.sleb128 -32
 6954 093a 16       		.uleb128 0x16
 6955 093b 290E0000 		.4byte	.LASF99
 6956 093f 01       		.byte	0x1
 6957 0940 0706     		.2byte	0x607
 6958 0942 B6050000 		.4byte	0x5b6
 6959 0946 02       		.uleb128 0x2
 6960 0947 91       		.byte	0x91
 6961 0948 70       		.sleb128 -16
 6962 0949 16       		.uleb128 0x16
 6963 094a E60E0000 		.4byte	.LASF117
 6964 094e 01       		.byte	0x1
 6965 094f 0806     		.2byte	0x608
 6966 0951 12010000 		.4byte	0x112
 6967 0955 02       		.uleb128 0x2
 6968 0956 91       		.byte	0x91
 6969 0957 6C       		.sleb128 -20
 6970 0958 16       		.uleb128 0x16
 6971 0959 C40C0000 		.4byte	.LASF118
 6972 095d 01       		.byte	0x1
 6973 095e 0806     		.2byte	0x608
 6974 0960 12010000 		.4byte	0x112
 6975 0964 02       		.uleb128 0x2
 6976 0965 91       		.byte	0x91
 6977 0966 68       		.sleb128 -24
 6978 0967 16       		.uleb128 0x16
 6979 0968 A3030000 		.4byte	.LASF119
 6980 096c 01       		.byte	0x1
 6981 096d 0906     		.2byte	0x609
 6982 096f 07010000 		.4byte	0x107
 6983 0973 02       		.uleb128 0x2
 6984 0974 91       		.byte	0x91
 6985 0975 74       		.sleb128 -12
 6986 0976 00       		.byte	0
 6987 0977 1A       		.uleb128 0x1a
 6988 0978 1C0D0000 		.4byte	.LASF120
 6989 097c 01       		.byte	0x1
 6990 097d AA06     		.2byte	0x6aa
 6991 097f 00000000 		.4byte	.LFB10
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 219


 6992 0983 F0000000 		.4byte	.LFE10-.LFB10
 6993 0987 01       		.uleb128 0x1
 6994 0988 9C       		.byte	0x9c
 6995 0989 C3090000 		.4byte	0x9c3
 6996 098d 15       		.uleb128 0x15
 6997 098e 000B0000 		.4byte	.LASF121
 6998 0992 01       		.byte	0x1
 6999 0993 AA06     		.2byte	0x6aa
 7000 0995 2E030000 		.4byte	0x32e
 7001 0999 02       		.uleb128 0x2
 7002 099a 91       		.byte	0x91
 7003 099b 6C       		.sleb128 -20
 7004 099c 16       		.uleb128 0x16
 7005 099d 290E0000 		.4byte	.LASF99
 7006 09a1 01       		.byte	0x1
 7007 09a2 AC06     		.2byte	0x6ac
 7008 09a4 B6050000 		.4byte	0x5b6
 7009 09a8 02       		.uleb128 0x2
 7010 09a9 91       		.byte	0x91
 7011 09aa 70       		.sleb128 -16
 7012 09ab 17       		.uleb128 0x17
 7013 09ac 46000000 		.4byte	.LBB5
 7014 09b0 32000000 		.4byte	.LBE5-.LBB5
 7015 09b4 19       		.uleb128 0x19
 7016 09b5 7800     		.ascii	"x\000"
 7017 09b7 01       		.byte	0x1
 7018 09b8 CF06     		.2byte	0x6cf
 7019 09ba 07010000 		.4byte	0x107
 7020 09be 02       		.uleb128 0x2
 7021 09bf 91       		.byte	0x91
 7022 09c0 74       		.sleb128 -12
 7023 09c1 00       		.byte	0
 7024 09c2 00       		.byte	0
 7025 09c3 1B       		.uleb128 0x1b
 7026 09c4 AB0A0000 		.4byte	.LASF227
 7027 09c8 01       		.byte	0x1
 7028 09c9 1407     		.2byte	0x714
 7029 09cb 07010000 		.4byte	0x107
 7030 09cf 00000000 		.4byte	.LFB11
 7031 09d3 54000000 		.4byte	.LFE11-.LFB11
 7032 09d7 01       		.uleb128 0x1
 7033 09d8 9C       		.byte	0x9c
 7034 09d9 0B0A0000 		.4byte	0xa0b
 7035 09dd 15       		.uleb128 0x15
 7036 09de BE070000 		.4byte	.LASF111
 7037 09e2 01       		.byte	0x1
 7038 09e3 1407     		.2byte	0x714
 7039 09e5 9F080000 		.4byte	0x89f
 7040 09e9 02       		.uleb128 0x2
 7041 09ea 91       		.byte	0x91
 7042 09eb 6C       		.sleb128 -20
 7043 09ec 16       		.uleb128 0x16
 7044 09ed 850B0000 		.4byte	.LASF89
 7045 09f1 01       		.byte	0x1
 7046 09f2 1607     		.2byte	0x716
 7047 09f4 07010000 		.4byte	0x107
 7048 09f8 02       		.uleb128 0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 220


 7049 09f9 91       		.byte	0x91
 7050 09fa 74       		.sleb128 -12
 7051 09fb 16       		.uleb128 0x16
 7052 09fc 290E0000 		.4byte	.LASF99
 7053 0a00 01       		.byte	0x1
 7054 0a01 1707     		.2byte	0x717
 7055 0a03 0B0A0000 		.4byte	0xa0b
 7056 0a07 02       		.uleb128 0x2
 7057 0a08 91       		.byte	0x91
 7058 0a09 70       		.sleb128 -16
 7059 0a0a 00       		.byte	0
 7060 0a0b 07       		.uleb128 0x7
 7061 0a0c A4080000 		.4byte	0x8a4
 7062 0a10 1A       		.uleb128 0x1a
 7063 0a11 7D0E0000 		.4byte	.LASF122
 7064 0a15 01       		.byte	0x1
 7065 0a16 4207     		.2byte	0x742
 7066 0a18 00000000 		.4byte	.LFB12
 7067 0a1c A0000000 		.4byte	.LFE12-.LFB12
 7068 0a20 01       		.uleb128 0x1
 7069 0a21 9C       		.byte	0x9c
 7070 0a22 450A0000 		.4byte	0xa45
 7071 0a26 15       		.uleb128 0x15
 7072 0a27 40030000 		.4byte	.LASF123
 7073 0a2b 01       		.byte	0x1
 7074 0a2c 4207     		.2byte	0x742
 7075 0a2e 2E030000 		.4byte	0x32e
 7076 0a32 02       		.uleb128 0x2
 7077 0a33 91       		.byte	0x91
 7078 0a34 6C       		.sleb128 -20
 7079 0a35 16       		.uleb128 0x16
 7080 0a36 290E0000 		.4byte	.LASF99
 7081 0a3a 01       		.byte	0x1
 7082 0a3b 4407     		.2byte	0x744
 7083 0a3d 450A0000 		.4byte	0xa45
 7084 0a41 02       		.uleb128 0x2
 7085 0a42 91       		.byte	0x91
 7086 0a43 74       		.sleb128 -12
 7087 0a44 00       		.byte	0
 7088 0a45 07       		.uleb128 0x7
 7089 0a46 B6050000 		.4byte	0x5b6
 7090 0a4a 14       		.uleb128 0x14
 7091 0a4b BE040000 		.4byte	.LASF124
 7092 0a4f 01       		.byte	0x1
 7093 0a50 7807     		.2byte	0x778
 7094 0a52 07010000 		.4byte	0x107
 7095 0a56 00000000 		.4byte	.LFB13
 7096 0a5a CC000000 		.4byte	.LFE13-.LFB13
 7097 0a5e 01       		.uleb128 0x1
 7098 0a5f 9C       		.byte	0x9c
 7099 0a60 A10A0000 		.4byte	0xaa1
 7100 0a64 15       		.uleb128 0x15
 7101 0a65 40030000 		.4byte	.LASF123
 7102 0a69 01       		.byte	0x1
 7103 0a6a 7807     		.2byte	0x778
 7104 0a6c 2E030000 		.4byte	0x32e
 7105 0a70 02       		.uleb128 0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 221


 7106 0a71 91       		.byte	0x91
 7107 0a72 64       		.sleb128 -28
 7108 0a73 16       		.uleb128 0x16
 7109 0a74 A3030000 		.4byte	.LASF119
 7110 0a78 01       		.byte	0x1
 7111 0a79 7A07     		.2byte	0x77a
 7112 0a7b 07010000 		.4byte	0x107
 7113 0a7f 02       		.uleb128 0x2
 7114 0a80 91       		.byte	0x91
 7115 0a81 74       		.sleb128 -12
 7116 0a82 16       		.uleb128 0x16
 7117 0a83 290E0000 		.4byte	.LASF99
 7118 0a87 01       		.byte	0x1
 7119 0a88 7B07     		.2byte	0x77b
 7120 0a8a 450A0000 		.4byte	0xa45
 7121 0a8e 02       		.uleb128 0x2
 7122 0a8f 91       		.byte	0x91
 7123 0a90 70       		.sleb128 -16
 7124 0a91 16       		.uleb128 0x16
 7125 0a92 75030000 		.4byte	.LASF125
 7126 0a96 01       		.byte	0x1
 7127 0a97 7C07     		.2byte	0x77c
 7128 0a99 12010000 		.4byte	0x112
 7129 0a9d 02       		.uleb128 0x2
 7130 0a9e 91       		.byte	0x91
 7131 0a9f 6C       		.sleb128 -20
 7132 0aa0 00       		.byte	0
 7133 0aa1 1A       		.uleb128 0x1a
 7134 0aa2 CE0B0000 		.4byte	.LASF126
 7135 0aa6 01       		.byte	0x1
 7136 0aa7 C307     		.2byte	0x7c3
 7137 0aa9 00000000 		.4byte	.LFB14
 7138 0aad B8000000 		.4byte	.LFE14-.LFB14
 7139 0ab1 01       		.uleb128 0x1
 7140 0ab2 9C       		.byte	0x9c
 7141 0ab3 FE0A0000 		.4byte	0xafe
 7142 0ab7 16       		.uleb128 0x16
 7143 0ab8 850B0000 		.4byte	.LASF89
 7144 0abc 01       		.byte	0x1
 7145 0abd C507     		.2byte	0x7c5
 7146 0abf 07010000 		.4byte	0x107
 7147 0ac3 02       		.uleb128 0x2
 7148 0ac4 91       		.byte	0x91
 7149 0ac5 6C       		.sleb128 -20
 7150 0ac6 17       		.uleb128 0x17
 7151 0ac7 06000000 		.4byte	.LBB6
 7152 0acb 48000000 		.4byte	.LBE6-.LBB6
 7153 0acf 16       		.uleb128 0x16
 7154 0ad0 890D0000 		.4byte	.LASF127
 7155 0ad4 01       		.byte	0x1
 7156 0ad5 CA07     		.2byte	0x7ca
 7157 0ad7 AB050000 		.4byte	0x5ab
 7158 0adb 02       		.uleb128 0x2
 7159 0adc 91       		.byte	0x91
 7160 0add 68       		.sleb128 -24
 7161 0ade 16       		.uleb128 0x16
 7162 0adf 3E060000 		.4byte	.LASF128
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 222


 7163 0ae3 01       		.byte	0x1
 7164 0ae4 CB07     		.2byte	0x7cb
 7165 0ae6 6F040000 		.4byte	0x46f
 7166 0aea 02       		.uleb128 0x2
 7167 0aeb 91       		.byte	0x91
 7168 0aec 64       		.sleb128 -28
 7169 0aed 16       		.uleb128 0x16
 7170 0aee 2A060000 		.4byte	.LASF129
 7171 0af2 01       		.byte	0x1
 7172 0af3 CC07     		.2byte	0x7cc
 7173 0af5 D5000000 		.4byte	0xd5
 7174 0af9 02       		.uleb128 0x2
 7175 0afa 91       		.byte	0x91
 7176 0afb 60       		.sleb128 -32
 7177 0afc 00       		.byte	0
 7178 0afd 00       		.byte	0
 7179 0afe 1C       		.uleb128 0x1c
 7180 0aff 62050000 		.4byte	.LASF130
 7181 0b03 01       		.byte	0x1
 7182 0b04 4308     		.2byte	0x843
 7183 0b06 00000000 		.4byte	.LFB15
 7184 0b0a 1C000000 		.4byte	.LFE15-.LFB15
 7185 0b0e 01       		.uleb128 0x1
 7186 0b0f 9C       		.byte	0x9c
 7187 0b10 1D       		.uleb128 0x1d
 7188 0b11 E3040000 		.4byte	.LASF131
 7189 0b15 01       		.byte	0x1
 7190 0b16 4E08     		.2byte	0x84e
 7191 0b18 00000000 		.4byte	.LFB16
 7192 0b1c 18000000 		.4byte	.LFE16-.LFB16
 7193 0b20 01       		.uleb128 0x1
 7194 0b21 9C       		.byte	0x9c
 7195 0b22 14       		.uleb128 0x14
 7196 0b23 8A0A0000 		.4byte	.LASF132
 7197 0b27 01       		.byte	0x1
 7198 0b28 A208     		.2byte	0x8a2
 7199 0b2a 07010000 		.4byte	0x107
 7200 0b2e 00000000 		.4byte	.LFB17
 7201 0b32 20010000 		.4byte	.LFE17-.LFB17
 7202 0b36 01       		.uleb128 0x1
 7203 0b37 9C       		.byte	0x9c
 7204 0b38 740B0000 		.4byte	0xb74
 7205 0b3c 16       		.uleb128 0x16
 7206 0b3d 290E0000 		.4byte	.LASF99
 7207 0b41 01       		.byte	0x1
 7208 0b42 A408     		.2byte	0x8a4
 7209 0b44 B6050000 		.4byte	0x5b6
 7210 0b48 02       		.uleb128 0x2
 7211 0b49 91       		.byte	0x91
 7212 0b4a 74       		.sleb128 -12
 7213 0b4b 16       		.uleb128 0x16
 7214 0b4c 390D0000 		.4byte	.LASF104
 7215 0b50 01       		.byte	0x1
 7216 0b51 A508     		.2byte	0x8a5
 7217 0b53 07010000 		.4byte	0x107
 7218 0b57 02       		.uleb128 0x2
 7219 0b58 91       		.byte	0x91
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 223


 7220 0b59 70       		.sleb128 -16
 7221 0b5a 17       		.uleb128 0x17
 7222 0b5b B0000000 		.4byte	.LBB7
 7223 0b5f 2C000000 		.4byte	.LBE7-.LBB7
 7224 0b63 16       		.uleb128 0x16
 7225 0b64 60010000 		.4byte	.LASF133
 7226 0b68 01       		.byte	0x1
 7227 0b69 DD08     		.2byte	0x8dd
 7228 0b6b 1D010000 		.4byte	0x11d
 7229 0b6f 02       		.uleb128 0x2
 7230 0b70 91       		.byte	0x91
 7231 0b71 6C       		.sleb128 -20
 7232 0b72 00       		.byte	0
 7233 0b73 00       		.byte	0
 7234 0b74 1E       		.uleb128 0x1e
 7235 0b75 09090000 		.4byte	.LASF134
 7236 0b79 01       		.byte	0x1
 7237 0b7a 1109     		.2byte	0x911
 7238 0b7c 1D010000 		.4byte	0x11d
 7239 0b80 00000000 		.4byte	.LFB18
 7240 0b84 1C000000 		.4byte	.LFE18-.LFB18
 7241 0b88 01       		.uleb128 0x1
 7242 0b89 9C       		.byte	0x9c
 7243 0b8a 9E0B0000 		.4byte	0xb9e
 7244 0b8e 16       		.uleb128 0x16
 7245 0b8f C70B0000 		.4byte	.LASF135
 7246 0b93 01       		.byte	0x1
 7247 0b94 1309     		.2byte	0x913
 7248 0b96 1D010000 		.4byte	0x11d
 7249 0b9a 02       		.uleb128 0x2
 7250 0b9b 91       		.byte	0x91
 7251 0b9c 74       		.sleb128 -12
 7252 0b9d 00       		.byte	0
 7253 0b9e 1E       		.uleb128 0x1e
 7254 0b9f 2E040000 		.4byte	.LASF136
 7255 0ba3 01       		.byte	0x1
 7256 0ba4 2009     		.2byte	0x920
 7257 0ba6 1D010000 		.4byte	0x11d
 7258 0baa 00000000 		.4byte	.LFB19
 7259 0bae 20000000 		.4byte	.LFE19-.LFB19
 7260 0bb2 01       		.uleb128 0x1
 7261 0bb3 9C       		.byte	0x9c
 7262 0bb4 D70B0000 		.4byte	0xbd7
 7263 0bb8 16       		.uleb128 0x16
 7264 0bb9 850B0000 		.4byte	.LASF89
 7265 0bbd 01       		.byte	0x1
 7266 0bbe 2209     		.2byte	0x922
 7267 0bc0 1D010000 		.4byte	0x11d
 7268 0bc4 02       		.uleb128 0x2
 7269 0bc5 91       		.byte	0x91
 7270 0bc6 70       		.sleb128 -16
 7271 0bc7 16       		.uleb128 0x16
 7272 0bc8 75030000 		.4byte	.LASF125
 7273 0bcc 01       		.byte	0x1
 7274 0bcd 2309     		.2byte	0x923
 7275 0bcf 12010000 		.4byte	0x112
 7276 0bd3 02       		.uleb128 0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 224


 7277 0bd4 91       		.byte	0x91
 7278 0bd5 74       		.sleb128 -12
 7279 0bd6 00       		.byte	0
 7280 0bd7 1F       		.uleb128 0x1f
 7281 0bd8 57030000 		.4byte	.LASF228
 7282 0bdc 01       		.byte	0x1
 7283 0bdd 3F09     		.2byte	0x93f
 7284 0bdf 12010000 		.4byte	0x112
 7285 0be3 00000000 		.4byte	.LFB20
 7286 0be7 14000000 		.4byte	.LFE20-.LFB20
 7287 0beb 01       		.uleb128 0x1
 7288 0bec 9C       		.byte	0x9c
 7289 0bed 1E       		.uleb128 0x1e
 7290 0bee B90B0000 		.4byte	.LASF137
 7291 0bf2 01       		.byte	0x1
 7292 0bf3 4709     		.2byte	0x947
 7293 0bf5 A7000000 		.4byte	0xa7
 7294 0bf9 00000000 		.4byte	.LFB21
 7295 0bfd 38000000 		.4byte	.LFE21-.LFB21
 7296 0c01 01       		.uleb128 0x1
 7297 0c02 9C       		.byte	0x9c
 7298 0c03 260C0000 		.4byte	0xc26
 7299 0c07 15       		.uleb128 0x15
 7300 0c08 96090000 		.4byte	.LASF138
 7301 0c0c 01       		.byte	0x1
 7302 0c0d 4709     		.2byte	0x947
 7303 0c0f 2E030000 		.4byte	0x32e
 7304 0c13 02       		.uleb128 0x2
 7305 0c14 91       		.byte	0x91
 7306 0c15 6C       		.sleb128 -20
 7307 0c16 16       		.uleb128 0x16
 7308 0c17 290E0000 		.4byte	.LASF99
 7309 0c1b 01       		.byte	0x1
 7310 0c1c 4909     		.2byte	0x949
 7311 0c1e B6050000 		.4byte	0x5b6
 7312 0c22 02       		.uleb128 0x2
 7313 0c23 91       		.byte	0x91
 7314 0c24 74       		.sleb128 -12
 7315 0c25 00       		.byte	0
 7316 0c26 14       		.uleb128 0x14
 7317 0c27 21030000 		.4byte	.LASF139
 7318 0c2b 01       		.byte	0x1
 7319 0c2c 430A     		.2byte	0xa43
 7320 0c2e 07010000 		.4byte	0x107
 7321 0c32 00000000 		.4byte	.LFB22
 7322 0c36 48000000 		.4byte	.LFE22-.LFB22
 7323 0c3a 01       		.uleb128 0x1
 7324 0c3b 9C       		.byte	0x9c
 7325 0c3c 5F0C0000 		.4byte	0xc5f
 7326 0c40 15       		.uleb128 0x15
 7327 0c41 700D0000 		.4byte	.LASF140
 7328 0c45 01       		.byte	0x1
 7329 0c46 430A     		.2byte	0xa43
 7330 0c48 1D010000 		.4byte	0x11d
 7331 0c4c 02       		.uleb128 0x2
 7332 0c4d 91       		.byte	0x91
 7333 0c4e 6C       		.sleb128 -20
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 225


 7334 0c4f 16       		.uleb128 0x16
 7335 0c50 CF070000 		.4byte	.LASF141
 7336 0c54 01       		.byte	0x1
 7337 0c55 450A     		.2byte	0xa45
 7338 0c57 07010000 		.4byte	0x107
 7339 0c5b 02       		.uleb128 0x2
 7340 0c5c 91       		.byte	0x91
 7341 0c5d 74       		.sleb128 -12
 7342 0c5e 00       		.byte	0
 7343 0c5f 14       		.uleb128 0x14
 7344 0c60 DB020000 		.4byte	.LASF142
 7345 0c64 01       		.byte	0x1
 7346 0c65 A50A     		.2byte	0xaa5
 7347 0c67 07010000 		.4byte	0x107
 7348 0c6b 00000000 		.4byte	.LFB23
 7349 0c6f 4C010000 		.4byte	.LFE23-.LFB23
 7350 0c73 01       		.uleb128 0x1
 7351 0c74 9C       		.byte	0x9c
 7352 0c75 D90C0000 		.4byte	0xcd9
 7353 0c79 16       		.uleb128 0x16
 7354 0c7a 290E0000 		.4byte	.LASF99
 7355 0c7e 01       		.byte	0x1
 7356 0c7f A70A     		.2byte	0xaa7
 7357 0c81 B6050000 		.4byte	0x5b6
 7358 0c85 02       		.uleb128 0x2
 7359 0c86 91       		.byte	0x91
 7360 0c87 68       		.sleb128 -24
 7361 0c88 16       		.uleb128 0x16
 7362 0c89 760A0000 		.4byte	.LASF40
 7363 0c8d 01       		.byte	0x1
 7364 0c8e A80A     		.2byte	0xaa8
 7365 0c90 1D010000 		.4byte	0x11d
 7366 0c94 02       		.uleb128 0x2
 7367 0c95 91       		.byte	0x91
 7368 0c96 64       		.sleb128 -28
 7369 0c97 16       		.uleb128 0x16
 7370 0c98 C20A0000 		.4byte	.LASF143
 7371 0c9c 01       		.byte	0x1
 7372 0c9d A90A     		.2byte	0xaa9
 7373 0c9f 07010000 		.4byte	0x107
 7374 0ca3 02       		.uleb128 0x2
 7375 0ca4 91       		.byte	0x91
 7376 0ca5 74       		.sleb128 -12
 7377 0ca6 17       		.uleb128 0x17
 7378 0ca7 14000000 		.4byte	.LBB8
 7379 0cab F4000000 		.4byte	.LBE8-.LBB8
 7380 0caf 16       		.uleb128 0x16
 7381 0cb0 86050000 		.4byte	.LASF106
 7382 0cb4 01       		.byte	0x1
 7383 0cb5 B40A     		.2byte	0xab4
 7384 0cb7 1D080000 		.4byte	0x81d
 7385 0cbb 02       		.uleb128 0x2
 7386 0cbc 91       		.byte	0x91
 7387 0cbd 70       		.sleb128 -16
 7388 0cbe 17       		.uleb128 0x17
 7389 0cbf 28000000 		.4byte	.LBB9
 7390 0cc3 34000000 		.4byte	.LBE9-.LBB9
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 226


 7391 0cc7 16       		.uleb128 0x16
 7392 0cc8 DC050000 		.4byte	.LASF144
 7393 0ccc 01       		.byte	0x1
 7394 0ccd BC0A     		.2byte	0xabc
 7395 0ccf D90C0000 		.4byte	0xcd9
 7396 0cd3 02       		.uleb128 0x2
 7397 0cd4 91       		.byte	0x91
 7398 0cd5 6C       		.sleb128 -20
 7399 0cd6 00       		.byte	0
 7400 0cd7 00       		.byte	0
 7401 0cd8 00       		.byte	0
 7402 0cd9 06       		.uleb128 0x6
 7403 0cda 04       		.byte	0x4
 7404 0cdb 23030000 		.4byte	0x323
 7405 0cdf 20       		.uleb128 0x20
 7406 0ce0 260A0000 		.4byte	.LASF145
 7407 0ce4 01       		.byte	0x1
 7408 0ce5 C20B     		.2byte	0xbc2
 7409 0ce7 00000000 		.4byte	.LFB24
 7410 0ceb A8000000 		.4byte	.LFE24-.LFB24
 7411 0cef 01       		.uleb128 0x1
 7412 0cf0 9C       		.byte	0x9c
 7413 0cf1 280D0000 		.4byte	0xd28
 7414 0cf5 17       		.uleb128 0x17
 7415 0cf6 1C000000 		.4byte	.LBB10
 7416 0cfa 6C000000 		.4byte	.LBE10-.LBB10
 7417 0cfe 16       		.uleb128 0x16
 7418 0cff A70C0000 		.4byte	.LASF146
 7419 0d03 01       		.byte	0x1
 7420 0d04 F70B     		.2byte	0xbf7
 7421 0d06 12010000 		.4byte	0x112
 7422 0d0a 02       		.uleb128 0x2
 7423 0d0b 91       		.byte	0x91
 7424 0d0c 74       		.sleb128 -12
 7425 0d0d 17       		.uleb128 0x17
 7426 0d0e 48000000 		.4byte	.LBB11
 7427 0d12 3A000000 		.4byte	.LBE11-.LBB11
 7428 0d16 16       		.uleb128 0x16
 7429 0d17 33000000 		.4byte	.LASF147
 7430 0d1b 01       		.byte	0x1
 7431 0d1c F70B     		.2byte	0xbf7
 7432 0d1e 280D0000 		.4byte	0xd28
 7433 0d22 02       		.uleb128 0x2
 7434 0d23 91       		.byte	0x91
 7435 0d24 70       		.sleb128 -16
 7436 0d25 00       		.byte	0
 7437 0d26 00       		.byte	0
 7438 0d27 00       		.byte	0
 7439 0d28 07       		.uleb128 0x7
 7440 0d29 D90C0000 		.4byte	0xcd9
 7441 0d2d 1A       		.uleb128 0x1a
 7442 0d2e F9050000 		.4byte	.LASF148
 7443 0d32 01       		.byte	0x1
 7444 0d33 0E0C     		.2byte	0xc0e
 7445 0d35 00000000 		.4byte	.LFB25
 7446 0d39 44000000 		.4byte	.LFE25-.LFB25
 7447 0d3d 01       		.uleb128 0x1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 227


 7448 0d3e 9C       		.byte	0x9c
 7449 0d3f 620D0000 		.4byte	0xd62
 7450 0d43 15       		.uleb128 0x15
 7451 0d44 F9000000 		.4byte	.LASF149
 7452 0d48 01       		.byte	0x1
 7453 0d49 0E0C     		.2byte	0xc0e
 7454 0d4b 280D0000 		.4byte	0xd28
 7455 0d4f 02       		.uleb128 0x2
 7456 0d50 91       		.byte	0x91
 7457 0d51 74       		.sleb128 -12
 7458 0d52 15       		.uleb128 0x15
 7459 0d53 F00C0000 		.4byte	.LASF150
 7460 0d57 01       		.byte	0x1
 7461 0d58 0F0C     		.2byte	0xc0f
 7462 0d5a 1D080000 		.4byte	0x81d
 7463 0d5e 02       		.uleb128 0x2
 7464 0d5f 91       		.byte	0x91
 7465 0d60 70       		.sleb128 -16
 7466 0d61 00       		.byte	0
 7467 0d62 1A       		.uleb128 0x1a
 7468 0d63 610C0000 		.4byte	.LASF151
 7469 0d67 01       		.byte	0x1
 7470 0d68 200C     		.2byte	0xc20
 7471 0d6a 00000000 		.4byte	.LFB26
 7472 0d6e 68000000 		.4byte	.LFE26-.LFB26
 7473 0d72 01       		.uleb128 0x1
 7474 0d73 9C       		.byte	0x9c
 7475 0d74 A60D0000 		.4byte	0xda6
 7476 0d78 15       		.uleb128 0x15
 7477 0d79 F9000000 		.4byte	.LASF149
 7478 0d7d 01       		.byte	0x1
 7479 0d7e 200C     		.2byte	0xc20
 7480 0d80 D90C0000 		.4byte	0xcd9
 7481 0d84 02       		.uleb128 0x2
 7482 0d85 91       		.byte	0x91
 7483 0d86 74       		.sleb128 -12
 7484 0d87 15       		.uleb128 0x15
 7485 0d88 760A0000 		.4byte	.LASF40
 7486 0d8c 01       		.byte	0x1
 7487 0d8d 210C     		.2byte	0xc21
 7488 0d8f 1D080000 		.4byte	0x81d
 7489 0d93 02       		.uleb128 0x2
 7490 0d94 91       		.byte	0x91
 7491 0d95 70       		.sleb128 -16
 7492 0d96 15       		.uleb128 0x15
 7493 0d97 F00C0000 		.4byte	.LASF150
 7494 0d9b 01       		.byte	0x1
 7495 0d9c 220C     		.2byte	0xc22
 7496 0d9e 1D080000 		.4byte	0x81d
 7497 0da2 02       		.uleb128 0x2
 7498 0da3 91       		.byte	0x91
 7499 0da4 6C       		.sleb128 -20
 7500 0da5 00       		.byte	0
 7501 0da6 1A       		.uleb128 0x1a
 7502 0da7 59070000 		.4byte	.LASF152
 7503 0dab 01       		.byte	0x1
 7504 0dac 3C0C     		.2byte	0xc3c
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 228


 7505 0dae 00000000 		.4byte	.LFB27
 7506 0db2 54000000 		.4byte	.LFE27-.LFB27
 7507 0db6 01       		.uleb128 0x1
 7508 0db7 9C       		.byte	0x9c
 7509 0db8 EA0D0000 		.4byte	0xdea
 7510 0dbc 15       		.uleb128 0x15
 7511 0dbd F9000000 		.4byte	.LASF149
 7512 0dc1 01       		.byte	0x1
 7513 0dc2 3C0C     		.2byte	0xc3c
 7514 0dc4 280D0000 		.4byte	0xd28
 7515 0dc8 02       		.uleb128 0x2
 7516 0dc9 91       		.byte	0x91
 7517 0dca 74       		.sleb128 -12
 7518 0dcb 15       		.uleb128 0x15
 7519 0dcc F00C0000 		.4byte	.LASF150
 7520 0dd0 01       		.byte	0x1
 7521 0dd1 3D0C     		.2byte	0xc3d
 7522 0dd3 1D010000 		.4byte	0x11d
 7523 0dd7 02       		.uleb128 0x2
 7524 0dd8 91       		.byte	0x91
 7525 0dd9 70       		.sleb128 -16
 7526 0dda 15       		.uleb128 0x15
 7527 0ddb 8D020000 		.4byte	.LASF153
 7528 0ddf 01       		.byte	0x1
 7529 0de0 3E0C     		.2byte	0xc3e
 7530 0de2 EA0D0000 		.4byte	0xdea
 7531 0de6 02       		.uleb128 0x2
 7532 0de7 91       		.byte	0x91
 7533 0de8 6C       		.sleb128 -20
 7534 0de9 00       		.byte	0
 7535 0dea 07       		.uleb128 0x7
 7536 0deb 07010000 		.4byte	0x107
 7537 0def 14       		.uleb128 0x14
 7538 0df0 8F060000 		.4byte	.LASF154
 7539 0df4 01       		.byte	0x1
 7540 0df5 5D0C     		.2byte	0xc5d
 7541 0df7 07010000 		.4byte	0x107
 7542 0dfb 00000000 		.4byte	.LFB28
 7543 0dff C0000000 		.4byte	.LFE28-.LFB28
 7544 0e03 01       		.uleb128 0x1
 7545 0e04 9C       		.byte	0x9c
 7546 0e05 370E0000 		.4byte	0xe37
 7547 0e09 15       		.uleb128 0x15
 7548 0e0a F9000000 		.4byte	.LASF149
 7549 0e0e 01       		.byte	0x1
 7550 0e0f 5D0C     		.2byte	0xc5d
 7551 0e11 420E0000 		.4byte	0xe42
 7552 0e15 02       		.uleb128 0x2
 7553 0e16 91       		.byte	0x91
 7554 0e17 6C       		.sleb128 -20
 7555 0e18 16       		.uleb128 0x16
 7556 0e19 C5030000 		.4byte	.LASF155
 7557 0e1d 01       		.byte	0x1
 7558 0e1e 5F0C     		.2byte	0xc5f
 7559 0e20 B6050000 		.4byte	0x5b6
 7560 0e24 02       		.uleb128 0x2
 7561 0e25 91       		.byte	0x91
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 229


 7562 0e26 70       		.sleb128 -16
 7563 0e27 16       		.uleb128 0x16
 7564 0e28 850B0000 		.4byte	.LASF89
 7565 0e2c 01       		.byte	0x1
 7566 0e2d 600C     		.2byte	0xc60
 7567 0e2f 07010000 		.4byte	0x107
 7568 0e33 02       		.uleb128 0x2
 7569 0e34 91       		.byte	0x91
 7570 0e35 74       		.sleb128 -12
 7571 0e36 00       		.byte	0
 7572 0e37 06       		.uleb128 0x6
 7573 0e38 04       		.byte	0x4
 7574 0e39 3D0E0000 		.4byte	0xe3d
 7575 0e3d 07       		.uleb128 0x7
 7576 0e3e 23030000 		.4byte	0x323
 7577 0e42 07       		.uleb128 0x7
 7578 0e43 370E0000 		.4byte	0xe37
 7579 0e47 1A       		.uleb128 0x1a
 7580 0e48 54060000 		.4byte	.LASF156
 7581 0e4c 01       		.byte	0x1
 7582 0e4d A10C     		.2byte	0xca1
 7583 0e4f 00000000 		.4byte	.LFB29
 7584 0e53 B0000000 		.4byte	.LFE29-.LFB29
 7585 0e57 01       		.uleb128 0x1
 7586 0e58 9C       		.byte	0x9c
 7587 0e59 8B0E0000 		.4byte	0xe8b
 7588 0e5d 15       		.uleb128 0x15
 7589 0e5e A00E0000 		.4byte	.LASF157
 7590 0e62 01       		.byte	0x1
 7591 0e63 A10C     		.2byte	0xca1
 7592 0e65 1D030000 		.4byte	0x31d
 7593 0e69 02       		.uleb128 0x2
 7594 0e6a 91       		.byte	0x91
 7595 0e6b 6C       		.sleb128 -20
 7596 0e6c 15       		.uleb128 0x15
 7597 0e6d 760A0000 		.4byte	.LASF40
 7598 0e71 01       		.byte	0x1
 7599 0e72 A20C     		.2byte	0xca2
 7600 0e74 1D080000 		.4byte	0x81d
 7601 0e78 02       		.uleb128 0x2
 7602 0e79 91       		.byte	0x91
 7603 0e7a 68       		.sleb128 -24
 7604 0e7b 16       		.uleb128 0x16
 7605 0e7c C5030000 		.4byte	.LASF155
 7606 0e80 01       		.byte	0x1
 7607 0e81 A40C     		.2byte	0xca4
 7608 0e83 B6050000 		.4byte	0x5b6
 7609 0e87 02       		.uleb128 0x2
 7610 0e88 91       		.byte	0x91
 7611 0e89 74       		.sleb128 -12
 7612 0e8a 00       		.byte	0
 7613 0e8b 1A       		.uleb128 0x1a
 7614 0e8c 9F020000 		.4byte	.LASF158
 7615 0e90 01       		.byte	0x1
 7616 0e91 D20C     		.2byte	0xcd2
 7617 0e93 00000000 		.4byte	.LFB30
 7618 0e97 40000000 		.4byte	.LFE30-.LFB30
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 230


 7619 0e9b 01       		.uleb128 0x1
 7620 0e9c 9C       		.byte	0x9c
 7621 0e9d B10E0000 		.4byte	0xeb1
 7622 0ea1 15       		.uleb128 0x15
 7623 0ea2 E6080000 		.4byte	.LASF159
 7624 0ea6 01       		.byte	0x1
 7625 0ea7 D20C     		.2byte	0xcd2
 7626 0ea9 B70E0000 		.4byte	0xeb7
 7627 0ead 02       		.uleb128 0x2
 7628 0eae 91       		.byte	0x91
 7629 0eaf 74       		.sleb128 -12
 7630 0eb0 00       		.byte	0
 7631 0eb1 06       		.uleb128 0x6
 7632 0eb2 04       		.byte	0x4
 7633 0eb3 28040000 		.4byte	0x428
 7634 0eb7 07       		.uleb128 0x7
 7635 0eb8 B10E0000 		.4byte	0xeb1
 7636 0ebc 20       		.uleb128 0x20
 7637 0ebd 25090000 		.4byte	.LASF160
 7638 0ec1 01       		.byte	0x1
 7639 0ec2 DE0C     		.2byte	0xcde
 7640 0ec4 00000000 		.4byte	.LFB31
 7641 0ec8 28000000 		.4byte	.LFE31-.LFB31
 7642 0ecc 01       		.uleb128 0x1
 7643 0ecd 9C       		.byte	0x9c
 7644 0ece E20E0000 		.4byte	0xee2
 7645 0ed2 15       		.uleb128 0x15
 7646 0ed3 E6080000 		.4byte	.LASF159
 7647 0ed7 01       		.byte	0x1
 7648 0ed8 DE0C     		.2byte	0xcde
 7649 0eda B70E0000 		.4byte	0xeb7
 7650 0ede 02       		.uleb128 0x2
 7651 0edf 91       		.byte	0x91
 7652 0ee0 74       		.sleb128 -12
 7653 0ee1 00       		.byte	0
 7654 0ee2 14       		.uleb128 0x14
 7655 0ee3 0F0B0000 		.4byte	.LASF161
 7656 0ee7 01       		.byte	0x1
 7657 0ee8 E60C     		.2byte	0xce6
 7658 0eea 07010000 		.4byte	0x107
 7659 0eee 00000000 		.4byte	.LFB32
 7660 0ef2 B0000000 		.4byte	.LFE32-.LFB32
 7661 0ef6 01       		.uleb128 0x1
 7662 0ef7 9C       		.byte	0x9c
 7663 0ef8 520F0000 		.4byte	0xf52
 7664 0efc 15       		.uleb128 0x15
 7665 0efd E6080000 		.4byte	.LASF159
 7666 0f01 01       		.byte	0x1
 7667 0f02 E60C     		.2byte	0xce6
 7668 0f04 B70E0000 		.4byte	0xeb7
 7669 0f08 02       		.uleb128 0x2
 7670 0f09 91       		.byte	0x91
 7671 0f0a 64       		.sleb128 -28
 7672 0f0b 15       		.uleb128 0x15
 7673 0f0c 990C0000 		.4byte	.LASF162
 7674 0f10 01       		.byte	0x1
 7675 0f11 E70C     		.2byte	0xce7
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 231


 7676 0f13 18080000 		.4byte	0x818
 7677 0f17 02       		.uleb128 0x2
 7678 0f18 91       		.byte	0x91
 7679 0f19 60       		.sleb128 -32
 7680 0f1a 16       		.uleb128 0x16
 7681 0f1b 850B0000 		.4byte	.LASF89
 7682 0f1f 01       		.byte	0x1
 7683 0f20 E90C     		.2byte	0xce9
 7684 0f22 07010000 		.4byte	0x107
 7685 0f26 02       		.uleb128 0x2
 7686 0f27 91       		.byte	0x91
 7687 0f28 74       		.sleb128 -12
 7688 0f29 17       		.uleb128 0x17
 7689 0f2a 26000000 		.4byte	.LBB12
 7690 0f2e 6E000000 		.4byte	.LBE12-.LBB12
 7691 0f32 16       		.uleb128 0x16
 7692 0f33 86050000 		.4byte	.LASF106
 7693 0f37 01       		.byte	0x1
 7694 0f38 F10C     		.2byte	0xcf1
 7695 0f3a 1D080000 		.4byte	0x81d
 7696 0f3e 02       		.uleb128 0x2
 7697 0f3f 91       		.byte	0x91
 7698 0f40 70       		.sleb128 -16
 7699 0f41 16       		.uleb128 0x16
 7700 0f42 F3030000 		.4byte	.LASF163
 7701 0f46 01       		.byte	0x1
 7702 0f47 F20C     		.2byte	0xcf2
 7703 0f49 1D080000 		.4byte	0x81d
 7704 0f4d 02       		.uleb128 0x2
 7705 0f4e 91       		.byte	0x91
 7706 0f4f 6C       		.sleb128 -20
 7707 0f50 00       		.byte	0
 7708 0f51 00       		.byte	0
 7709 0f52 1D       		.uleb128 0x1d
 7710 0f53 960B0000 		.4byte	.LASF164
 7711 0f57 01       		.byte	0x1
 7712 0f58 270D     		.2byte	0xd27
 7713 0f5a 00000000 		.4byte	.LFB33
 7714 0f5e 14000000 		.4byte	.LFE33-.LFB33
 7715 0f62 01       		.uleb128 0x1
 7716 0f63 9C       		.byte	0x9c
 7717 0f64 18       		.uleb128 0x18
 7718 0f65 2C070000 		.4byte	.LASF165
 7719 0f69 01       		.byte	0x1
 7720 0f6a 5F0D     		.2byte	0xd5f
 7721 0f6c 00000000 		.4byte	.LFB34
 7722 0f70 20000000 		.4byte	.LFE34-.LFB34
 7723 0f74 01       		.uleb128 0x1
 7724 0f75 9C       		.byte	0x9c
 7725 0f76 8A0F0000 		.4byte	0xf8a
 7726 0f7a 15       		.uleb128 0x15
 7727 0f7b 690A0000 		.4byte	.LASF85
 7728 0f7f 01       		.byte	0x1
 7729 0f80 5F0D     		.2byte	0xd5f
 7730 0f82 A5000000 		.4byte	0xa5
 7731 0f86 02       		.uleb128 0x2
 7732 0f87 91       		.byte	0x91
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 232


 7733 0f88 74       		.sleb128 -12
 7734 0f89 00       		.byte	0
 7735 0f8a 20       		.uleb128 0x20
 7736 0f8b 53000000 		.4byte	.LASF166
 7737 0f8f 01       		.byte	0x1
 7738 0f90 060E     		.2byte	0xe06
 7739 0f92 00000000 		.4byte	.LFB35
 7740 0f96 50000000 		.4byte	.LFE35-.LFB35
 7741 0f9a 01       		.uleb128 0x1
 7742 0f9b 9C       		.byte	0x9c
 7743 0f9c DD0F0000 		.4byte	0xfdd
 7744 0fa0 15       		.uleb128 0x15
 7745 0fa1 2C080000 		.4byte	.LASF167
 7746 0fa5 01       		.byte	0x1
 7747 0fa6 060E     		.2byte	0xe06
 7748 0fa8 2E030000 		.4byte	0x32e
 7749 0fac 02       		.uleb128 0x2
 7750 0fad 91       		.byte	0x91
 7751 0fae 6C       		.sleb128 -20
 7752 0faf 15       		.uleb128 0x15
 7753 0fb0 4D0B0000 		.4byte	.LASF168
 7754 0fb4 01       		.byte	0x1
 7755 0fb5 070E     		.2byte	0xe07
 7756 0fb7 07010000 		.4byte	0x107
 7757 0fbb 02       		.uleb128 0x2
 7758 0fbc 91       		.byte	0x91
 7759 0fbd 68       		.sleb128 -24
 7760 0fbe 15       		.uleb128 0x15
 7761 0fbf B00E0000 		.4byte	.LASF169
 7762 0fc3 01       		.byte	0x1
 7763 0fc4 080E     		.2byte	0xe08
 7764 0fc6 A5000000 		.4byte	0xa5
 7765 0fca 02       		.uleb128 0x2
 7766 0fcb 91       		.byte	0x91
 7767 0fcc 64       		.sleb128 -28
 7768 0fcd 16       		.uleb128 0x16
 7769 0fce 290E0000 		.4byte	.LASF99
 7770 0fd2 01       		.byte	0x1
 7771 0fd3 0A0E     		.2byte	0xe0a
 7772 0fd5 B6050000 		.4byte	0x5b6
 7773 0fd9 02       		.uleb128 0x2
 7774 0fda 91       		.byte	0x91
 7775 0fdb 74       		.sleb128 -12
 7776 0fdc 00       		.byte	0
 7777 0fdd 1E       		.uleb128 0x1e
 7778 0fde F80B0000 		.4byte	.LASF170
 7779 0fe2 01       		.byte	0x1
 7780 0fe3 190E     		.2byte	0xe19
 7781 0fe5 A5000000 		.4byte	0xa5
 7782 0fe9 00000000 		.4byte	.LFB36
 7783 0fed 48000000 		.4byte	.LFE36-.LFB36
 7784 0ff1 01       		.uleb128 0x1
 7785 0ff2 9C       		.byte	0x9c
 7786 0ff3 34100000 		.4byte	0x1034
 7787 0ff7 15       		.uleb128 0x15
 7788 0ff8 96090000 		.4byte	.LASF138
 7789 0ffc 01       		.byte	0x1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 233


 7790 0ffd 190E     		.2byte	0xe19
 7791 0fff 2E030000 		.4byte	0x32e
 7792 1003 02       		.uleb128 0x2
 7793 1004 91       		.byte	0x91
 7794 1005 6C       		.sleb128 -20
 7795 1006 15       		.uleb128 0x15
 7796 1007 4D0B0000 		.4byte	.LASF168
 7797 100b 01       		.byte	0x1
 7798 100c 1A0E     		.2byte	0xe1a
 7799 100e 07010000 		.4byte	0x107
 7800 1012 02       		.uleb128 0x2
 7801 1013 91       		.byte	0x91
 7802 1014 68       		.sleb128 -24
 7803 1015 16       		.uleb128 0x16
 7804 1016 B5040000 		.4byte	.LASF171
 7805 101a 01       		.byte	0x1
 7806 101b 1C0E     		.2byte	0xe1c
 7807 101d A5000000 		.4byte	0xa5
 7808 1021 02       		.uleb128 0x2
 7809 1022 91       		.byte	0x91
 7810 1023 74       		.sleb128 -12
 7811 1024 16       		.uleb128 0x16
 7812 1025 290E0000 		.4byte	.LASF99
 7813 1029 01       		.byte	0x1
 7814 102a 1D0E     		.2byte	0xe1d
 7815 102c B6050000 		.4byte	0x5b6
 7816 1030 02       		.uleb128 0x2
 7817 1031 91       		.byte	0x91
 7818 1032 70       		.sleb128 -16
 7819 1033 00       		.byte	0
 7820 1034 18       		.uleb128 0x18
 7821 1035 890E0000 		.4byte	.LASF172
 7822 1039 01       		.byte	0x1
 7823 103a 400E     		.2byte	0xe40
 7824 103c 00000000 		.4byte	.LFB37
 7825 1040 88000000 		.4byte	.LFE37-.LFB37
 7826 1044 01       		.uleb128 0x1
 7827 1045 9C       		.byte	0x9c
 7828 1046 5A100000 		.4byte	0x105a
 7829 104a 16       		.uleb128 0x16
 7830 104b 28000000 		.4byte	.LASF58
 7831 104f 01       		.byte	0x1
 7832 1050 420E     		.2byte	0xe42
 7833 1052 12010000 		.4byte	0x112
 7834 1056 02       		.uleb128 0x2
 7835 1057 91       		.byte	0x91
 7836 1058 74       		.sleb128 -12
 7837 1059 00       		.byte	0
 7838 105a 18       		.uleb128 0x18
 7839 105b C60E0000 		.4byte	.LASF173
 7840 105f 01       		.byte	0x1
 7841 1060 600E     		.2byte	0xe60
 7842 1062 00000000 		.4byte	.LFB38
 7843 1066 5C000000 		.4byte	.LFE38-.LFB38
 7844 106a 01       		.uleb128 0x1
 7845 106b 9C       		.byte	0x9c
 7846 106c 8A100000 		.4byte	0x108a
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 234


 7847 1070 17       		.uleb128 0x17
 7848 1071 06000000 		.4byte	.LBB13
 7849 1075 40000000 		.4byte	.LBE13-.LBB13
 7850 1079 16       		.uleb128 0x16
 7851 107a 290E0000 		.4byte	.LASF99
 7852 107e 01       		.byte	0x1
 7853 107f 660E     		.2byte	0xe66
 7854 1081 B6050000 		.4byte	0x5b6
 7855 1085 02       		.uleb128 0x2
 7856 1086 91       		.byte	0x91
 7857 1087 74       		.sleb128 -12
 7858 1088 00       		.byte	0
 7859 1089 00       		.byte	0
 7860 108a 18       		.uleb128 0x18
 7861 108b 0F0D0000 		.4byte	.LASF174
 7862 108f 01       		.byte	0x1
 7863 1090 5C0F     		.2byte	0xf5c
 7864 1092 00000000 		.4byte	.LFB39
 7865 1096 54000000 		.4byte	.LFE39-.LFB39
 7866 109a 01       		.uleb128 0x1
 7867 109b 9C       		.byte	0x9c
 7868 109c B0100000 		.4byte	0x10b0
 7869 10a0 15       		.uleb128 0x15
 7870 10a1 290E0000 		.4byte	.LASF99
 7871 10a5 01       		.byte	0x1
 7872 10a6 5C0F     		.2byte	0xf5c
 7873 10a8 B6050000 		.4byte	0x5b6
 7874 10ac 02       		.uleb128 0x2
 7875 10ad 91       		.byte	0x91
 7876 10ae 74       		.sleb128 -12
 7877 10af 00       		.byte	0
 7878 10b0 21       		.uleb128 0x21
 7879 10b1 79080000 		.4byte	.LASF229
 7880 10b5 01       		.byte	0x1
 7881 10b6 940F     		.2byte	0xf94
 7882 10b8 00000000 		.4byte	.LFB40
 7883 10bc 34000000 		.4byte	.LFE40-.LFB40
 7884 10c0 01       		.uleb128 0x1
 7885 10c1 9C       		.byte	0x9c
 7886 10c2 1E       		.uleb128 0x1e
 7887 10c3 490D0000 		.4byte	.LASF175
 7888 10c7 01       		.byte	0x1
 7889 10c8 AB0F     		.2byte	0xfab
 7890 10ca 2E030000 		.4byte	0x32e
 7891 10ce 00000000 		.4byte	.LFB41
 7892 10d2 1C000000 		.4byte	.LFE41-.LFB41
 7893 10d6 01       		.uleb128 0x1
 7894 10d7 9C       		.byte	0x9c
 7895 10d8 EC100000 		.4byte	0x10ec
 7896 10dc 16       		.uleb128 0x16
 7897 10dd 850B0000 		.4byte	.LASF89
 7898 10e1 01       		.byte	0x1
 7899 10e2 AD0F     		.2byte	0xfad
 7900 10e4 2E030000 		.4byte	0x32e
 7901 10e8 02       		.uleb128 0x2
 7902 10e9 91       		.byte	0x91
 7903 10ea 74       		.sleb128 -12
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 235


 7904 10eb 00       		.byte	0
 7905 10ec 1E       		.uleb128 0x1e
 7906 10ed 9E000000 		.4byte	.LASF176
 7907 10f1 01       		.byte	0x1
 7908 10f2 BC0F     		.2byte	0xfbc
 7909 10f4 07010000 		.4byte	0x107
 7910 10f8 00000000 		.4byte	.LFB42
 7911 10fc 38000000 		.4byte	.LFE42-.LFB42
 7912 1100 01       		.uleb128 0x1
 7913 1101 9C       		.byte	0x9c
 7914 1102 16110000 		.4byte	0x1116
 7915 1106 16       		.uleb128 0x16
 7916 1107 850B0000 		.4byte	.LASF89
 7917 110b 01       		.byte	0x1
 7918 110c BE0F     		.2byte	0xfbe
 7919 110e 07010000 		.4byte	0x107
 7920 1112 02       		.uleb128 0x2
 7921 1113 91       		.byte	0x91
 7922 1114 74       		.sleb128 -12
 7923 1115 00       		.byte	0
 7924 1116 1E       		.uleb128 0x1e
 7925 1117 64090000 		.4byte	.LASF177
 7926 111b 01       		.byte	0x1
 7927 111c 2B12     		.2byte	0x122b
 7928 111e 1D010000 		.4byte	0x11d
 7929 1122 00000000 		.4byte	.LFB43
 7930 1126 2C000000 		.4byte	.LFE43-.LFB43
 7931 112a 01       		.uleb128 0x1
 7932 112b 9C       		.byte	0x9c
 7933 112c 40110000 		.4byte	0x1140
 7934 1130 16       		.uleb128 0x16
 7935 1131 4E030000 		.4byte	.LASF112
 7936 1135 01       		.byte	0x1
 7937 1136 2D12     		.2byte	0x122d
 7938 1138 1D010000 		.4byte	0x11d
 7939 113c 02       		.uleb128 0x2
 7940 113d 91       		.byte	0x91
 7941 113e 74       		.sleb128 -12
 7942 113f 00       		.byte	0
 7943 1140 14       		.uleb128 0x14
 7944 1141 41070000 		.4byte	.LASF178
 7945 1145 01       		.byte	0x1
 7946 1146 4C12     		.2byte	0x124c
 7947 1148 D5000000 		.4byte	0xd5
 7948 114c 00000000 		.4byte	.LFB44
 7949 1150 B8000000 		.4byte	.LFE44-.LFB44
 7950 1154 01       		.uleb128 0x1
 7951 1155 9C       		.byte	0x9c
 7952 1156 97110000 		.4byte	0x1197
 7953 115a 15       		.uleb128 0x15
 7954 115b 8B0C0000 		.4byte	.LASF179
 7955 115f 01       		.byte	0x1
 7956 1160 4C12     		.2byte	0x124c
 7957 1162 12010000 		.4byte	0x112
 7958 1166 02       		.uleb128 0x2
 7959 1167 91       		.byte	0x91
 7960 1168 6C       		.sleb128 -20
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 236


 7961 1169 15       		.uleb128 0x15
 7962 116a E1030000 		.4byte	.LASF180
 7963 116e 01       		.byte	0x1
 7964 116f 4D12     		.2byte	0x124d
 7965 1171 07010000 		.4byte	0x107
 7966 1175 02       		.uleb128 0x2
 7967 1176 91       		.byte	0x91
 7968 1177 68       		.sleb128 -24
 7969 1178 15       		.uleb128 0x15
 7970 1179 F00C0000 		.4byte	.LASF150
 7971 117d 01       		.byte	0x1
 7972 117e 4E12     		.2byte	0x124e
 7973 1180 1D010000 		.4byte	0x11d
 7974 1184 02       		.uleb128 0x2
 7975 1185 91       		.byte	0x91
 7976 1186 64       		.sleb128 -28
 7977 1187 16       		.uleb128 0x16
 7978 1188 37080000 		.4byte	.LASF181
 7979 118c 01       		.byte	0x1
 7980 118d 5012     		.2byte	0x1250
 7981 118f D5000000 		.4byte	0xd5
 7982 1193 02       		.uleb128 0x2
 7983 1194 91       		.byte	0x91
 7984 1195 74       		.sleb128 -12
 7985 1196 00       		.byte	0
 7986 1197 14       		.uleb128 0x14
 7987 1198 EB060000 		.4byte	.LASF182
 7988 119c 01       		.byte	0x1
 7989 119d 9412     		.2byte	0x1294
 7990 119f 07010000 		.4byte	0x107
 7991 11a3 00000000 		.4byte	.LFB45
 7992 11a7 EC000000 		.4byte	.LFE45-.LFB45
 7993 11ab 01       		.uleb128 0x1
 7994 11ac 9C       		.byte	0x9c
 7995 11ad 0C120000 		.4byte	0x120c
 7996 11b1 15       		.uleb128 0x15
 7997 11b2 8B0C0000 		.4byte	.LASF179
 7998 11b6 01       		.byte	0x1
 7999 11b7 9412     		.2byte	0x1294
 8000 11b9 12010000 		.4byte	0x112
 8001 11bd 02       		.uleb128 0x2
 8002 11be 91       		.byte	0x91
 8003 11bf 6C       		.sleb128 -20
 8004 11c0 15       		.uleb128 0x15
 8005 11c1 5D040000 		.4byte	.LASF183
 8006 11c5 01       		.byte	0x1
 8007 11c6 9512     		.2byte	0x1295
 8008 11c8 D5000000 		.4byte	0xd5
 8009 11cc 02       		.uleb128 0x2
 8010 11cd 91       		.byte	0x91
 8011 11ce 68       		.sleb128 -24
 8012 11cf 15       		.uleb128 0x15
 8013 11d0 75000000 		.4byte	.LASF184
 8014 11d4 01       		.byte	0x1
 8015 11d5 9612     		.2byte	0x1296
 8016 11d7 D5000000 		.4byte	0xd5
 8017 11db 02       		.uleb128 0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 237


 8018 11dc 91       		.byte	0x91
 8019 11dd 64       		.sleb128 -28
 8020 11de 15       		.uleb128 0x15
 8021 11df 700B0000 		.4byte	.LASF185
 8022 11e3 01       		.byte	0x1
 8023 11e4 9712     		.2byte	0x1297
 8024 11e6 0C120000 		.4byte	0x120c
 8025 11ea 02       		.uleb128 0x2
 8026 11eb 91       		.byte	0x91
 8027 11ec 60       		.sleb128 -32
 8028 11ed 15       		.uleb128 0x15
 8029 11ee F00C0000 		.4byte	.LASF150
 8030 11f2 01       		.byte	0x1
 8031 11f3 9812     		.2byte	0x1298
 8032 11f5 1D010000 		.4byte	0x11d
 8033 11f9 02       		.uleb128 0x2
 8034 11fa 91       		.byte	0x91
 8035 11fb 00       		.sleb128 0
 8036 11fc 16       		.uleb128 0x16
 8037 11fd 850B0000 		.4byte	.LASF89
 8038 1201 01       		.byte	0x1
 8039 1202 9A12     		.2byte	0x129a
 8040 1204 07010000 		.4byte	0x107
 8041 1208 02       		.uleb128 0x2
 8042 1209 91       		.byte	0x91
 8043 120a 74       		.sleb128 -12
 8044 120b 00       		.byte	0
 8045 120c 06       		.uleb128 0x6
 8046 120d 04       		.byte	0x4
 8047 120e D5000000 		.4byte	0xd5
 8048 1212 14       		.uleb128 0x14
 8049 1213 B2030000 		.4byte	.LASF186
 8050 1217 01       		.byte	0x1
 8051 1218 EA12     		.2byte	0x12ea
 8052 121a 07010000 		.4byte	0x107
 8053 121e 00000000 		.4byte	.LFB46
 8054 1222 78010000 		.4byte	.LFE46-.LFB46
 8055 1226 01       		.uleb128 0x1
 8056 1227 9C       		.byte	0x9c
 8057 1228 A5120000 		.4byte	0x12a5
 8058 122c 15       		.uleb128 0x15
 8059 122d AE090000 		.4byte	.LASF187
 8060 1231 01       		.byte	0x1
 8061 1232 EA12     		.2byte	0x12ea
 8062 1234 2E030000 		.4byte	0x32e
 8063 1238 02       		.uleb128 0x2
 8064 1239 91       		.byte	0x91
 8065 123a 64       		.sleb128 -28
 8066 123b 15       		.uleb128 0x15
 8067 123c E00C0000 		.4byte	.LASF188
 8068 1240 01       		.byte	0x1
 8069 1241 EB12     		.2byte	0x12eb
 8070 1243 12010000 		.4byte	0x112
 8071 1247 02       		.uleb128 0x2
 8072 1248 91       		.byte	0x91
 8073 1249 60       		.sleb128 -32
 8074 124a 15       		.uleb128 0x15
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 238


 8075 124b F80A0000 		.4byte	.LASF189
 8076 124f 01       		.byte	0x1
 8077 1250 EC12     		.2byte	0x12ec
 8078 1252 D5000000 		.4byte	0xd5
 8079 1256 02       		.uleb128 0x2
 8080 1257 91       		.byte	0x91
 8081 1258 5C       		.sleb128 -36
 8082 1259 15       		.uleb128 0x15
 8083 125a 5C090000 		.4byte	.LASF190
 8084 125e 01       		.byte	0x1
 8085 125f ED12     		.2byte	0x12ed
 8086 1261 F8030000 		.4byte	0x3f8
 8087 1265 02       		.uleb128 0x2
 8088 1266 91       		.byte	0x91
 8089 1267 5B       		.sleb128 -37
 8090 1268 15       		.uleb128 0x15
 8091 1269 C9080000 		.4byte	.LASF191
 8092 126d 01       		.byte	0x1
 8093 126e EE12     		.2byte	0x12ee
 8094 1270 0C120000 		.4byte	0x120c
 8095 1274 02       		.uleb128 0x2
 8096 1275 91       		.byte	0x91
 8097 1276 00       		.sleb128 0
 8098 1277 16       		.uleb128 0x16
 8099 1278 290E0000 		.4byte	.LASF99
 8100 127c 01       		.byte	0x1
 8101 127d F012     		.2byte	0x12f0
 8102 127f B6050000 		.4byte	0x5b6
 8103 1283 02       		.uleb128 0x2
 8104 1284 91       		.byte	0x91
 8105 1285 70       		.sleb128 -16
 8106 1286 16       		.uleb128 0x16
 8107 1287 850B0000 		.4byte	.LASF89
 8108 128b 01       		.byte	0x1
 8109 128c F112     		.2byte	0x12f1
 8110 128e 07010000 		.4byte	0x107
 8111 1292 02       		.uleb128 0x2
 8112 1293 91       		.byte	0x91
 8113 1294 74       		.sleb128 -12
 8114 1295 16       		.uleb128 0x16
 8115 1296 E3090000 		.4byte	.LASF192
 8116 129a 01       		.byte	0x1
 8117 129b F212     		.2byte	0x12f2
 8118 129d BF000000 		.4byte	0xbf
 8119 12a1 02       		.uleb128 0x2
 8120 12a2 91       		.byte	0x91
 8121 12a3 6F       		.sleb128 -17
 8122 12a4 00       		.byte	0
 8123 12a5 14       		.uleb128 0x14
 8124 12a6 B4020000 		.4byte	.LASF193
 8125 12aa 01       		.byte	0x1
 8126 12ab 6513     		.2byte	0x1365
 8127 12ad 07010000 		.4byte	0x107
 8128 12b1 00000000 		.4byte	.LFB47
 8129 12b5 B4010000 		.4byte	.LFE47-.LFB47
 8130 12b9 01       		.uleb128 0x1
 8131 12ba 9C       		.byte	0x9c
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 239


 8132 12bb 56130000 		.4byte	0x1356
 8133 12bf 15       		.uleb128 0x15
 8134 12c0 AE090000 		.4byte	.LASF187
 8135 12c4 01       		.byte	0x1
 8136 12c5 6513     		.2byte	0x1365
 8137 12c7 2E030000 		.4byte	0x32e
 8138 12cb 02       		.uleb128 0x2
 8139 12cc 91       		.byte	0x91
 8140 12cd 64       		.sleb128 -28
 8141 12ce 15       		.uleb128 0x15
 8142 12cf E00C0000 		.4byte	.LASF188
 8143 12d3 01       		.byte	0x1
 8144 12d4 6613     		.2byte	0x1366
 8145 12d6 12010000 		.4byte	0x112
 8146 12da 02       		.uleb128 0x2
 8147 12db 91       		.byte	0x91
 8148 12dc 60       		.sleb128 -32
 8149 12dd 15       		.uleb128 0x15
 8150 12de F80A0000 		.4byte	.LASF189
 8151 12e2 01       		.byte	0x1
 8152 12e3 6713     		.2byte	0x1367
 8153 12e5 D5000000 		.4byte	0xd5
 8154 12e9 02       		.uleb128 0x2
 8155 12ea 91       		.byte	0x91
 8156 12eb 5C       		.sleb128 -36
 8157 12ec 15       		.uleb128 0x15
 8158 12ed 5C090000 		.4byte	.LASF190
 8159 12f1 01       		.byte	0x1
 8160 12f2 6813     		.2byte	0x1368
 8161 12f4 F8030000 		.4byte	0x3f8
 8162 12f8 02       		.uleb128 0x2
 8163 12f9 91       		.byte	0x91
 8164 12fa 5B       		.sleb128 -37
 8165 12fb 15       		.uleb128 0x15
 8166 12fc C9080000 		.4byte	.LASF191
 8167 1300 01       		.byte	0x1
 8168 1301 6913     		.2byte	0x1369
 8169 1303 0C120000 		.4byte	0x120c
 8170 1307 02       		.uleb128 0x2
 8171 1308 91       		.byte	0x91
 8172 1309 00       		.sleb128 0
 8173 130a 15       		.uleb128 0x15
 8174 130b B5000000 		.4byte	.LASF194
 8175 130f 01       		.byte	0x1
 8176 1310 6A13     		.2byte	0x136a
 8177 1312 56130000 		.4byte	0x1356
 8178 1316 02       		.uleb128 0x2
 8179 1317 91       		.byte	0x91
 8180 1318 04       		.sleb128 4
 8181 1319 16       		.uleb128 0x16
 8182 131a 290E0000 		.4byte	.LASF99
 8183 131e 01       		.byte	0x1
 8184 131f 6C13     		.2byte	0x136c
 8185 1321 B6050000 		.4byte	0x5b6
 8186 1325 02       		.uleb128 0x2
 8187 1326 91       		.byte	0x91
 8188 1327 70       		.sleb128 -16
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 240


 8189 1328 16       		.uleb128 0x16
 8190 1329 E3090000 		.4byte	.LASF192
 8191 132d 01       		.byte	0x1
 8192 132e 6D13     		.2byte	0x136d
 8193 1330 BF000000 		.4byte	0xbf
 8194 1334 02       		.uleb128 0x2
 8195 1335 91       		.byte	0x91
 8196 1336 6B       		.sleb128 -21
 8197 1337 16       		.uleb128 0x16
 8198 1338 850B0000 		.4byte	.LASF89
 8199 133c 01       		.byte	0x1
 8200 133d 6E13     		.2byte	0x136e
 8201 133f 07010000 		.4byte	0x107
 8202 1343 02       		.uleb128 0x2
 8203 1344 91       		.byte	0x91
 8204 1345 74       		.sleb128 -12
 8205 1346 16       		.uleb128 0x16
 8206 1347 75030000 		.4byte	.LASF125
 8207 134b 01       		.byte	0x1
 8208 134c 6F13     		.2byte	0x136f
 8209 134e 12010000 		.4byte	0x112
 8210 1352 02       		.uleb128 0x2
 8211 1353 91       		.byte	0x91
 8212 1354 6C       		.sleb128 -20
 8213 1355 00       		.byte	0
 8214 1356 06       		.uleb128 0x6
 8215 1357 04       		.byte	0x4
 8216 1358 07010000 		.4byte	0x107
 8217 135c 1A       		.uleb128 0x1a
 8218 135d 350C0000 		.4byte	.LASF195
 8219 1361 01       		.byte	0x1
 8220 1362 F013     		.2byte	0x13f0
 8221 1364 00000000 		.4byte	.LFB48
 8222 1368 1C010000 		.4byte	.LFE48-.LFB48
 8223 136c 01       		.uleb128 0x1
 8224 136d 9C       		.byte	0x9c
 8225 136e CD130000 		.4byte	0x13cd
 8226 1372 15       		.uleb128 0x15
 8227 1373 AE090000 		.4byte	.LASF187
 8228 1377 01       		.byte	0x1
 8229 1378 F013     		.2byte	0x13f0
 8230 137a 2E030000 		.4byte	0x32e
 8231 137e 02       		.uleb128 0x2
 8232 137f 91       		.byte	0x91
 8233 1380 64       		.sleb128 -28
 8234 1381 15       		.uleb128 0x15
 8235 1382 E00C0000 		.4byte	.LASF188
 8236 1386 01       		.byte	0x1
 8237 1387 F113     		.2byte	0x13f1
 8238 1389 12010000 		.4byte	0x112
 8239 138d 02       		.uleb128 0x2
 8240 138e 91       		.byte	0x91
 8241 138f 60       		.sleb128 -32
 8242 1390 15       		.uleb128 0x15
 8243 1391 B5000000 		.4byte	.LASF194
 8244 1395 01       		.byte	0x1
 8245 1396 F213     		.2byte	0x13f2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 241


 8246 1398 56130000 		.4byte	0x1356
 8247 139c 02       		.uleb128 0x2
 8248 139d 91       		.byte	0x91
 8249 139e 5C       		.sleb128 -36
 8250 139f 16       		.uleb128 0x16
 8251 13a0 290E0000 		.4byte	.LASF99
 8252 13a4 01       		.byte	0x1
 8253 13a5 F413     		.2byte	0x13f4
 8254 13a7 B6050000 		.4byte	0x5b6
 8255 13ab 02       		.uleb128 0x2
 8256 13ac 91       		.byte	0x91
 8257 13ad 74       		.sleb128 -12
 8258 13ae 16       		.uleb128 0x16
 8259 13af E3090000 		.4byte	.LASF192
 8260 13b3 01       		.byte	0x1
 8261 13b4 F513     		.2byte	0x13f5
 8262 13b6 BF000000 		.4byte	0xbf
 8263 13ba 02       		.uleb128 0x2
 8264 13bb 91       		.byte	0x91
 8265 13bc 6F       		.sleb128 -17
 8266 13bd 16       		.uleb128 0x16
 8267 13be 75030000 		.4byte	.LASF125
 8268 13c2 01       		.byte	0x1
 8269 13c3 F613     		.2byte	0x13f6
 8270 13c5 12010000 		.4byte	0x112
 8271 13c9 02       		.uleb128 0x2
 8272 13ca 91       		.byte	0x91
 8273 13cb 70       		.sleb128 -16
 8274 13cc 00       		.byte	0
 8275 13cd 14       		.uleb128 0x14
 8276 13ce 2F0E0000 		.4byte	.LASF196
 8277 13d2 01       		.byte	0x1
 8278 13d3 4914     		.2byte	0x1449
 8279 13d5 07010000 		.4byte	0x107
 8280 13d9 00000000 		.4byte	.LFB49
 8281 13dd 6C000000 		.4byte	.LFE49-.LFB49
 8282 13e1 01       		.uleb128 0x1
 8283 13e2 9C       		.byte	0x9c
 8284 13e3 24140000 		.4byte	0x1424
 8285 13e7 15       		.uleb128 0x15
 8286 13e8 BE070000 		.4byte	.LASF111
 8287 13ec 01       		.byte	0x1
 8288 13ed 4914     		.2byte	0x1449
 8289 13ef 2E030000 		.4byte	0x32e
 8290 13f3 02       		.uleb128 0x2
 8291 13f4 91       		.byte	0x91
 8292 13f5 6C       		.sleb128 -20
 8293 13f6 15       		.uleb128 0x15
 8294 13f7 10070000 		.4byte	.LASF197
 8295 13fb 01       		.byte	0x1
 8296 13fc 4A14     		.2byte	0x144a
 8297 13fe 12010000 		.4byte	0x112
 8298 1402 02       		.uleb128 0x2
 8299 1403 91       		.byte	0x91
 8300 1404 68       		.sleb128 -24
 8301 1405 16       		.uleb128 0x16
 8302 1406 290E0000 		.4byte	.LASF99
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 242


 8303 140a 01       		.byte	0x1
 8304 140b 4C14     		.2byte	0x144c
 8305 140d B6050000 		.4byte	0x5b6
 8306 1411 02       		.uleb128 0x2
 8307 1412 91       		.byte	0x91
 8308 1413 70       		.sleb128 -16
 8309 1414 16       		.uleb128 0x16
 8310 1415 850B0000 		.4byte	.LASF89
 8311 1419 01       		.byte	0x1
 8312 141a 4D14     		.2byte	0x144d
 8313 141c 07010000 		.4byte	0x107
 8314 1420 02       		.uleb128 0x2
 8315 1421 91       		.byte	0x91
 8316 1422 74       		.sleb128 -12
 8317 1423 00       		.byte	0
 8318 1424 14       		.uleb128 0x14
 8319 1425 40080000 		.4byte	.LASF198
 8320 1429 01       		.byte	0x1
 8321 142a 6B14     		.2byte	0x146b
 8322 142c D5000000 		.4byte	0xd5
 8323 1430 00000000 		.4byte	.LFB50
 8324 1434 5C000000 		.4byte	.LFE50-.LFB50
 8325 1438 01       		.uleb128 0x1
 8326 1439 9C       		.byte	0x9c
 8327 143a 8A140000 		.4byte	0x148a
 8328 143e 15       		.uleb128 0x15
 8329 143f BE070000 		.4byte	.LASF111
 8330 1443 01       		.byte	0x1
 8331 1444 6B14     		.2byte	0x146b
 8332 1446 2E030000 		.4byte	0x32e
 8333 144a 02       		.uleb128 0x2
 8334 144b 91       		.byte	0x91
 8335 144c 6C       		.sleb128 -20
 8336 144d 15       		.uleb128 0x15
 8337 144e 10070000 		.4byte	.LASF197
 8338 1452 01       		.byte	0x1
 8339 1453 6C14     		.2byte	0x146c
 8340 1455 12010000 		.4byte	0x112
 8341 1459 02       		.uleb128 0x2
 8342 145a 91       		.byte	0x91
 8343 145b 68       		.sleb128 -24
 8344 145c 15       		.uleb128 0x15
 8345 145d 35010000 		.4byte	.LASF199
 8346 1461 01       		.byte	0x1
 8347 1462 6D14     		.2byte	0x146d
 8348 1464 D5000000 		.4byte	0xd5
 8349 1468 02       		.uleb128 0x2
 8350 1469 91       		.byte	0x91
 8351 146a 64       		.sleb128 -28
 8352 146b 16       		.uleb128 0x16
 8353 146c 290E0000 		.4byte	.LASF99
 8354 1470 01       		.byte	0x1
 8355 1471 6F14     		.2byte	0x146f
 8356 1473 B6050000 		.4byte	0x5b6
 8357 1477 02       		.uleb128 0x2
 8358 1478 91       		.byte	0x91
 8359 1479 74       		.sleb128 -12
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 243


 8360 147a 16       		.uleb128 0x16
 8361 147b 37080000 		.4byte	.LASF181
 8362 147f 01       		.byte	0x1
 8363 1480 7014     		.2byte	0x1470
 8364 1482 D5000000 		.4byte	0xd5
 8365 1486 02       		.uleb128 0x2
 8366 1487 91       		.byte	0x91
 8367 1488 70       		.sleb128 -16
 8368 1489 00       		.byte	0
 8369 148a 18       		.uleb128 0x18
 8370 148b 0A0E0000 		.4byte	.LASF200
 8371 148f 01       		.byte	0x1
 8372 1490 8F14     		.2byte	0x148f
 8373 1492 00000000 		.4byte	.LFB51
 8374 1496 A8000000 		.4byte	.LFE51-.LFB51
 8375 149a 01       		.uleb128 0x1
 8376 149b 9C       		.byte	0x9c
 8377 149c DD140000 		.4byte	0x14dd
 8378 14a0 15       		.uleb128 0x15
 8379 14a1 F00C0000 		.4byte	.LASF150
 8380 14a5 01       		.byte	0x1
 8381 14a6 8F14     		.2byte	0x148f
 8382 14a8 1D010000 		.4byte	0x11d
 8383 14ac 02       		.uleb128 0x2
 8384 14ad 91       		.byte	0x91
 8385 14ae 6C       		.sleb128 -20
 8386 14af 15       		.uleb128 0x15
 8387 14b0 E20B0000 		.4byte	.LASF201
 8388 14b4 01       		.byte	0x1
 8389 14b5 9014     		.2byte	0x1490
 8390 14b7 EA0D0000 		.4byte	0xdea
 8391 14bb 02       		.uleb128 0x2
 8392 14bc 91       		.byte	0x91
 8393 14bd 68       		.sleb128 -24
 8394 14be 16       		.uleb128 0x16
 8395 14bf EF0D0000 		.4byte	.LASF103
 8396 14c3 01       		.byte	0x1
 8397 14c4 9214     		.2byte	0x1492
 8398 14c6 1D010000 		.4byte	0x11d
 8399 14ca 02       		.uleb128 0x2
 8400 14cb 91       		.byte	0x91
 8401 14cc 70       		.sleb128 -16
 8402 14cd 16       		.uleb128 0x16
 8403 14ce 86050000 		.4byte	.LASF106
 8404 14d2 01       		.byte	0x1
 8405 14d3 9314     		.2byte	0x1493
 8406 14d5 1D080000 		.4byte	0x81d
 8407 14d9 02       		.uleb128 0x2
 8408 14da 91       		.byte	0x91
 8409 14db 74       		.sleb128 -12
 8410 14dc 00       		.byte	0
 8411 14dd 0C       		.uleb128 0xc
 8412 14de 23030000 		.4byte	0x323
 8413 14e2 ED140000 		.4byte	0x14ed
 8414 14e6 0D       		.uleb128 0xd
 8415 14e7 9E000000 		.4byte	0x9e
 8416 14eb 04       		.byte	0x4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 244


 8417 14ec 00       		.byte	0
 8418 14ed 16       		.uleb128 0x16
 8419 14ee 79010000 		.4byte	.LASF202
 8420 14f2 01       		.byte	0x1
 8421 14f3 5801     		.2byte	0x158
 8422 14f5 DD140000 		.4byte	0x14dd
 8423 14f9 05       		.uleb128 0x5
 8424 14fa 03       		.byte	0x3
 8425 14fb 04000000 		.4byte	pxReadyTasksLists
 8426 14ff 16       		.uleb128 0x16
 8427 1500 EE020000 		.4byte	.LASF203
 8428 1504 01       		.byte	0x1
 8429 1505 5901     		.2byte	0x159
 8430 1507 23030000 		.4byte	0x323
 8431 150b 05       		.uleb128 0x5
 8432 150c 03       		.byte	0x3
 8433 150d 68000000 		.4byte	xDelayedTaskList1
 8434 1511 16       		.uleb128 0x16
 8435 1512 00030000 		.4byte	.LASF204
 8436 1516 01       		.byte	0x1
 8437 1517 5A01     		.2byte	0x15a
 8438 1519 23030000 		.4byte	0x323
 8439 151d 05       		.uleb128 0x5
 8440 151e 03       		.byte	0x3
 8441 151f 7C000000 		.4byte	xDelayedTaskList2
 8442 1523 16       		.uleb128 0x16
 8443 1524 990A0000 		.4byte	.LASF205
 8444 1528 01       		.byte	0x1
 8445 1529 5B01     		.2byte	0x15b
 8446 152b 35150000 		.4byte	0x1535
 8447 152f 05       		.uleb128 0x5
 8448 1530 03       		.byte	0x3
 8449 1531 90000000 		.4byte	pxDelayedTaskList
 8450 1535 11       		.uleb128 0x11
 8451 1536 D90C0000 		.4byte	0xcd9
 8452 153a 16       		.uleb128 0x16
 8453 153b B9050000 		.4byte	.LASF206
 8454 153f 01       		.byte	0x1
 8455 1540 5C01     		.2byte	0x15c
 8456 1542 35150000 		.4byte	0x1535
 8457 1546 05       		.uleb128 0x5
 8458 1547 03       		.byte	0x3
 8459 1548 94000000 		.4byte	pxOverflowDelayedTaskList
 8460 154c 16       		.uleb128 0x16
 8461 154d 72040000 		.4byte	.LASF207
 8462 1551 01       		.byte	0x1
 8463 1552 5D01     		.2byte	0x15d
 8464 1554 23030000 		.4byte	0x323
 8465 1558 05       		.uleb128 0x5
 8466 1559 03       		.byte	0x3
 8467 155a 98000000 		.4byte	xPendingReadyList
 8468 155e 16       		.uleb128 0x16
 8469 155f 76060000 		.4byte	.LASF208
 8470 1563 01       		.byte	0x1
 8471 1564 6101     		.2byte	0x161
 8472 1566 23030000 		.4byte	0x323
 8473 156a 05       		.uleb128 0x5
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 245


 8474 156b 03       		.byte	0x3
 8475 156c AC000000 		.4byte	xTasksWaitingTermination
 8476 1570 16       		.uleb128 0x16
 8477 1571 43010000 		.4byte	.LASF209
 8478 1575 01       		.byte	0x1
 8479 1576 6201     		.2byte	0x162
 8480 1578 18030000 		.4byte	0x318
 8481 157c 05       		.uleb128 0x5
 8482 157d 03       		.byte	0x3
 8483 157e C0000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8484 1582 16       		.uleb128 0x16
 8485 1583 96050000 		.4byte	.LASF210
 8486 1587 01       		.byte	0x1
 8487 1588 6801     		.2byte	0x168
 8488 158a 23030000 		.4byte	0x323
 8489 158e 05       		.uleb128 0x5
 8490 158f 03       		.byte	0x3
 8491 1590 C4000000 		.4byte	xSuspendedTaskList
 8492 1594 16       		.uleb128 0x16
 8493 1595 AA0D0000 		.4byte	.LASF211
 8494 1599 01       		.byte	0x1
 8495 159a 7301     		.2byte	0x173
 8496 159c 18030000 		.4byte	0x318
 8497 15a0 05       		.uleb128 0x5
 8498 15a1 03       		.byte	0x3
 8499 15a2 D8000000 		.4byte	uxCurrentNumberOfTasks
 8500 15a6 16       		.uleb128 0x16
 8501 15a7 51050000 		.4byte	.LASF212
 8502 15ab 01       		.byte	0x1
 8503 15ac 7401     		.2byte	0x174
 8504 15ae B8150000 		.4byte	0x15b8
 8505 15b2 05       		.uleb128 0x5
 8506 15b3 03       		.byte	0x3
 8507 15b4 DC000000 		.4byte	xTickCount
 8508 15b8 11       		.uleb128 0x11
 8509 15b9 1D010000 		.4byte	0x11d
 8510 15bd 16       		.uleb128 0x16
 8511 15be D9000000 		.4byte	.LASF213
 8512 15c2 01       		.byte	0x1
 8513 15c3 7501     		.2byte	0x175
 8514 15c5 18030000 		.4byte	0x318
 8515 15c9 05       		.uleb128 0x5
 8516 15ca 03       		.byte	0x3
 8517 15cb E0000000 		.4byte	uxTopReadyPriority
 8518 15cf 16       		.uleb128 0x16
 8519 15d0 05010000 		.4byte	.LASF214
 8520 15d4 01       		.byte	0x1
 8521 15d5 7601     		.2byte	0x176
 8522 15d7 E1150000 		.4byte	0x15e1
 8523 15db 05       		.uleb128 0x5
 8524 15dc 03       		.byte	0x3
 8525 15dd E4000000 		.4byte	xSchedulerRunning
 8526 15e1 11       		.uleb128 0x11
 8527 15e2 07010000 		.4byte	0x107
 8528 15e6 16       		.uleb128 0x16
 8529 15e7 630D0000 		.4byte	.LASF215
 8530 15eb 01       		.byte	0x1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 246


 8531 15ec 7701     		.2byte	0x177
 8532 15ee B8150000 		.4byte	0x15b8
 8533 15f2 05       		.uleb128 0x5
 8534 15f3 03       		.byte	0x3
 8535 15f4 E8000000 		.4byte	xPendedTicks
 8536 15f8 16       		.uleb128 0x16
 8537 15f9 FC0E0000 		.4byte	.LASF216
 8538 15fd 01       		.byte	0x1
 8539 15fe 7801     		.2byte	0x178
 8540 1600 E1150000 		.4byte	0x15e1
 8541 1604 05       		.uleb128 0x5
 8542 1605 03       		.byte	0x3
 8543 1606 EC000000 		.4byte	xYieldPending
 8544 160a 16       		.uleb128 0x16
 8545 160b 390A0000 		.4byte	.LASF217
 8546 160f 01       		.byte	0x1
 8547 1610 7901     		.2byte	0x179
 8548 1612 E1150000 		.4byte	0x15e1
 8549 1616 05       		.uleb128 0x5
 8550 1617 03       		.byte	0x3
 8551 1618 F0000000 		.4byte	xNumOfOverflows
 8552 161c 16       		.uleb128 0x16
 8553 161d 42090000 		.4byte	.LASF218
 8554 1621 01       		.byte	0x1
 8555 1622 7A01     		.2byte	0x17a
 8556 1624 12010000 		.4byte	0x112
 8557 1628 05       		.uleb128 0x5
 8558 1629 03       		.byte	0x3
 8559 162a F4000000 		.4byte	uxTaskNumber
 8560 162e 16       		.uleb128 0x16
 8561 162f ED070000 		.4byte	.LASF219
 8562 1633 01       		.byte	0x1
 8563 1634 7B01     		.2byte	0x17b
 8564 1636 B8150000 		.4byte	0x15b8
 8565 163a 05       		.uleb128 0x5
 8566 163b 03       		.byte	0x3
 8567 163c F8000000 		.4byte	xNextTaskUnblockTime
 8568 1640 16       		.uleb128 0x16
 8569 1641 490A0000 		.4byte	.LASF220
 8570 1645 01       		.byte	0x1
 8571 1646 7C01     		.2byte	0x17c
 8572 1648 2E030000 		.4byte	0x32e
 8573 164c 05       		.uleb128 0x5
 8574 164d 03       		.byte	0x3
 8575 164e FC000000 		.4byte	xIdleTaskHandle
 8576 1652 16       		.uleb128 0x16
 8577 1653 4C0E0000 		.4byte	.LASF221
 8578 1657 01       		.byte	0x1
 8579 1658 8B01     		.2byte	0x18b
 8580 165a 18030000 		.4byte	0x318
 8581 165e 05       		.uleb128 0x5
 8582 165f 03       		.byte	0x3
 8583 1660 00010000 		.4byte	uxSchedulerSuspended
 8584 1664 22       		.uleb128 0x22
 8585 1665 7800     		.ascii	"x\000"
 8586 1667 0A       		.byte	0xa
 8587 1668 04       		.byte	0x4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 247


 8588 1669 CA000000 		.4byte	0xca
 8589 166d 05       		.uleb128 0x5
 8590 166e 03       		.byte	0x3
 8591 166f 00000000 		.4byte	x
 8592 1673 23       		.uleb128 0x23
 8593 1674 9D0D0000 		.4byte	.LASF222
 8594 1678 01       		.byte	0x1
 8595 1679 5201     		.2byte	0x152
 8596 167b 85160000 		.4byte	0x1685
 8597 167f 05       		.uleb128 0x5
 8598 1680 03       		.byte	0x3
 8599 1681 00000000 		.4byte	pxCurrentTCB
 8600 1685 11       		.uleb128 0x11
 8601 1686 B6050000 		.4byte	0x5b6
 8602 168a 23       		.uleb128 0x23
 8603 168b D1040000 		.4byte	.LASF223
 8604 168f 01       		.byte	0x1
 8605 1690 8101     		.2byte	0x181
 8606 1692 A1160000 		.4byte	0x16a1
 8607 1696 05       		.uleb128 0x5
 8608 1697 03       		.byte	0x3
 8609 1698 00000000 		.4byte	uxTopUsedPriority
 8610 169c 07       		.uleb128 0x7
 8611 169d 12010000 		.4byte	0x112
 8612 16a1 11       		.uleb128 0x11
 8613 16a2 9C160000 		.4byte	0x169c
 8614 16a6 00       		.byte	0
 8615              		.section	.debug_abbrev,"",%progbits
 8616              	.Ldebug_abbrev0:
 8617 0000 01       		.uleb128 0x1
 8618 0001 11       		.uleb128 0x11
 8619 0002 01       		.byte	0x1
 8620 0003 25       		.uleb128 0x25
 8621 0004 0E       		.uleb128 0xe
 8622 0005 13       		.uleb128 0x13
 8623 0006 0B       		.uleb128 0xb
 8624 0007 03       		.uleb128 0x3
 8625 0008 0E       		.uleb128 0xe
 8626 0009 1B       		.uleb128 0x1b
 8627 000a 0E       		.uleb128 0xe
 8628 000b 55       		.uleb128 0x55
 8629 000c 17       		.uleb128 0x17
 8630 000d 11       		.uleb128 0x11
 8631 000e 01       		.uleb128 0x1
 8632 000f 10       		.uleb128 0x10
 8633 0010 17       		.uleb128 0x17
 8634 0011 00       		.byte	0
 8635 0012 00       		.byte	0
 8636 0013 02       		.uleb128 0x2
 8637 0014 16       		.uleb128 0x16
 8638 0015 00       		.byte	0
 8639 0016 03       		.uleb128 0x3
 8640 0017 0E       		.uleb128 0xe
 8641 0018 3A       		.uleb128 0x3a
 8642 0019 0B       		.uleb128 0xb
 8643 001a 3B       		.uleb128 0x3b
 8644 001b 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 248


 8645 001c 49       		.uleb128 0x49
 8646 001d 13       		.uleb128 0x13
 8647 001e 00       		.byte	0
 8648 001f 00       		.byte	0
 8649 0020 03       		.uleb128 0x3
 8650 0021 24       		.uleb128 0x24
 8651 0022 00       		.byte	0
 8652 0023 0B       		.uleb128 0xb
 8653 0024 0B       		.uleb128 0xb
 8654 0025 3E       		.uleb128 0x3e
 8655 0026 0B       		.uleb128 0xb
 8656 0027 03       		.uleb128 0x3
 8657 0028 0E       		.uleb128 0xe
 8658 0029 00       		.byte	0
 8659 002a 00       		.byte	0
 8660 002b 04       		.uleb128 0x4
 8661 002c 24       		.uleb128 0x24
 8662 002d 00       		.byte	0
 8663 002e 0B       		.uleb128 0xb
 8664 002f 0B       		.uleb128 0xb
 8665 0030 3E       		.uleb128 0x3e
 8666 0031 0B       		.uleb128 0xb
 8667 0032 03       		.uleb128 0x3
 8668 0033 08       		.uleb128 0x8
 8669 0034 00       		.byte	0
 8670 0035 00       		.byte	0
 8671 0036 05       		.uleb128 0x5
 8672 0037 0F       		.uleb128 0xf
 8673 0038 00       		.byte	0
 8674 0039 0B       		.uleb128 0xb
 8675 003a 0B       		.uleb128 0xb
 8676 003b 00       		.byte	0
 8677 003c 00       		.byte	0
 8678 003d 06       		.uleb128 0x6
 8679 003e 0F       		.uleb128 0xf
 8680 003f 00       		.byte	0
 8681 0040 0B       		.uleb128 0xb
 8682 0041 0B       		.uleb128 0xb
 8683 0042 49       		.uleb128 0x49
 8684 0043 13       		.uleb128 0x13
 8685 0044 00       		.byte	0
 8686 0045 00       		.byte	0
 8687 0046 07       		.uleb128 0x7
 8688 0047 26       		.uleb128 0x26
 8689 0048 00       		.byte	0
 8690 0049 49       		.uleb128 0x49
 8691 004a 13       		.uleb128 0x13
 8692 004b 00       		.byte	0
 8693 004c 00       		.byte	0
 8694 004d 08       		.uleb128 0x8
 8695 004e 15       		.uleb128 0x15
 8696 004f 01       		.byte	0x1
 8697 0050 27       		.uleb128 0x27
 8698 0051 19       		.uleb128 0x19
 8699 0052 01       		.uleb128 0x1
 8700 0053 13       		.uleb128 0x13
 8701 0054 00       		.byte	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 249


 8702 0055 00       		.byte	0
 8703 0056 09       		.uleb128 0x9
 8704 0057 05       		.uleb128 0x5
 8705 0058 00       		.byte	0
 8706 0059 49       		.uleb128 0x49
 8707 005a 13       		.uleb128 0x13
 8708 005b 00       		.byte	0
 8709 005c 00       		.byte	0
 8710 005d 0A       		.uleb128 0xa
 8711 005e 13       		.uleb128 0x13
 8712 005f 01       		.byte	0x1
 8713 0060 03       		.uleb128 0x3
 8714 0061 0E       		.uleb128 0xe
 8715 0062 0B       		.uleb128 0xb
 8716 0063 0B       		.uleb128 0xb
 8717 0064 3A       		.uleb128 0x3a
 8718 0065 0B       		.uleb128 0xb
 8719 0066 3B       		.uleb128 0x3b
 8720 0067 05       		.uleb128 0x5
 8721 0068 01       		.uleb128 0x1
 8722 0069 13       		.uleb128 0x13
 8723 006a 00       		.byte	0
 8724 006b 00       		.byte	0
 8725 006c 0B       		.uleb128 0xb
 8726 006d 0D       		.uleb128 0xd
 8727 006e 00       		.byte	0
 8728 006f 03       		.uleb128 0x3
 8729 0070 0E       		.uleb128 0xe
 8730 0071 3A       		.uleb128 0x3a
 8731 0072 0B       		.uleb128 0xb
 8732 0073 3B       		.uleb128 0x3b
 8733 0074 05       		.uleb128 0x5
 8734 0075 49       		.uleb128 0x49
 8735 0076 13       		.uleb128 0x13
 8736 0077 38       		.uleb128 0x38
 8737 0078 0B       		.uleb128 0xb
 8738 0079 00       		.byte	0
 8739 007a 00       		.byte	0
 8740 007b 0C       		.uleb128 0xc
 8741 007c 01       		.uleb128 0x1
 8742 007d 01       		.byte	0x1
 8743 007e 49       		.uleb128 0x49
 8744 007f 13       		.uleb128 0x13
 8745 0080 01       		.uleb128 0x1
 8746 0081 13       		.uleb128 0x13
 8747 0082 00       		.byte	0
 8748 0083 00       		.byte	0
 8749 0084 0D       		.uleb128 0xd
 8750 0085 21       		.uleb128 0x21
 8751 0086 00       		.byte	0
 8752 0087 49       		.uleb128 0x49
 8753 0088 13       		.uleb128 0x13
 8754 0089 2F       		.uleb128 0x2f
 8755 008a 0B       		.uleb128 0xb
 8756 008b 00       		.byte	0
 8757 008c 00       		.byte	0
 8758 008d 0E       		.uleb128 0xe
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 250


 8759 008e 16       		.uleb128 0x16
 8760 008f 00       		.byte	0
 8761 0090 03       		.uleb128 0x3
 8762 0091 0E       		.uleb128 0xe
 8763 0092 3A       		.uleb128 0x3a
 8764 0093 0B       		.uleb128 0xb
 8765 0094 3B       		.uleb128 0x3b
 8766 0095 05       		.uleb128 0x5
 8767 0096 49       		.uleb128 0x49
 8768 0097 13       		.uleb128 0x13
 8769 0098 00       		.byte	0
 8770 0099 00       		.byte	0
 8771 009a 0F       		.uleb128 0xf
 8772 009b 13       		.uleb128 0x13
 8773 009c 01       		.byte	0x1
 8774 009d 03       		.uleb128 0x3
 8775 009e 0E       		.uleb128 0xe
 8776 009f 0B       		.uleb128 0xb
 8777 00a0 0B       		.uleb128 0xb
 8778 00a1 3A       		.uleb128 0x3a
 8779 00a2 0B       		.uleb128 0xb
 8780 00a3 3B       		.uleb128 0x3b
 8781 00a4 0B       		.uleb128 0xb
 8782 00a5 01       		.uleb128 0x1
 8783 00a6 13       		.uleb128 0x13
 8784 00a7 00       		.byte	0
 8785 00a8 00       		.byte	0
 8786 00a9 10       		.uleb128 0x10
 8787 00aa 0D       		.uleb128 0xd
 8788 00ab 00       		.byte	0
 8789 00ac 03       		.uleb128 0x3
 8790 00ad 0E       		.uleb128 0xe
 8791 00ae 3A       		.uleb128 0x3a
 8792 00af 0B       		.uleb128 0xb
 8793 00b0 3B       		.uleb128 0x3b
 8794 00b1 0B       		.uleb128 0xb
 8795 00b2 49       		.uleb128 0x49
 8796 00b3 13       		.uleb128 0x13
 8797 00b4 38       		.uleb128 0x38
 8798 00b5 0B       		.uleb128 0xb
 8799 00b6 00       		.byte	0
 8800 00b7 00       		.byte	0
 8801 00b8 11       		.uleb128 0x11
 8802 00b9 35       		.uleb128 0x35
 8803 00ba 00       		.byte	0
 8804 00bb 49       		.uleb128 0x49
 8805 00bc 13       		.uleb128 0x13
 8806 00bd 00       		.byte	0
 8807 00be 00       		.byte	0
 8808 00bf 12       		.uleb128 0x12
 8809 00c0 04       		.uleb128 0x4
 8810 00c1 01       		.byte	0x1
 8811 00c2 0B       		.uleb128 0xb
 8812 00c3 0B       		.uleb128 0xb
 8813 00c4 49       		.uleb128 0x49
 8814 00c5 13       		.uleb128 0x13
 8815 00c6 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 251


 8816 00c7 0B       		.uleb128 0xb
 8817 00c8 3B       		.uleb128 0x3b
 8818 00c9 0B       		.uleb128 0xb
 8819 00ca 01       		.uleb128 0x1
 8820 00cb 13       		.uleb128 0x13
 8821 00cc 00       		.byte	0
 8822 00cd 00       		.byte	0
 8823 00ce 13       		.uleb128 0x13
 8824 00cf 28       		.uleb128 0x28
 8825 00d0 00       		.byte	0
 8826 00d1 03       		.uleb128 0x3
 8827 00d2 0E       		.uleb128 0xe
 8828 00d3 1C       		.uleb128 0x1c
 8829 00d4 0B       		.uleb128 0xb
 8830 00d5 00       		.byte	0
 8831 00d6 00       		.byte	0
 8832 00d7 14       		.uleb128 0x14
 8833 00d8 2E       		.uleb128 0x2e
 8834 00d9 01       		.byte	0x1
 8835 00da 3F       		.uleb128 0x3f
 8836 00db 19       		.uleb128 0x19
 8837 00dc 03       		.uleb128 0x3
 8838 00dd 0E       		.uleb128 0xe
 8839 00de 3A       		.uleb128 0x3a
 8840 00df 0B       		.uleb128 0xb
 8841 00e0 3B       		.uleb128 0x3b
 8842 00e1 05       		.uleb128 0x5
 8843 00e2 27       		.uleb128 0x27
 8844 00e3 19       		.uleb128 0x19
 8845 00e4 49       		.uleb128 0x49
 8846 00e5 13       		.uleb128 0x13
 8847 00e6 11       		.uleb128 0x11
 8848 00e7 01       		.uleb128 0x1
 8849 00e8 12       		.uleb128 0x12
 8850 00e9 06       		.uleb128 0x6
 8851 00ea 40       		.uleb128 0x40
 8852 00eb 18       		.uleb128 0x18
 8853 00ec 9642     		.uleb128 0x2116
 8854 00ee 19       		.uleb128 0x19
 8855 00ef 01       		.uleb128 0x1
 8856 00f0 13       		.uleb128 0x13
 8857 00f1 00       		.byte	0
 8858 00f2 00       		.byte	0
 8859 00f3 15       		.uleb128 0x15
 8860 00f4 05       		.uleb128 0x5
 8861 00f5 00       		.byte	0
 8862 00f6 03       		.uleb128 0x3
 8863 00f7 0E       		.uleb128 0xe
 8864 00f8 3A       		.uleb128 0x3a
 8865 00f9 0B       		.uleb128 0xb
 8866 00fa 3B       		.uleb128 0x3b
 8867 00fb 05       		.uleb128 0x5
 8868 00fc 49       		.uleb128 0x49
 8869 00fd 13       		.uleb128 0x13
 8870 00fe 02       		.uleb128 0x2
 8871 00ff 18       		.uleb128 0x18
 8872 0100 00       		.byte	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 252


 8873 0101 00       		.byte	0
 8874 0102 16       		.uleb128 0x16
 8875 0103 34       		.uleb128 0x34
 8876 0104 00       		.byte	0
 8877 0105 03       		.uleb128 0x3
 8878 0106 0E       		.uleb128 0xe
 8879 0107 3A       		.uleb128 0x3a
 8880 0108 0B       		.uleb128 0xb
 8881 0109 3B       		.uleb128 0x3b
 8882 010a 05       		.uleb128 0x5
 8883 010b 49       		.uleb128 0x49
 8884 010c 13       		.uleb128 0x13
 8885 010d 02       		.uleb128 0x2
 8886 010e 18       		.uleb128 0x18
 8887 010f 00       		.byte	0
 8888 0110 00       		.byte	0
 8889 0111 17       		.uleb128 0x17
 8890 0112 0B       		.uleb128 0xb
 8891 0113 01       		.byte	0x1
 8892 0114 11       		.uleb128 0x11
 8893 0115 01       		.uleb128 0x1
 8894 0116 12       		.uleb128 0x12
 8895 0117 06       		.uleb128 0x6
 8896 0118 00       		.byte	0
 8897 0119 00       		.byte	0
 8898 011a 18       		.uleb128 0x18
 8899 011b 2E       		.uleb128 0x2e
 8900 011c 01       		.byte	0x1
 8901 011d 03       		.uleb128 0x3
 8902 011e 0E       		.uleb128 0xe
 8903 011f 3A       		.uleb128 0x3a
 8904 0120 0B       		.uleb128 0xb
 8905 0121 3B       		.uleb128 0x3b
 8906 0122 05       		.uleb128 0x5
 8907 0123 27       		.uleb128 0x27
 8908 0124 19       		.uleb128 0x19
 8909 0125 11       		.uleb128 0x11
 8910 0126 01       		.uleb128 0x1
 8911 0127 12       		.uleb128 0x12
 8912 0128 06       		.uleb128 0x6
 8913 0129 40       		.uleb128 0x40
 8914 012a 18       		.uleb128 0x18
 8915 012b 9642     		.uleb128 0x2116
 8916 012d 19       		.uleb128 0x19
 8917 012e 01       		.uleb128 0x1
 8918 012f 13       		.uleb128 0x13
 8919 0130 00       		.byte	0
 8920 0131 00       		.byte	0
 8921 0132 19       		.uleb128 0x19
 8922 0133 34       		.uleb128 0x34
 8923 0134 00       		.byte	0
 8924 0135 03       		.uleb128 0x3
 8925 0136 08       		.uleb128 0x8
 8926 0137 3A       		.uleb128 0x3a
 8927 0138 0B       		.uleb128 0xb
 8928 0139 3B       		.uleb128 0x3b
 8929 013a 05       		.uleb128 0x5
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 253


 8930 013b 49       		.uleb128 0x49
 8931 013c 13       		.uleb128 0x13
 8932 013d 02       		.uleb128 0x2
 8933 013e 18       		.uleb128 0x18
 8934 013f 00       		.byte	0
 8935 0140 00       		.byte	0
 8936 0141 1A       		.uleb128 0x1a
 8937 0142 2E       		.uleb128 0x2e
 8938 0143 01       		.byte	0x1
 8939 0144 3F       		.uleb128 0x3f
 8940 0145 19       		.uleb128 0x19
 8941 0146 03       		.uleb128 0x3
 8942 0147 0E       		.uleb128 0xe
 8943 0148 3A       		.uleb128 0x3a
 8944 0149 0B       		.uleb128 0xb
 8945 014a 3B       		.uleb128 0x3b
 8946 014b 05       		.uleb128 0x5
 8947 014c 27       		.uleb128 0x27
 8948 014d 19       		.uleb128 0x19
 8949 014e 11       		.uleb128 0x11
 8950 014f 01       		.uleb128 0x1
 8951 0150 12       		.uleb128 0x12
 8952 0151 06       		.uleb128 0x6
 8953 0152 40       		.uleb128 0x40
 8954 0153 18       		.uleb128 0x18
 8955 0154 9642     		.uleb128 0x2116
 8956 0156 19       		.uleb128 0x19
 8957 0157 01       		.uleb128 0x1
 8958 0158 13       		.uleb128 0x13
 8959 0159 00       		.byte	0
 8960 015a 00       		.byte	0
 8961 015b 1B       		.uleb128 0x1b
 8962 015c 2E       		.uleb128 0x2e
 8963 015d 01       		.byte	0x1
 8964 015e 03       		.uleb128 0x3
 8965 015f 0E       		.uleb128 0xe
 8966 0160 3A       		.uleb128 0x3a
 8967 0161 0B       		.uleb128 0xb
 8968 0162 3B       		.uleb128 0x3b
 8969 0163 05       		.uleb128 0x5
 8970 0164 27       		.uleb128 0x27
 8971 0165 19       		.uleb128 0x19
 8972 0166 49       		.uleb128 0x49
 8973 0167 13       		.uleb128 0x13
 8974 0168 11       		.uleb128 0x11
 8975 0169 01       		.uleb128 0x1
 8976 016a 12       		.uleb128 0x12
 8977 016b 06       		.uleb128 0x6
 8978 016c 40       		.uleb128 0x40
 8979 016d 18       		.uleb128 0x18
 8980 016e 9742     		.uleb128 0x2117
 8981 0170 19       		.uleb128 0x19
 8982 0171 01       		.uleb128 0x1
 8983 0172 13       		.uleb128 0x13
 8984 0173 00       		.byte	0
 8985 0174 00       		.byte	0
 8986 0175 1C       		.uleb128 0x1c
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 254


 8987 0176 2E       		.uleb128 0x2e
 8988 0177 00       		.byte	0
 8989 0178 3F       		.uleb128 0x3f
 8990 0179 19       		.uleb128 0x19
 8991 017a 03       		.uleb128 0x3
 8992 017b 0E       		.uleb128 0xe
 8993 017c 3A       		.uleb128 0x3a
 8994 017d 0B       		.uleb128 0xb
 8995 017e 3B       		.uleb128 0x3b
 8996 017f 05       		.uleb128 0x5
 8997 0180 27       		.uleb128 0x27
 8998 0181 19       		.uleb128 0x19
 8999 0182 11       		.uleb128 0x11
 9000 0183 01       		.uleb128 0x1
 9001 0184 12       		.uleb128 0x12
 9002 0185 06       		.uleb128 0x6
 9003 0186 40       		.uleb128 0x40
 9004 0187 18       		.uleb128 0x18
 9005 0188 9642     		.uleb128 0x2116
 9006 018a 19       		.uleb128 0x19
 9007 018b 00       		.byte	0
 9008 018c 00       		.byte	0
 9009 018d 1D       		.uleb128 0x1d
 9010 018e 2E       		.uleb128 0x2e
 9011 018f 00       		.byte	0
 9012 0190 3F       		.uleb128 0x3f
 9013 0191 19       		.uleb128 0x19
 9014 0192 03       		.uleb128 0x3
 9015 0193 0E       		.uleb128 0xe
 9016 0194 3A       		.uleb128 0x3a
 9017 0195 0B       		.uleb128 0xb
 9018 0196 3B       		.uleb128 0x3b
 9019 0197 05       		.uleb128 0x5
 9020 0198 27       		.uleb128 0x27
 9021 0199 19       		.uleb128 0x19
 9022 019a 11       		.uleb128 0x11
 9023 019b 01       		.uleb128 0x1
 9024 019c 12       		.uleb128 0x12
 9025 019d 06       		.uleb128 0x6
 9026 019e 40       		.uleb128 0x40
 9027 019f 18       		.uleb128 0x18
 9028 01a0 9742     		.uleb128 0x2117
 9029 01a2 19       		.uleb128 0x19
 9030 01a3 00       		.byte	0
 9031 01a4 00       		.byte	0
 9032 01a5 1E       		.uleb128 0x1e
 9033 01a6 2E       		.uleb128 0x2e
 9034 01a7 01       		.byte	0x1
 9035 01a8 3F       		.uleb128 0x3f
 9036 01a9 19       		.uleb128 0x19
 9037 01aa 03       		.uleb128 0x3
 9038 01ab 0E       		.uleb128 0xe
 9039 01ac 3A       		.uleb128 0x3a
 9040 01ad 0B       		.uleb128 0xb
 9041 01ae 3B       		.uleb128 0x3b
 9042 01af 05       		.uleb128 0x5
 9043 01b0 27       		.uleb128 0x27
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 255


 9044 01b1 19       		.uleb128 0x19
 9045 01b2 49       		.uleb128 0x49
 9046 01b3 13       		.uleb128 0x13
 9047 01b4 11       		.uleb128 0x11
 9048 01b5 01       		.uleb128 0x1
 9049 01b6 12       		.uleb128 0x12
 9050 01b7 06       		.uleb128 0x6
 9051 01b8 40       		.uleb128 0x40
 9052 01b9 18       		.uleb128 0x18
 9053 01ba 9742     		.uleb128 0x2117
 9054 01bc 19       		.uleb128 0x19
 9055 01bd 01       		.uleb128 0x1
 9056 01be 13       		.uleb128 0x13
 9057 01bf 00       		.byte	0
 9058 01c0 00       		.byte	0
 9059 01c1 1F       		.uleb128 0x1f
 9060 01c2 2E       		.uleb128 0x2e
 9061 01c3 00       		.byte	0
 9062 01c4 3F       		.uleb128 0x3f
 9063 01c5 19       		.uleb128 0x19
 9064 01c6 03       		.uleb128 0x3
 9065 01c7 0E       		.uleb128 0xe
 9066 01c8 3A       		.uleb128 0x3a
 9067 01c9 0B       		.uleb128 0xb
 9068 01ca 3B       		.uleb128 0x3b
 9069 01cb 05       		.uleb128 0x5
 9070 01cc 27       		.uleb128 0x27
 9071 01cd 19       		.uleb128 0x19
 9072 01ce 49       		.uleb128 0x49
 9073 01cf 13       		.uleb128 0x13
 9074 01d0 11       		.uleb128 0x11
 9075 01d1 01       		.uleb128 0x1
 9076 01d2 12       		.uleb128 0x12
 9077 01d3 06       		.uleb128 0x6
 9078 01d4 40       		.uleb128 0x40
 9079 01d5 18       		.uleb128 0x18
 9080 01d6 9742     		.uleb128 0x2117
 9081 01d8 19       		.uleb128 0x19
 9082 01d9 00       		.byte	0
 9083 01da 00       		.byte	0
 9084 01db 20       		.uleb128 0x20
 9085 01dc 2E       		.uleb128 0x2e
 9086 01dd 01       		.byte	0x1
 9087 01de 3F       		.uleb128 0x3f
 9088 01df 19       		.uleb128 0x19
 9089 01e0 03       		.uleb128 0x3
 9090 01e1 0E       		.uleb128 0xe
 9091 01e2 3A       		.uleb128 0x3a
 9092 01e3 0B       		.uleb128 0xb
 9093 01e4 3B       		.uleb128 0x3b
 9094 01e5 05       		.uleb128 0x5
 9095 01e6 27       		.uleb128 0x27
 9096 01e7 19       		.uleb128 0x19
 9097 01e8 11       		.uleb128 0x11
 9098 01e9 01       		.uleb128 0x1
 9099 01ea 12       		.uleb128 0x12
 9100 01eb 06       		.uleb128 0x6
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 256


 9101 01ec 40       		.uleb128 0x40
 9102 01ed 18       		.uleb128 0x18
 9103 01ee 9742     		.uleb128 0x2117
 9104 01f0 19       		.uleb128 0x19
 9105 01f1 01       		.uleb128 0x1
 9106 01f2 13       		.uleb128 0x13
 9107 01f3 00       		.byte	0
 9108 01f4 00       		.byte	0
 9109 01f5 21       		.uleb128 0x21
 9110 01f6 2E       		.uleb128 0x2e
 9111 01f7 00       		.byte	0
 9112 01f8 03       		.uleb128 0x3
 9113 01f9 0E       		.uleb128 0xe
 9114 01fa 3A       		.uleb128 0x3a
 9115 01fb 0B       		.uleb128 0xb
 9116 01fc 3B       		.uleb128 0x3b
 9117 01fd 05       		.uleb128 0x5
 9118 01fe 27       		.uleb128 0x27
 9119 01ff 19       		.uleb128 0x19
 9120 0200 11       		.uleb128 0x11
 9121 0201 01       		.uleb128 0x1
 9122 0202 12       		.uleb128 0x12
 9123 0203 06       		.uleb128 0x6
 9124 0204 40       		.uleb128 0x40
 9125 0205 18       		.uleb128 0x18
 9126 0206 9742     		.uleb128 0x2117
 9127 0208 19       		.uleb128 0x19
 9128 0209 00       		.byte	0
 9129 020a 00       		.byte	0
 9130 020b 22       		.uleb128 0x22
 9131 020c 34       		.uleb128 0x34
 9132 020d 00       		.byte	0
 9133 020e 03       		.uleb128 0x3
 9134 020f 08       		.uleb128 0x8
 9135 0210 3A       		.uleb128 0x3a
 9136 0211 0B       		.uleb128 0xb
 9137 0212 3B       		.uleb128 0x3b
 9138 0213 0B       		.uleb128 0xb
 9139 0214 49       		.uleb128 0x49
 9140 0215 13       		.uleb128 0x13
 9141 0216 3F       		.uleb128 0x3f
 9142 0217 19       		.uleb128 0x19
 9143 0218 02       		.uleb128 0x2
 9144 0219 18       		.uleb128 0x18
 9145 021a 00       		.byte	0
 9146 021b 00       		.byte	0
 9147 021c 23       		.uleb128 0x23
 9148 021d 34       		.uleb128 0x34
 9149 021e 00       		.byte	0
 9150 021f 03       		.uleb128 0x3
 9151 0220 0E       		.uleb128 0xe
 9152 0221 3A       		.uleb128 0x3a
 9153 0222 0B       		.uleb128 0xb
 9154 0223 3B       		.uleb128 0x3b
 9155 0224 05       		.uleb128 0x5
 9156 0225 49       		.uleb128 0x49
 9157 0226 13       		.uleb128 0x13
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 257


 9158 0227 3F       		.uleb128 0x3f
 9159 0228 19       		.uleb128 0x19
 9160 0229 02       		.uleb128 0x2
 9161 022a 18       		.uleb128 0x18
 9162 022b 00       		.byte	0
 9163 022c 00       		.byte	0
 9164 022d 00       		.byte	0
 9165              		.section	.debug_aranges,"",%progbits
 9166 0000 B4010000 		.4byte	0x1b4
 9167 0004 0200     		.2byte	0x2
 9168 0006 00000000 		.4byte	.Ldebug_info0
 9169 000a 04       		.byte	0x4
 9170 000b 00       		.byte	0
 9171 000c 0000     		.2byte	0
 9172 000e 0000     		.2byte	0
 9173 0010 00000000 		.4byte	.LFB0
 9174 0014 94000000 		.4byte	.LFE0-.LFB0
 9175 0018 00000000 		.4byte	.LFB1
 9176 001c 98000000 		.4byte	.LFE1-.LFB1
 9177 0020 00000000 		.4byte	.LFB2
 9178 0024 10010000 		.4byte	.LFE2-.LFB2
 9179 0028 00000000 		.4byte	.LFB3
 9180 002c C8000000 		.4byte	.LFE3-.LFB3
 9181 0030 00000000 		.4byte	.LFB4
 9182 0034 D0000000 		.4byte	.LFE4-.LFB4
 9183 0038 00000000 		.4byte	.LFB5
 9184 003c C4000000 		.4byte	.LFE5-.LFB5
 9185 0040 00000000 		.4byte	.LFB6
 9186 0044 54000000 		.4byte	.LFE6-.LFB6
 9187 0048 00000000 		.4byte	.LFB7
 9188 004c 34000000 		.4byte	.LFE7-.LFB7
 9189 0050 00000000 		.4byte	.LFB8
 9190 0054 3C000000 		.4byte	.LFE8-.LFB8
 9191 0058 00000000 		.4byte	.LFB9
 9192 005c 0C010000 		.4byte	.LFE9-.LFB9
 9193 0060 00000000 		.4byte	.LFB10
 9194 0064 F0000000 		.4byte	.LFE10-.LFB10
 9195 0068 00000000 		.4byte	.LFB11
 9196 006c 54000000 		.4byte	.LFE11-.LFB11
 9197 0070 00000000 		.4byte	.LFB12
 9198 0074 A0000000 		.4byte	.LFE12-.LFB12
 9199 0078 00000000 		.4byte	.LFB13
 9200 007c CC000000 		.4byte	.LFE13-.LFB13
 9201 0080 00000000 		.4byte	.LFB14
 9202 0084 B8000000 		.4byte	.LFE14-.LFB14
 9203 0088 00000000 		.4byte	.LFB15
 9204 008c 1C000000 		.4byte	.LFE15-.LFB15
 9205 0090 00000000 		.4byte	.LFB16
 9206 0094 18000000 		.4byte	.LFE16-.LFB16
 9207 0098 00000000 		.4byte	.LFB17
 9208 009c 20010000 		.4byte	.LFE17-.LFB17
 9209 00a0 00000000 		.4byte	.LFB18
 9210 00a4 1C000000 		.4byte	.LFE18-.LFB18
 9211 00a8 00000000 		.4byte	.LFB19
 9212 00ac 20000000 		.4byte	.LFE19-.LFB19
 9213 00b0 00000000 		.4byte	.LFB20
 9214 00b4 14000000 		.4byte	.LFE20-.LFB20
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 258


 9215 00b8 00000000 		.4byte	.LFB21
 9216 00bc 38000000 		.4byte	.LFE21-.LFB21
 9217 00c0 00000000 		.4byte	.LFB22
 9218 00c4 48000000 		.4byte	.LFE22-.LFB22
 9219 00c8 00000000 		.4byte	.LFB23
 9220 00cc 4C010000 		.4byte	.LFE23-.LFB23
 9221 00d0 00000000 		.4byte	.LFB24
 9222 00d4 A8000000 		.4byte	.LFE24-.LFB24
 9223 00d8 00000000 		.4byte	.LFB25
 9224 00dc 44000000 		.4byte	.LFE25-.LFB25
 9225 00e0 00000000 		.4byte	.LFB26
 9226 00e4 68000000 		.4byte	.LFE26-.LFB26
 9227 00e8 00000000 		.4byte	.LFB27
 9228 00ec 54000000 		.4byte	.LFE27-.LFB27
 9229 00f0 00000000 		.4byte	.LFB28
 9230 00f4 C0000000 		.4byte	.LFE28-.LFB28
 9231 00f8 00000000 		.4byte	.LFB29
 9232 00fc B0000000 		.4byte	.LFE29-.LFB29
 9233 0100 00000000 		.4byte	.LFB30
 9234 0104 40000000 		.4byte	.LFE30-.LFB30
 9235 0108 00000000 		.4byte	.LFB31
 9236 010c 28000000 		.4byte	.LFE31-.LFB31
 9237 0110 00000000 		.4byte	.LFB32
 9238 0114 B0000000 		.4byte	.LFE32-.LFB32
 9239 0118 00000000 		.4byte	.LFB33
 9240 011c 14000000 		.4byte	.LFE33-.LFB33
 9241 0120 00000000 		.4byte	.LFB34
 9242 0124 20000000 		.4byte	.LFE34-.LFB34
 9243 0128 00000000 		.4byte	.LFB35
 9244 012c 50000000 		.4byte	.LFE35-.LFB35
 9245 0130 00000000 		.4byte	.LFB36
 9246 0134 48000000 		.4byte	.LFE36-.LFB36
 9247 0138 00000000 		.4byte	.LFB37
 9248 013c 88000000 		.4byte	.LFE37-.LFB37
 9249 0140 00000000 		.4byte	.LFB38
 9250 0144 5C000000 		.4byte	.LFE38-.LFB38
 9251 0148 00000000 		.4byte	.LFB39
 9252 014c 54000000 		.4byte	.LFE39-.LFB39
 9253 0150 00000000 		.4byte	.LFB40
 9254 0154 34000000 		.4byte	.LFE40-.LFB40
 9255 0158 00000000 		.4byte	.LFB41
 9256 015c 1C000000 		.4byte	.LFE41-.LFB41
 9257 0160 00000000 		.4byte	.LFB42
 9258 0164 38000000 		.4byte	.LFE42-.LFB42
 9259 0168 00000000 		.4byte	.LFB43
 9260 016c 2C000000 		.4byte	.LFE43-.LFB43
 9261 0170 00000000 		.4byte	.LFB44
 9262 0174 B8000000 		.4byte	.LFE44-.LFB44
 9263 0178 00000000 		.4byte	.LFB45
 9264 017c EC000000 		.4byte	.LFE45-.LFB45
 9265 0180 00000000 		.4byte	.LFB46
 9266 0184 78010000 		.4byte	.LFE46-.LFB46
 9267 0188 00000000 		.4byte	.LFB47
 9268 018c B4010000 		.4byte	.LFE47-.LFB47
 9269 0190 00000000 		.4byte	.LFB48
 9270 0194 1C010000 		.4byte	.LFE48-.LFB48
 9271 0198 00000000 		.4byte	.LFB49
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 259


 9272 019c 6C000000 		.4byte	.LFE49-.LFB49
 9273 01a0 00000000 		.4byte	.LFB50
 9274 01a4 5C000000 		.4byte	.LFE50-.LFB50
 9275 01a8 00000000 		.4byte	.LFB51
 9276 01ac A8000000 		.4byte	.LFE51-.LFB51
 9277 01b0 00000000 		.4byte	0
 9278 01b4 00000000 		.4byte	0
 9279              		.section	.debug_ranges,"",%progbits
 9280              	.Ldebug_ranges0:
 9281 0000 00000000 		.4byte	.LFB0
 9282 0004 94000000 		.4byte	.LFE0
 9283 0008 00000000 		.4byte	.LFB1
 9284 000c 98000000 		.4byte	.LFE1
 9285 0010 00000000 		.4byte	.LFB2
 9286 0014 10010000 		.4byte	.LFE2
 9287 0018 00000000 		.4byte	.LFB3
 9288 001c C8000000 		.4byte	.LFE3
 9289 0020 00000000 		.4byte	.LFB4
 9290 0024 D0000000 		.4byte	.LFE4
 9291 0028 00000000 		.4byte	.LFB5
 9292 002c C4000000 		.4byte	.LFE5
 9293 0030 00000000 		.4byte	.LFB6
 9294 0034 54000000 		.4byte	.LFE6
 9295 0038 00000000 		.4byte	.LFB7
 9296 003c 34000000 		.4byte	.LFE7
 9297 0040 00000000 		.4byte	.LFB8
 9298 0044 3C000000 		.4byte	.LFE8
 9299 0048 00000000 		.4byte	.LFB9
 9300 004c 0C010000 		.4byte	.LFE9
 9301 0050 00000000 		.4byte	.LFB10
 9302 0054 F0000000 		.4byte	.LFE10
 9303 0058 00000000 		.4byte	.LFB11
 9304 005c 54000000 		.4byte	.LFE11
 9305 0060 00000000 		.4byte	.LFB12
 9306 0064 A0000000 		.4byte	.LFE12
 9307 0068 00000000 		.4byte	.LFB13
 9308 006c CC000000 		.4byte	.LFE13
 9309 0070 00000000 		.4byte	.LFB14
 9310 0074 B8000000 		.4byte	.LFE14
 9311 0078 00000000 		.4byte	.LFB15
 9312 007c 1C000000 		.4byte	.LFE15
 9313 0080 00000000 		.4byte	.LFB16
 9314 0084 18000000 		.4byte	.LFE16
 9315 0088 00000000 		.4byte	.LFB17
 9316 008c 20010000 		.4byte	.LFE17
 9317 0090 00000000 		.4byte	.LFB18
 9318 0094 1C000000 		.4byte	.LFE18
 9319 0098 00000000 		.4byte	.LFB19
 9320 009c 20000000 		.4byte	.LFE19
 9321 00a0 00000000 		.4byte	.LFB20
 9322 00a4 14000000 		.4byte	.LFE20
 9323 00a8 00000000 		.4byte	.LFB21
 9324 00ac 38000000 		.4byte	.LFE21
 9325 00b0 00000000 		.4byte	.LFB22
 9326 00b4 48000000 		.4byte	.LFE22
 9327 00b8 00000000 		.4byte	.LFB23
 9328 00bc 4C010000 		.4byte	.LFE23
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 260


 9329 00c0 00000000 		.4byte	.LFB24
 9330 00c4 A8000000 		.4byte	.LFE24
 9331 00c8 00000000 		.4byte	.LFB25
 9332 00cc 44000000 		.4byte	.LFE25
 9333 00d0 00000000 		.4byte	.LFB26
 9334 00d4 68000000 		.4byte	.LFE26
 9335 00d8 00000000 		.4byte	.LFB27
 9336 00dc 54000000 		.4byte	.LFE27
 9337 00e0 00000000 		.4byte	.LFB28
 9338 00e4 C0000000 		.4byte	.LFE28
 9339 00e8 00000000 		.4byte	.LFB29
 9340 00ec B0000000 		.4byte	.LFE29
 9341 00f0 00000000 		.4byte	.LFB30
 9342 00f4 40000000 		.4byte	.LFE30
 9343 00f8 00000000 		.4byte	.LFB31
 9344 00fc 28000000 		.4byte	.LFE31
 9345 0100 00000000 		.4byte	.LFB32
 9346 0104 B0000000 		.4byte	.LFE32
 9347 0108 00000000 		.4byte	.LFB33
 9348 010c 14000000 		.4byte	.LFE33
 9349 0110 00000000 		.4byte	.LFB34
 9350 0114 20000000 		.4byte	.LFE34
 9351 0118 00000000 		.4byte	.LFB35
 9352 011c 50000000 		.4byte	.LFE35
 9353 0120 00000000 		.4byte	.LFB36
 9354 0124 48000000 		.4byte	.LFE36
 9355 0128 00000000 		.4byte	.LFB37
 9356 012c 88000000 		.4byte	.LFE37
 9357 0130 00000000 		.4byte	.LFB38
 9358 0134 5C000000 		.4byte	.LFE38
 9359 0138 00000000 		.4byte	.LFB39
 9360 013c 54000000 		.4byte	.LFE39
 9361 0140 00000000 		.4byte	.LFB40
 9362 0144 34000000 		.4byte	.LFE40
 9363 0148 00000000 		.4byte	.LFB41
 9364 014c 1C000000 		.4byte	.LFE41
 9365 0150 00000000 		.4byte	.LFB42
 9366 0154 38000000 		.4byte	.LFE42
 9367 0158 00000000 		.4byte	.LFB43
 9368 015c 2C000000 		.4byte	.LFE43
 9369 0160 00000000 		.4byte	.LFB44
 9370 0164 B8000000 		.4byte	.LFE44
 9371 0168 00000000 		.4byte	.LFB45
 9372 016c EC000000 		.4byte	.LFE45
 9373 0170 00000000 		.4byte	.LFB46
 9374 0174 78010000 		.4byte	.LFE46
 9375 0178 00000000 		.4byte	.LFB47
 9376 017c B4010000 		.4byte	.LFE47
 9377 0180 00000000 		.4byte	.LFB48
 9378 0184 1C010000 		.4byte	.LFE48
 9379 0188 00000000 		.4byte	.LFB49
 9380 018c 6C000000 		.4byte	.LFE49
 9381 0190 00000000 		.4byte	.LFB50
 9382 0194 5C000000 		.4byte	.LFE50
 9383 0198 00000000 		.4byte	.LFB51
 9384 019c A8000000 		.4byte	.LFE51
 9385 01a0 00000000 		.4byte	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 261


 9386 01a4 00000000 		.4byte	0
 9387              		.section	.debug_line,"",%progbits
 9388              	.Ldebug_line0:
 9389 0000 260D0000 		.section	.debug_str,"MS",%progbits,1
 9389      02004802 
 9389      00000201 
 9389      FB0E0D00 
 9389      01010101 
 9390              	.LASF38:
 9391 0000 53746174 		.ascii	"StaticTask_t\000"
 9391      69635461 
 9391      736B5F74 
 9391      00
 9392              	.LASF60:
 9393 000d 70635461 		.ascii	"pcTaskName\000"
 9393      736B4E61 
 9393      6D6500
 9394              	.LASF46:
 9395 0018 75784E75 		.ascii	"uxNumberOfItems\000"
 9395      6D626572 
 9395      4F664974 
 9395      656D7300 
 9396              	.LASF58:
 9397 0028 75785072 		.ascii	"uxPriority\000"
 9397      696F7269 
 9397      747900
 9398              	.LASF147:
 9399 0033 7078436F 		.ascii	"pxConstList\000"
 9399      6E73744C 
 9399      69737400 
 9400              	.LASF54:
 9401 003f 74736B54 		.ascii	"tskTaskControlBlock\000"
 9401      61736B43 
 9401      6F6E7472 
 9401      6F6C426C 
 9401      6F636B00 
 9402              	.LASF166:
 9403 0053 76546173 		.ascii	"vTaskSetThreadLocalStoragePointer\000"
 9403      6B536574 
 9403      54687265 
 9403      61644C6F 
 9403      63616C53 
 9404              	.LASF184:
 9405 0075 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 9405      7473546F 
 9405      436C6561 
 9405      724F6E45 
 9405      78697400 
 9406              	.LASF96:
 9407 0089 70727649 		.ascii	"prvInitialiseNewTask\000"
 9407      6E697469 
 9407      616C6973 
 9407      654E6577 
 9407      5461736B 
 9408              	.LASF176:
 9409 009e 78546173 		.ascii	"xTaskGetSchedulerState\000"
 9409      6B476574 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 262


 9409      53636865 
 9409      64756C65 
 9409      72537461 
 9410              	.LASF194:
 9411 00b5 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 9411      67686572 
 9411      5072696F 
 9411      72697479 
 9411      5461736B 
 9412              	.LASF65:
 9413 00cf 654E6F41 		.ascii	"eNoAction\000"
 9413      6374696F 
 9413      6E00
 9414              	.LASF213:
 9415 00d9 7578546F 		.ascii	"uxTopReadyPriority\000"
 9415      70526561 
 9415      64795072 
 9415      696F7269 
 9415      747900
 9416              	.LASF0:
 9417 00ec 756E7369 		.ascii	"unsigned int\000"
 9417      676E6564 
 9417      20696E74 
 9417      00
 9418              	.LASF149:
 9419 00f9 70784576 		.ascii	"pxEventList\000"
 9419      656E744C 
 9419      69737400 
 9420              	.LASF214:
 9421 0105 78536368 		.ascii	"xSchedulerRunning\000"
 9421      6564756C 
 9421      65725275 
 9421      6E6E696E 
 9421      6700
 9422              	.LASF47:
 9423 0117 7078496E 		.ascii	"pxIndex\000"
 9423      64657800 
 9424              	.LASF20:
 9425 011f 53746163 		.ascii	"StackType_t\000"
 9425      6B547970 
 9425      655F7400 
 9426              	.LASF71:
 9427 012b 7854494D 		.ascii	"xTIME_OUT\000"
 9427      455F4F55 
 9427      5400
 9428              	.LASF199:
 9429 0135 756C4269 		.ascii	"ulBitsToClear\000"
 9429      7473546F 
 9429      436C6561 
 9429      7200
 9430              	.LASF209:
 9431 0143 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 9431      6C657465 
 9431      64546173 
 9431      6B735761 
 9431      6974696E 
 9432              	.LASF133:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 263


 9433 0160 7850656E 		.ascii	"xPendedCounts\000"
 9433      64656443 
 9433      6F756E74 
 9433      7300
 9434              	.LASF39:
 9435 016e 784C4953 		.ascii	"xLIST_ITEM\000"
 9435      545F4954 
 9435      454D00
 9436              	.LASF202:
 9437 0179 70785265 		.ascii	"pxReadyTasksLists\000"
 9437      61647954 
 9437      61736B73 
 9437      4C697374 
 9437      7300
 9438              	.LASF226:
 9439 018b 443A5C55 		.ascii	"D:\\Users\\Jason\\Documents\\Jason's Work\\Labs\\EC"
 9439      73657273 
 9439      5C4A6173 
 9439      6F6E5C44 
 9439      6F63756D 
 9440 01b8 45473732 		.ascii	"EG721Project\\PSoCProject\\PSoC_4_BLE_CapSense_Prox"
 9440      3150726F 
 9440      6A656374 
 9440      5C50536F 
 9440      4350726F 
 9441 01e9 696D6974 		.ascii	"imity.cydsn\000"
 9441      792E6379 
 9441      64736E00 
 9442              	.LASF37:
 9443 01f5 75784475 		.ascii	"uxDummy20\000"
 9443      6D6D7932 
 9443      3000
 9444              	.LASF224:
 9445 01ff 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 9445      43313120 
 9445      352E342E 
 9445      31203230 
 9445      31363036 
 9446 0232 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 9446      20726576 
 9446      6973696F 
 9446      6E203233 
 9446      37373135 
 9447 0265 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 9447      66756E63 
 9447      74696F6E 
 9447      2D736563 
 9447      74696F6E 
 9448              	.LASF153:
 9449 028d 78576169 		.ascii	"xWaitIndefinitely\000"
 9449      74496E64 
 9449      6566696E 
 9449      6974656C 
 9449      7900
 9450              	.LASF158:
 9451 029f 76546173 		.ascii	"vTaskSetTimeOutState\000"
 9451      6B536574 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 264


 9451      54696D65 
 9451      4F757453 
 9451      74617465 
 9452              	.LASF193:
 9453 02b4 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 9453      6B47656E 
 9453      65726963 
 9453      4E6F7469 
 9453      66794672 
 9454              	.LASF87:
 9455 02ce 70785461 		.ascii	"pxTaskBuffer\000"
 9455      736B4275 
 9455      66666572 
 9455      00
 9456              	.LASF142:
 9457 02db 78546173 		.ascii	"xTaskIncrementTick\000"
 9457      6B496E63 
 9457      72656D65 
 9457      6E745469 
 9457      636B00
 9458              	.LASF203:
 9459 02ee 7844656C 		.ascii	"xDelayedTaskList1\000"
 9459      61796564 
 9459      5461736B 
 9459      4C697374 
 9459      3100
 9460              	.LASF204:
 9461 0300 7844656C 		.ascii	"xDelayedTaskList2\000"
 9461      61796564 
 9461      5461736B 
 9461      4C697374 
 9461      3200
 9462              	.LASF72:
 9463 0312 784F7665 		.ascii	"xOverflowCount\000"
 9463      72666C6F 
 9463      77436F75 
 9463      6E7400
 9464              	.LASF139:
 9465 0321 78546173 		.ascii	"xTaskCatchUpTicks\000"
 9465      6B436174 
 9465      63685570 
 9465      5469636B 
 9465      7300
 9466              	.LASF78:
 9467 0333 756C5061 		.ascii	"ulParameters\000"
 9467      72616D65 
 9467      74657273 
 9467      00
 9468              	.LASF123:
 9469 0340 78546173 		.ascii	"xTaskToResume\000"
 9469      6B546F52 
 9469      6573756D 
 9469      6500
 9470              	.LASF112:
 9471 034e 75785265 		.ascii	"uxReturn\000"
 9471      7475726E 
 9471      00
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 265


 9472              	.LASF228:
 9473 0357 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 9473      736B4765 
 9473      744E756D 
 9473      6265724F 
 9473      66546173 
 9474              	.LASF80:
 9475 036e 74736B54 		.ascii	"tskTCB\000"
 9475      434200
 9476              	.LASF125:
 9477 0375 75785361 		.ascii	"uxSavedInterruptStatus\000"
 9477      76656449 
 9477      6E746572 
 9477      72757074 
 9477      53746174 
 9478              	.LASF18:
 9479 038c 75696E74 		.ascii	"uint32_t\000"
 9479      33325F74 
 9479      00
 9480              	.LASF63:
 9481 0395 75634E6F 		.ascii	"ucNotifyState\000"
 9481      74696679 
 9481      53746174 
 9481      6500
 9482              	.LASF119:
 9483 03a3 78596965 		.ascii	"xYieldRequired\000"
 9483      6C645265 
 9483      71756972 
 9483      656400
 9484              	.LASF186:
 9485 03b2 78546173 		.ascii	"xTaskGenericNotify\000"
 9485      6B47656E 
 9485      65726963 
 9485      4E6F7469 
 9485      667900
 9486              	.LASF155:
 9487 03c5 7078556E 		.ascii	"pxUnblockedTCB\000"
 9487      626C6F63 
 9487      6B656454 
 9487      434200
 9488              	.LASF93:
 9489 03d4 75735374 		.ascii	"usStackDepth\000"
 9489      61636B44 
 9489      65707468 
 9489      00
 9490              	.LASF180:
 9491 03e1 78436C65 		.ascii	"xClearCountOnExit\000"
 9491      6172436F 
 9491      756E744F 
 9491      6E457869 
 9491      7400
 9492              	.LASF163:
 9493 03f3 78456C61 		.ascii	"xElapsedTime\000"
 9493      70736564 
 9493      54696D65 
 9493      00
 9494              	.LASF68:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 266


 9495 0400 65536574 		.ascii	"eSetValueWithOverwrite\000"
 9495      56616C75 
 9495      65576974 
 9495      684F7665 
 9495      72777269 
 9496              	.LASF13:
 9497 0417 6C6F6E67 		.ascii	"long long unsigned int\000"
 9497      206C6F6E 
 9497      6720756E 
 9497      7369676E 
 9497      65642069 
 9498              	.LASF136:
 9499 042e 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 9499      6B476574 
 9499      5469636B 
 9499      436F756E 
 9499      7446726F 
 9500              	.LASF114:
 9501 0447 75785361 		.ascii	"uxSavedInterruptState\000"
 9501      76656449 
 9501      6E746572 
 9501      72757074 
 9501      53746174 
 9502              	.LASF183:
 9503 045d 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 9503      7473546F 
 9503      436C6561 
 9503      724F6E45 
 9503      6E747279 
 9504              	.LASF207:
 9505 0472 7850656E 		.ascii	"xPendingReadyList\000"
 9505      64696E67 
 9505      52656164 
 9505      794C6973 
 9505      7400
 9506              	.LASF42:
 9507 0484 70785072 		.ascii	"pxPrevious\000"
 9507      6576696F 
 9507      757300
 9508              	.LASF225:
 9509 048f 2E2E5C46 		.ascii	"..\\FreeRTOS\\Source\\tasks.c\000"
 9509      72656552 
 9509      544F535C 
 9509      536F7572 
 9509      63655C74 
 9510              	.LASF8:
 9511 04aa 5F5F7569 		.ascii	"__uint16_t\000"
 9511      6E743136 
 9511      5F7400
 9512              	.LASF171:
 9513 04b5 70765265 		.ascii	"pvReturn\000"
 9513      7475726E 
 9513      00
 9514              	.LASF124:
 9515 04be 78546173 		.ascii	"xTaskResumeFromISR\000"
 9515      6B526573 
 9515      756D6546 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 267


 9515      726F6D49 
 9515      535200
 9516              	.LASF223:
 9517 04d1 7578546F 		.ascii	"uxTopUsedPriority\000"
 9517      70557365 
 9517      64507269 
 9517      6F726974 
 9517      7900
 9518              	.LASF131:
 9519 04e3 76546173 		.ascii	"vTaskSuspendAll\000"
 9519      6B537573 
 9519      70656E64 
 9519      416C6C00 
 9520              	.LASF61:
 9521 04f3 70765468 		.ascii	"pvThreadLocalStoragePointers\000"
 9521      72656164 
 9521      4C6F6361 
 9521      6C53746F 
 9521      72616765 
 9522              	.LASF70:
 9523 0510 654E6F74 		.ascii	"eNotifyAction\000"
 9523      69667941 
 9523      6374696F 
 9523      6E00
 9524              	.LASF4:
 9525 051e 73697A65 		.ascii	"size_t\000"
 9525      5F7400
 9526              	.LASF67:
 9527 0525 65496E63 		.ascii	"eIncrement\000"
 9527      72656D65 
 9527      6E7400
 9528              	.LASF50:
 9529 0530 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 9529      495F4C49 
 9529      53545F49 
 9529      54454D00 
 9530              	.LASF26:
 9531 0540 53746174 		.ascii	"StaticListItem_t\000"
 9531      69634C69 
 9531      73744974 
 9531      656D5F74 
 9531      00
 9532              	.LASF212:
 9533 0551 78546963 		.ascii	"xTickCount\000"
 9533      6B436F75 
 9533      6E7400
 9534              	.LASF45:
 9535 055c 784C4953 		.ascii	"xLIST\000"
 9535      5400
 9536              	.LASF130:
 9537 0562 76546173 		.ascii	"vTaskEndScheduler\000"
 9537      6B456E64 
 9537      53636865 
 9537      64756C65 
 9537      7200
 9538              	.LASF110:
 9539 0574 75785461 		.ascii	"uxTaskPriorityGet\000"
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 268


 9539      736B5072 
 9539      696F7269 
 9539      74794765 
 9539      7400
 9540              	.LASF106:
 9541 0586 78436F6E 		.ascii	"xConstTickCount\000"
 9541      73745469 
 9541      636B436F 
 9541      756E7400 
 9542              	.LASF210:
 9543 0596 78537573 		.ascii	"xSuspendedTaskList\000"
 9543      70656E64 
 9543      65645461 
 9543      736B4C69 
 9543      737400
 9544              	.LASF83:
 9545 05a9 70634E61 		.ascii	"pcName\000"
 9545      6D6500
 9546              	.LASF25:
 9547 05b0 70764475 		.ascii	"pvDummy3\000"
 9547      6D6D7933 
 9547      00
 9548              	.LASF206:
 9549 05b9 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 9549      6572666C 
 9549      6F774465 
 9549      6C617965 
 9549      64546173 
 9550              	.LASF31:
 9551 05d3 75784475 		.ascii	"uxDummy5\000"
 9551      6D6D7935 
 9551      00
 9552              	.LASF144:
 9553 05dc 70785465 		.ascii	"pxTemp\000"
 9553      6D7000
 9554              	.LASF64:
 9555 05e3 75635374 		.ascii	"ucStaticallyAllocated\000"
 9555      61746963 
 9555      616C6C79 
 9555      416C6C6F 
 9555      63617465 
 9556              	.LASF148:
 9557 05f9 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 9557      6B506C61 
 9557      63654F6E 
 9557      4576656E 
 9557      744C6973 
 9558              	.LASF108:
 9559 060f 76546173 		.ascii	"vTaskDelay\000"
 9559      6B44656C 
 9559      617900
 9560              	.LASF62:
 9561 061a 756C4E6F 		.ascii	"ulNotifiedValue\000"
 9561      74696669 
 9561      65645661 
 9561      6C756500 
 9562              	.LASF129:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 269


 9563 062a 756C4964 		.ascii	"ulIdleTaskStackSize\000"
 9563      6C655461 
 9563      736B5374 
 9563      61636B53 
 9563      697A6500 
 9564              	.LASF128:
 9565 063e 70784964 		.ascii	"pxIdleTaskStackBuffer\000"
 9565      6C655461 
 9565      736B5374 
 9565      61636B42 
 9565      75666665 
 9566              	.LASF156:
 9567 0654 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 9567      6B52656D 
 9567      6F766546 
 9567      726F6D55 
 9567      6E6F7264 
 9568              	.LASF208:
 9569 0676 78546173 		.ascii	"xTasksWaitingTermination\000"
 9569      6B735761 
 9569      6974696E 
 9569      67546572 
 9569      6D696E61 
 9570              	.LASF154:
 9571 068f 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 9571      6B52656D 
 9571      6F766546 
 9571      726F6D45 
 9571      76656E74 
 9572              	.LASF15:
 9573 06a8 63686172 		.ascii	"char\000"
 9573      00
 9574              	.LASF49:
 9575 06ad 4C697374 		.ascii	"ListItem_t\000"
 9575      4974656D 
 9575      5F7400
 9576              	.LASF69:
 9577 06b8 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 9577      56616C75 
 9577      65576974 
 9577      686F7574 
 9577      4F766572 
 9578              	.LASF22:
 9579 06d2 55426173 		.ascii	"UBaseType_t\000"
 9579      65547970 
 9579      655F7400 
 9580              	.LASF84:
 9581 06de 756C5374 		.ascii	"ulStackDepth\000"
 9581      61636B44 
 9581      65707468 
 9581      00
 9582              	.LASF182:
 9583 06eb 78546173 		.ascii	"xTaskGenericNotifyWait\000"
 9583      6B47656E 
 9583      65726963 
 9583      4E6F7469 
 9583      66795761 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 270


 9584              	.LASF76:
 9585 0702 70764261 		.ascii	"pvBaseAddress\000"
 9585      73654164 
 9585      64726573 
 9585      7300
 9586              	.LASF197:
 9587 0710 7578496E 		.ascii	"uxIndexToClear\000"
 9587      64657854 
 9587      6F436C65 
 9587      617200
 9588              	.LASF105:
 9589 071f 7853686F 		.ascii	"xShouldDelay\000"
 9589      756C6444 
 9589      656C6179 
 9589      00
 9590              	.LASF165:
 9591 072c 70727649 		.ascii	"prvIdleTask\000"
 9591      646C6554 
 9591      61736B00 
 9592              	.LASF48:
 9593 0738 784C6973 		.ascii	"xListEnd\000"
 9593      74456E64 
 9593      00
 9594              	.LASF178:
 9595 0741 756C5461 		.ascii	"ulTaskGenericNotifyTake\000"
 9595      736B4765 
 9595      6E657269 
 9595      634E6F74 
 9595      69667954 
 9596              	.LASF152:
 9597 0759 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 9597      6B506C61 
 9597      63654F6E 
 9597      4576656E 
 9597      744C6973 
 9598              	.LASF51:
 9599 0779 4D696E69 		.ascii	"MiniListItem_t\000"
 9599      4C697374 
 9599      4974656D 
 9599      5F7400
 9600              	.LASF92:
 9601 0788 78546173 		.ascii	"xTaskCreate\000"
 9601      6B437265 
 9601      61746500 
 9602              	.LASF97:
 9603 0794 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 9603      64644E65 
 9603      77546173 
 9603      6B546F52 
 9603      65616479 
 9604              	.LASF16:
 9605 07ad 75696E74 		.ascii	"uint8_t\000"
 9605      385F7400 
 9606              	.LASF88:
 9607 07b5 70784E65 		.ascii	"pxNewTCB\000"
 9607      77544342 
 9607      00
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 271


 9608              	.LASF111:
 9609 07be 78546173 		.ascii	"xTask\000"
 9609      6B00
 9610              	.LASF82:
 9611 07c4 70785461 		.ascii	"pxTaskCode\000"
 9611      736B436F 
 9611      646500
 9612              	.LASF141:
 9613 07cf 78596965 		.ascii	"xYieldOccurred\000"
 9613      6C644F63 
 9613      63757272 
 9613      656400
 9614              	.LASF79:
 9615 07de 4D656D6F 		.ascii	"MemoryRegion_t\000"
 9615      72795265 
 9615      67696F6E 
 9615      5F7400
 9616              	.LASF219:
 9617 07ed 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 9617      74546173 
 9617      6B556E62 
 9617      6C6F636B 
 9617      54696D65 
 9618              	.LASF29:
 9619 0802 70784475 		.ascii	"pxDummy1\000"
 9619      6D6D7931 
 9619      00
 9620              	.LASF36:
 9621 080b 75634475 		.ascii	"ucDummy19\000"
 9621      6D6D7931 
 9621      3900
 9622              	.LASF1:
 9623 0815 6C6F6E67 		.ascii	"long long int\000"
 9623      206C6F6E 
 9623      6720696E 
 9623      7400
 9624              	.LASF32:
 9625 0823 70784475 		.ascii	"pxDummy6\000"
 9625      6D6D7936 
 9625      00
 9626              	.LASF167:
 9627 082c 78546173 		.ascii	"xTaskToSet\000"
 9627      6B546F53 
 9627      657400
 9628              	.LASF181:
 9629 0837 756C5265 		.ascii	"ulReturn\000"
 9629      7475726E 
 9629      00
 9630              	.LASF198:
 9631 0840 756C5461 		.ascii	"ulTaskGenericNotifyValueClear\000"
 9631      736B4765 
 9631      6E657269 
 9631      634E6F74 
 9631      69667956 
 9632              	.LASF77:
 9633 085e 756C4C65 		.ascii	"ulLengthInBytes\000"
 9633      6E677468 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 272


 9633      496E4279 
 9633      74657300 
 9634              	.LASF21:
 9635 086e 42617365 		.ascii	"BaseType_t\000"
 9635      54797065 
 9635      5F7400
 9636              	.LASF229:
 9637 0879 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 9637      65736574 
 9637      4E657874 
 9637      5461736B 
 9637      556E626C 
 9638              	.LASF73:
 9639 0895 7854696D 		.ascii	"xTimeOnEntering\000"
 9639      654F6E45 
 9639      6E746572 
 9639      696E6700 
 9640              	.LASF116:
 9641 08a5 75784E65 		.ascii	"uxNewPriority\000"
 9641      77507269 
 9641      6F726974 
 9641      7900
 9642              	.LASF19:
 9643 08b3 5461736B 		.ascii	"TaskFunction_t\000"
 9643      46756E63 
 9643      74696F6E 
 9643      5F7400
 9644              	.LASF41:
 9645 08c2 70784E65 		.ascii	"pxNext\000"
 9645      787400
 9646              	.LASF191:
 9647 08c9 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 9647      72657669 
 9647      6F75734E 
 9647      6F746966 
 9647      69636174 
 9648              	.LASF159:
 9649 08e6 70785469 		.ascii	"pxTimeOut\000"
 9649      6D654F75 
 9649      7400
 9650              	.LASF113:
 9651 08f0 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 9651      736B5072 
 9651      696F7269 
 9651      74794765 
 9651      7446726F 
 9652              	.LASF134:
 9653 0909 78546173 		.ascii	"xTaskGetTickCount\000"
 9653      6B476574 
 9653      5469636B 
 9653      436F756E 
 9653      7400
 9654              	.LASF74:
 9655 091b 54696D65 		.ascii	"TimeOut_t\000"
 9655      4F75745F 
 9655      7400
 9656              	.LASF160:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 273


 9657 0925 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 9657      6B496E74 
 9657      65726E61 
 9657      6C536574 
 9657      54696D65 
 9658              	.LASF218:
 9659 0942 75785461 		.ascii	"uxTaskNumber\000"
 9659      736B4E75 
 9659      6D626572 
 9659      00
 9660              	.LASF53:
 9661 094f 5461736B 		.ascii	"TaskHandle_t\000"
 9661      48616E64 
 9661      6C655F74 
 9661      00
 9662              	.LASF190:
 9663 095c 65416374 		.ascii	"eAction\000"
 9663      696F6E00 
 9664              	.LASF177:
 9665 0964 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 9665      736B5265 
 9665      73657445 
 9665      76656E74 
 9665      4974656D 
 9666              	.LASF115:
 9667 097e 76546173 		.ascii	"vTaskPrioritySet\000"
 9667      6B507269 
 9667      6F726974 
 9667      79536574 
 9667      00
 9668              	.LASF52:
 9669 098f 4C697374 		.ascii	"List_t\000"
 9669      5F7400
 9670              	.LASF138:
 9671 0996 78546173 		.ascii	"xTaskToQuery\000"
 9671      6B546F51 
 9671      75657279 
 9671      00
 9672              	.LASF23:
 9673 09a3 5469636B 		.ascii	"TickType_t\000"
 9673      54797065 
 9673      5F7400
 9674              	.LASF187:
 9675 09ae 78546173 		.ascii	"xTaskToNotify\000"
 9675      6B546F4E 
 9675      6F746966 
 9675      7900
 9676              	.LASF91:
 9677 09bc 78546173 		.ascii	"xTaskCreateStatic\000"
 9677      6B437265 
 9677      61746553 
 9677      74617469 
 9677      6300
 9678              	.LASF66:
 9679 09ce 65536574 		.ascii	"eSetBits\000"
 9679      42697473 
 9679      00
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 274


 9680              	.LASF2:
 9681 09d7 6C6F6E67 		.ascii	"long double\000"
 9681      20646F75 
 9681      626C6500 
 9682              	.LASF192:
 9683 09e3 75634F72 		.ascii	"ucOriginalNotifyState\000"
 9683      6967696E 
 9683      616C4E6F 
 9683      74696679 
 9683      53746174 
 9684              	.LASF75:
 9685 09f9 784D454D 		.ascii	"xMEMORY_REGION\000"
 9685      4F52595F 
 9685      52454749 
 9685      4F4E00
 9686              	.LASF17:
 9687 0a08 75696E74 		.ascii	"uint16_t\000"
 9687      31365F74 
 9687      00
 9688              	.LASF107:
 9689 0a11 76546173 		.ascii	"vTaskDelete\000"
 9689      6B44656C 
 9689      65746500 
 9690              	.LASF33:
 9691 0a1d 75634475 		.ascii	"ucDummy7\000"
 9691      6D6D7937 
 9691      00
 9692              	.LASF145:
 9693 0a26 76546173 		.ascii	"vTaskSwitchContext\000"
 9693      6B537769 
 9693      74636843 
 9693      6F6E7465 
 9693      787400
 9694              	.LASF217:
 9695 0a39 784E756D 		.ascii	"xNumOfOverflows\000"
 9695      4F664F76 
 9695      6572666C 
 9695      6F777300 
 9696              	.LASF220:
 9697 0a49 7849646C 		.ascii	"xIdleTaskHandle\000"
 9697      65546173 
 9697      6B48616E 
 9697      646C6500 
 9698              	.LASF90:
 9699 0a59 7853697A 		.ascii	"xSize\000"
 9699      6500
 9700              	.LASF7:
 9701 0a5f 73686F72 		.ascii	"short int\000"
 9701      7420696E 
 9701      7400
 9702              	.LASF85:
 9703 0a69 70765061 		.ascii	"pvParameters\000"
 9703      72616D65 
 9703      74657273 
 9703      00
 9704              	.LASF40:
 9705 0a76 78497465 		.ascii	"xItemValue\000"
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 275


 9705      6D56616C 
 9705      756500
 9706              	.LASF10:
 9707 0a81 6C6F6E67 		.ascii	"long int\000"
 9707      20696E74 
 9707      00
 9708              	.LASF132:
 9709 0a8a 78546173 		.ascii	"xTaskResumeAll\000"
 9709      6B526573 
 9709      756D6541 
 9709      6C6C00
 9710              	.LASF205:
 9711 0a99 70784465 		.ascii	"pxDelayedTaskList\000"
 9711      6C617965 
 9711      64546173 
 9711      6B4C6973 
 9711      7400
 9712              	.LASF227:
 9713 0aab 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 9713      61736B49 
 9713      73546173 
 9713      6B537573 
 9713      70656E64 
 9714              	.LASF143:
 9715 0ac2 78537769 		.ascii	"xSwitchRequired\000"
 9715      74636852 
 9715      65717569 
 9715      72656400 
 9716              	.LASF100:
 9717 0ad2 78546173 		.ascii	"xTaskDelayUntil\000"
 9717      6B44656C 
 9717      6179556E 
 9717      74696C00 
 9718              	.LASF59:
 9719 0ae2 70785374 		.ascii	"pxStack\000"
 9719      61636B00 
 9720              	.LASF98:
 9721 0aea 78546173 		.ascii	"xTaskToDelete\000"
 9721      6B546F44 
 9721      656C6574 
 9721      6500
 9722              	.LASF189:
 9723 0af8 756C5661 		.ascii	"ulValue\000"
 9723      6C756500 
 9724              	.LASF121:
 9725 0b00 78546173 		.ascii	"xTaskToSuspend\000"
 9725      6B546F53 
 9725      75737065 
 9725      6E6400
 9726              	.LASF161:
 9727 0b0f 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 9727      6B436865 
 9727      636B466F 
 9727      7254696D 
 9727      654F7574 
 9728              	.LASF101:
 9729 0b24 70785072 		.ascii	"pxPreviousWakeTime\000"
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 276


 9729      6576696F 
 9729      75735761 
 9729      6B655469 
 9729      6D6500
 9730              	.LASF28:
 9731 0b37 78535441 		.ascii	"xSTATIC_TCB\000"
 9731      5449435F 
 9731      54434200 
 9732              	.LASF5:
 9733 0b43 5F5F7569 		.ascii	"__uint8_t\000"
 9733      6E74385F 
 9733      7400
 9734              	.LASF168:
 9735 0b4d 78496E64 		.ascii	"xIndex\000"
 9735      657800
 9736              	.LASF35:
 9737 0b54 756C4475 		.ascii	"ulDummy18\000"
 9737      6D6D7931 
 9737      3800
 9738              	.LASF27:
 9739 0b5e 78535441 		.ascii	"xSTATIC_LIST_ITEM\000"
 9739      5449435F 
 9739      4C495354 
 9739      5F495445 
 9739      4D00
 9740              	.LASF185:
 9741 0b70 70756C4E 		.ascii	"pulNotificationValue\000"
 9741      6F746966 
 9741      69636174 
 9741      696F6E56 
 9741      616C7565 
 9742              	.LASF89:
 9743 0b85 78526574 		.ascii	"xReturn\000"
 9743      75726E00 
 9744              	.LASF14:
 9745 0b8d 73697A65 		.ascii	"sizetype\000"
 9745      74797065 
 9745      00
 9746              	.LASF164:
 9747 0b96 76546173 		.ascii	"vTaskMissedYield\000"
 9747      6B4D6973 
 9747      73656459 
 9747      69656C64 
 9747      00
 9748              	.LASF12:
 9749 0ba7 6C6F6E67 		.ascii	"long unsigned int\000"
 9749      20756E73 
 9749      69676E65 
 9749      6420696E 
 9749      7400
 9750              	.LASF137:
 9751 0bb9 70635461 		.ascii	"pcTaskGetName\000"
 9751      736B4765 
 9751      744E616D 
 9751      6500
 9752              	.LASF135:
 9753 0bc7 78546963 		.ascii	"xTicks\000"
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 277


 9753      6B7300
 9754              	.LASF126:
 9755 0bce 76546173 		.ascii	"vTaskStartScheduler\000"
 9755      6B537461 
 9755      72745363 
 9755      68656475 
 9755      6C657200 
 9756              	.LASF201:
 9757 0be2 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 9757      426C6F63 
 9757      6B496E64 
 9757      6566696E 
 9757      6974656C 
 9758              	.LASF170:
 9759 0bf8 70765461 		.ascii	"pvTaskGetThreadLocalStoragePointer\000"
 9759      736B4765 
 9759      74546872 
 9759      6561644C 
 9759      6F63616C 
 9760              	.LASF44:
 9761 0c1b 7078436F 		.ascii	"pxContainer\000"
 9761      6E746169 
 9761      6E657200 
 9762              	.LASF109:
 9763 0c27 78546963 		.ascii	"xTicksToDelay\000"
 9763      6B73546F 
 9763      44656C61 
 9763      7900
 9764              	.LASF195:
 9765 0c35 76546173 		.ascii	"vTaskGenericNotifyGiveFromISR\000"
 9765      6B47656E 
 9765      65726963 
 9765      4E6F7469 
 9765      66794769 
 9766              	.LASF6:
 9767 0c53 756E7369 		.ascii	"unsigned char\000"
 9767      676E6564 
 9767      20636861 
 9767      7200
 9768              	.LASF151:
 9769 0c61 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 9769      6B506C61 
 9769      63654F6E 
 9769      556E6F72 
 9769      64657265 
 9770              	.LASF11:
 9771 0c80 5F5F7569 		.ascii	"__uint32_t\000"
 9771      6E743332 
 9771      5F7400
 9772              	.LASF179:
 9773 0c8b 7578496E 		.ascii	"uxIndexToWait\000"
 9773      64657854 
 9773      6F576169 
 9773      7400
 9774              	.LASF162:
 9775 0c99 70785469 		.ascii	"pxTicksToWait\000"
 9775      636B7354 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 278


 9775      6F576169 
 9775      7400
 9776              	.LASF146:
 9777 0ca7 7578546F 		.ascii	"uxTopPriority\000"
 9777      70507269 
 9777      6F726974 
 9777      7900
 9778              	.LASF57:
 9779 0cb5 78457665 		.ascii	"xEventListItem\000"
 9779      6E744C69 
 9779      73744974 
 9779      656D00
 9780              	.LASF118:
 9781 0cc4 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 9781      696F7269 
 9781      74795573 
 9781      65644F6E 
 9781      456E7472 
 9782              	.LASF81:
 9783 0cda 5443425F 		.ascii	"TCB_t\000"
 9783      7400
 9784              	.LASF188:
 9785 0ce0 7578496E 		.ascii	"uxIndexToNotify\000"
 9785      64657854 
 9785      6F4E6F74 
 9785      69667900 
 9786              	.LASF150:
 9787 0cf0 78546963 		.ascii	"xTicksToWait\000"
 9787      6B73546F 
 9787      57616974 
 9787      00
 9788              	.LASF43:
 9789 0cfd 70764F77 		.ascii	"pvOwner\000"
 9789      6E657200 
 9790              	.LASF34:
 9791 0d05 70764475 		.ascii	"pvDummy15\000"
 9791      6D6D7931 
 9791      3500
 9792              	.LASF174:
 9793 0d0f 70727644 		.ascii	"prvDeleteTCB\000"
 9793      656C6574 
 9793      65544342 
 9793      00
 9794              	.LASF120:
 9795 0d1c 76546173 		.ascii	"vTaskSuspend\000"
 9795      6B537573 
 9795      70656E64 
 9795      00
 9796              	.LASF24:
 9797 0d29 7844756D 		.ascii	"xDummy2\000"
 9797      6D793200 
 9798              	.LASF30:
 9799 0d31 7844756D 		.ascii	"xDummy3\000"
 9799      6D793300 
 9800              	.LASF104:
 9801 0d39 78416C72 		.ascii	"xAlreadyYielded\000"
 9801      65616479 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 279


 9801      5969656C 
 9801      64656400 
 9802              	.LASF175:
 9803 0d49 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 9803      6B476574 
 9803      43757272 
 9803      656E7454 
 9803      61736B48 
 9804              	.LASF215:
 9805 0d63 7850656E 		.ascii	"xPendedTicks\000"
 9805      64656454 
 9805      69636B73 
 9805      00
 9806              	.LASF140:
 9807 0d70 78546963 		.ascii	"xTicksToCatchUp\000"
 9807      6B73546F 
 9807      43617463 
 9807      68557000 
 9808              	.LASF95:
 9809 0d80 78526567 		.ascii	"xRegions\000"
 9809      696F6E73 
 9809      00
 9810              	.LASF127:
 9811 0d89 70784964 		.ascii	"pxIdleTaskTCBBuffer\000"
 9811      6C655461 
 9811      736B5443 
 9811      42427566 
 9811      66657200 
 9812              	.LASF222:
 9813 0d9d 70784375 		.ascii	"pxCurrentTCB\000"
 9813      7272656E 
 9813      74544342 
 9813      00
 9814              	.LASF211:
 9815 0daa 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 9815      7272656E 
 9815      744E756D 
 9815      6265724F 
 9815      66546173 
 9816              	.LASF102:
 9817 0dc1 7854696D 		.ascii	"xTimeIncrement\000"
 9817      65496E63 
 9817      72656D65 
 9817      6E7400
 9818              	.LASF3:
 9819 0dd0 7369676E 		.ascii	"signed char\000"
 9819      65642063 
 9819      68617200 
 9820              	.LASF9:
 9821 0ddc 73686F72 		.ascii	"short unsigned int\000"
 9821      7420756E 
 9821      7369676E 
 9821      65642069 
 9821      6E7400
 9822              	.LASF103:
 9823 0def 7854696D 		.ascii	"xTimeToWake\000"
 9823      65546F57 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 280


 9823      616B6500 
 9824              	.LASF56:
 9825 0dfb 78537461 		.ascii	"xStateListItem\000"
 9825      74654C69 
 9825      73744974 
 9825      656D00
 9826              	.LASF200:
 9827 0e0a 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 9827      64644375 
 9827      7272656E 
 9827      74546173 
 9827      6B546F44 
 9828              	.LASF99:
 9829 0e29 70785443 		.ascii	"pxTCB\000"
 9829      4200
 9830              	.LASF196:
 9831 0e2f 78546173 		.ascii	"xTaskGenericNotifyStateClear\000"
 9831      6B47656E 
 9831      65726963 
 9831      4E6F7469 
 9831      66795374 
 9832              	.LASF221:
 9833 0e4c 75785363 		.ascii	"uxSchedulerSuspended\000"
 9833      68656475 
 9833      6C657253 
 9833      75737065 
 9833      6E646564 
 9834              	.LASF86:
 9835 0e61 70757853 		.ascii	"puxStackBuffer\000"
 9835      7461636B 
 9835      42756666 
 9835      657200
 9836              	.LASF55:
 9837 0e70 7078546F 		.ascii	"pxTopOfStack\000"
 9837      704F6653 
 9837      7461636B 
 9837      00
 9838              	.LASF122:
 9839 0e7d 76546173 		.ascii	"vTaskResume\000"
 9839      6B526573 
 9839      756D6500 
 9840              	.LASF172:
 9841 0e89 70727649 		.ascii	"prvInitialiseTaskLists\000"
 9841      6E697469 
 9841      616C6973 
 9841      65546173 
 9841      6B4C6973 
 9842              	.LASF157:
 9843 0ea0 70784576 		.ascii	"pxEventListItem\000"
 9843      656E744C 
 9843      69737449 
 9843      74656D00 
 9844              	.LASF169:
 9845 0eb0 70765661 		.ascii	"pvValue\000"
 9845      6C756500 
 9846              	.LASF94:
 9847 0eb8 70784372 		.ascii	"pxCreatedTask\000"
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclSZdbR.s 			page 281


 9847      65617465 
 9847      64546173 
 9847      6B00
 9848              	.LASF173:
 9849 0ec6 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 9849      6865636B 
 9849      5461736B 
 9849      73576169 
 9849      74696E67 
 9850              	.LASF117:
 9851 0ee6 75784375 		.ascii	"uxCurrentBasePriority\000"
 9851      7272656E 
 9851      74426173 
 9851      65507269 
 9851      6F726974 
 9852              	.LASF216:
 9853 0efc 78596965 		.ascii	"xYieldPending\000"
 9853      6C645065 
 9853      6E64696E 
 9853      6700
 9854              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
